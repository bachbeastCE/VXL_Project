
VLX_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002bc4  08002bc4  00003bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  0000407c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  0000407c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00003bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08002bf8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000007c  08002c74  0000407c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08002c74  000044a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5ff  00000000  00000000  000040a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002057  00000000  00000000  0000f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00011700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a53  00000000  00000000  00012448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002055  00000000  00000000  00012e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108c0  00000000  00000000  00014ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ca1  00000000  00000000  000257b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  000aa494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000adacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bac 	.word	0x08002bac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002bac 	.word	0x08002bac

0800014c <isButtonPressed>:
int button_pressed[5] = {0, 0, 0, 0, 0};
int button_long_pressed[5] = {0, 0, 0, 0, 0};
int button_flag[5] = {0, 0, 0, 0, 0};

// Check if the button was pressed
int isButtonPressed(int button_index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (button_pressed[button_index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
        button_pressed[button_index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000098 	.word	0x20000098

08000180 <isButtonLongPressed>:

// Check if the button was long-pressed
int isButtonLongPressed(int button_index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    if (button_long_pressed[button_index] == 1) {
 8000188:	4a09      	ldr	r2, [pc, #36]	@ (80001b0 <isButtonLongPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPressed+0x22>
        button_long_pressed[button_index] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <isButtonLongPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPressed+0x24>
    }
    return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200000ac 	.word	0x200000ac

080001b4 <getKeyInput>:
    button_flag[button_index] = 1;
    // Add specific logic for short press or long press
}

// Detect button input and process short/long presses
void getKeyInput() {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_BUTTON; i++) {
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e07b      	b.n	80002b8 <getKeyInput+0x104>
        KeyReg2[i] = KeyReg1[i];
 80001c0:	4a42      	ldr	r2, [pc, #264]	@ (80002cc <getKeyInput+0x118>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	4941      	ldr	r1, [pc, #260]	@ (80002d0 <getKeyInput+0x11c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg0[i];
 80001d0:	4a40      	ldr	r2, [pc, #256]	@ (80002d4 <getKeyInput+0x120>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	493c      	ldr	r1, [pc, #240]	@ (80002cc <getKeyInput+0x118>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Replace MODIFY_BUTTON, MODE_BUTTON, etc., with the actual GPIO pins for your buttons
        KeyReg0[0] = HAL_GPIO_ReadPin(GPIOA, UP_BUTTON);
 80001e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001e4:	483c      	ldr	r0, [pc, #240]	@ (80002d8 <getKeyInput+0x124>)
 80001e6:	f001 fb51 	bl	800188c <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b39      	ldr	r3, [pc, #228]	@ (80002d4 <getKeyInput+0x120>)
 80001f0:	601a      	str	r2, [r3, #0]
        KeyReg0[1] = HAL_GPIO_ReadPin(GPIOA, SET_BUTTON);
 80001f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001f6:	4838      	ldr	r0, [pc, #224]	@ (80002d8 <getKeyInput+0x124>)
 80001f8:	f001 fb48 	bl	800188c <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b34      	ldr	r3, [pc, #208]	@ (80002d4 <getKeyInput+0x120>)
 8000202:	605a      	str	r2, [r3, #4]
        // Add more buttons as needed

        // Debounce logic
        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000204:	4a31      	ldr	r2, [pc, #196]	@ (80002cc <getKeyInput+0x118>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4931      	ldr	r1, [pc, #196]	@ (80002d4 <getKeyInput+0x120>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d14c      	bne.n	80002b2 <getKeyInput+0xfe>
 8000218:	4a2c      	ldr	r2, [pc, #176]	@ (80002cc <getKeyInput+0x118>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492b      	ldr	r1, [pc, #172]	@ (80002d0 <getKeyInput+0x11c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d142      	bne.n	80002b2 <getKeyInput+0xfe>
            if (KeyReg2[i] != KeyReg3[i]) {
 800022c:	4a28      	ldr	r2, [pc, #160]	@ (80002d0 <getKeyInput+0x11c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4929      	ldr	r1, [pc, #164]	@ (80002dc <getKeyInput+0x128>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <getKeyInput+0xbe>
                KeyReg3[i] = KeyReg2[i];
 8000240:	4a23      	ldr	r2, [pc, #140]	@ (80002d0 <getKeyInput+0x11c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4924      	ldr	r1, [pc, #144]	@ (80002dc <getKeyInput+0x128>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // Button is pressed
                if (KeyReg3[i] == PRESSED_STATE) {
 8000250:	4a22      	ldr	r2, [pc, #136]	@ (80002dc <getKeyInput+0x128>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d12a      	bne.n	80002b2 <getKeyInput+0xfe>
                    TimeOutForKeyPress[i] = 100; // Reset long press timeout
 800025c:	4a20      	ldr	r2, [pc, #128]	@ (80002e0 <getKeyInput+0x12c>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2164      	movs	r1, #100	@ 0x64
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_pressed[i] = 1;       // Mark as a short press
 8000266:	4a1f      	ldr	r2, [pc, #124]	@ (80002e4 <getKeyInput+0x130>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2101      	movs	r1, #1
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000270:	e01f      	b.n	80002b2 <getKeyInput+0xfe>
                }
            } else {
                // If button is still pressed, decrement timeout for long press
                if (KeyReg3[i] == PRESSED_STATE) {
 8000272:	4a1a      	ldr	r2, [pc, #104]	@ (80002dc <getKeyInput+0x128>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d119      	bne.n	80002b2 <getKeyInput+0xfe>
                    if (TimeOutForKeyPress[i] > 0) {
 800027e:	4a18      	ldr	r2, [pc, #96]	@ (80002e0 <getKeyInput+0x12c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dd09      	ble.n	800029e <getKeyInput+0xea>
                        TimeOutForKeyPress[i]--;
 800028a:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <getKeyInput+0x12c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	1e5a      	subs	r2, r3, #1
 8000294:	4912      	ldr	r1, [pc, #72]	@ (80002e0 <getKeyInput+0x12c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800029c:	e009      	b.n	80002b2 <getKeyInput+0xfe>
                    } else {
                        // Long press detected
                        button_long_pressed[i] = 1;
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <getKeyInput+0x134>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2101      	movs	r1, #1
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimeOutForKeyPress[i] = 100; // Reset timeout
 80002a8:	4a0d      	ldr	r2, [pc, #52]	@ (80002e0 <getKeyInput+0x12c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2164      	movs	r1, #100	@ 0x64
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_BUTTON; i++) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	2205      	movs	r2, #5
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4293      	cmp	r3, r2
 80002be:	f6ff af7f 	blt.w	80001c0 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000014 	.word	0x20000014
 80002d0:	20000028 	.word	0x20000028
 80002d4:	20000000 	.word	0x20000000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	2000003c 	.word	0x2000003c
 80002e0:	20000050 	.word	0x20000050
 80002e4:	20000098 	.word	0x20000098
 80002e8:	200000ac 	.word	0x200000ac

080002ec <run_automatic>:
#include "fsm_automatic.h"
void run_automatic(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	switch(status1){
 80002f0:	4b78      	ldr	r3, [pc, #480]	@ (80004d4 <run_automatic+0x1e8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b0d      	cmp	r3, #13
 80002f6:	d869      	bhi.n	80003cc <run_automatic+0xe0>
 80002f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000300 <run_automatic+0x14>)
 80002fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fe:	bf00      	nop
 8000300:	08000339 	.word	0x08000339
 8000304:	080003cd 	.word	0x080003cd
 8000308:	080003cd 	.word	0x080003cd
 800030c:	080003cd 	.word	0x080003cd
 8000310:	080003cd 	.word	0x080003cd
 8000314:	080003cd 	.word	0x080003cd
 8000318:	080003cd 	.word	0x080003cd
 800031c:	080003cd 	.word	0x080003cd
 8000320:	080003cd 	.word	0x080003cd
 8000324:	080003cd 	.word	0x080003cd
 8000328:	080003cd 	.word	0x080003cd
 800032c:	0800034d 	.word	0x0800034d
 8000330:	08000395 	.word	0x08000395
 8000334:	080003b1 	.word	0x080003b1
				case INIT:{
						ResetLight1();
 8000338:	f000 fb00 	bl	800093c <ResetLight1>
						status1 = RED_LED_AUTO;
 800033c:	4b65      	ldr	r3, [pc, #404]	@ (80004d4 <run_automatic+0x1e8>)
 800033e:	220b      	movs	r2, #11
 8000340:	601a      	str	r2, [r3, #0]
						count1 = time_red;
 8000342:	4b65      	ldr	r3, [pc, #404]	@ (80004d8 <run_automatic+0x1ec>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a65      	ldr	r2, [pc, #404]	@ (80004dc <run_automatic+0x1f0>)
 8000348:	6013      	str	r3, [r2, #0]
						break;
 800034a:	e046      	b.n	80003da <run_automatic+0xee>
					}
				case RED_LED_AUTO:{
						RedLight1();
 800034c:	f000 fb22 	bl	8000994 <RedLight1>
						if (count1 == 0){
 8000350:	4b62      	ldr	r3, [pc, #392]	@ (80004dc <run_automatic+0x1f0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <run_automatic+0x7a>
							status1 = GREEN_LED_AUTO;
 8000358:	4b5e      	ldr	r3, [pc, #376]	@ (80004d4 <run_automatic+0x1e8>)
 800035a:	220d      	movs	r2, #13
 800035c:	601a      	str	r2, [r3, #0]
							count1 = time_green;
 800035e:	4b60      	ldr	r3, [pc, #384]	@ (80004e0 <run_automatic+0x1f4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a5e      	ldr	r2, [pc, #376]	@ (80004dc <run_automatic+0x1f0>)
 8000364:	6013      	str	r3, [r2, #0]
						}
						if (isButtonLongPressed(up_button)==1){
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ff0a 	bl	8000180 <isButtonLongPressed>
 800036c:	4603      	mov	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	d12e      	bne.n	80003d0 <run_automatic+0xe4>
							HAL_GPIO_TogglePin(GPIOA, LED_PINK);
 8000372:	2180      	movs	r1, #128	@ 0x80
 8000374:	485b      	ldr	r0, [pc, #364]	@ (80004e4 <run_automatic+0x1f8>)
 8000376:	f001 fab8 	bl	80018ea <HAL_GPIO_TogglePin>
							status1 = RED_GREEN_MAN;
 800037a:	4b56      	ldr	r3, [pc, #344]	@ (80004d4 <run_automatic+0x1e8>)
 800037c:	2215      	movs	r2, #21
 800037e:	601a      	str	r2, [r3, #0]
							status2 = RED_GREEN_MAN;
 8000380:	4b59      	ldr	r3, [pc, #356]	@ (80004e8 <run_automatic+0x1fc>)
 8000382:	2215      	movs	r2, #21
 8000384:	601a      	str	r2, [r3, #0]
							count1 = 10*scale;
 8000386:	4b55      	ldr	r3, [pc, #340]	@ (80004dc <run_automatic+0x1f0>)
 8000388:	2264      	movs	r2, #100	@ 0x64
 800038a:	601a      	str	r2, [r3, #0]
							count2 = 1;
 800038c:	4b57      	ldr	r3, [pc, #348]	@ (80004ec <run_automatic+0x200>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]
						}
						break;
 8000392:	e01d      	b.n	80003d0 <run_automatic+0xe4>
					}
				case YELLOW_LED_AUTO:{
						YellowLight1();
 8000394:	f000 fb14 	bl	80009c0 <YellowLight1>
						if (count1==0){
 8000398:	4b50      	ldr	r3, [pc, #320]	@ (80004dc <run_automatic+0x1f0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d119      	bne.n	80003d4 <run_automatic+0xe8>
							status1 = RED_LED_AUTO;
 80003a0:	4b4c      	ldr	r3, [pc, #304]	@ (80004d4 <run_automatic+0x1e8>)
 80003a2:	220b      	movs	r2, #11
 80003a4:	601a      	str	r2, [r3, #0]
							count1 = time_red;
 80003a6:	4b4c      	ldr	r3, [pc, #304]	@ (80004d8 <run_automatic+0x1ec>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a4c      	ldr	r2, [pc, #304]	@ (80004dc <run_automatic+0x1f0>)
 80003ac:	6013      	str	r3, [r2, #0]
						}
						break;
 80003ae:	e011      	b.n	80003d4 <run_automatic+0xe8>
					}
				case GREEN_LED_AUTO:{
						GreenLight1();
 80003b0:	f000 fb1c 	bl	80009ec <GreenLight1>
						if (count1==0)	{
 80003b4:	4b49      	ldr	r3, [pc, #292]	@ (80004dc <run_automatic+0x1f0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d10d      	bne.n	80003d8 <run_automatic+0xec>
							status1 = YELLOW_LED_AUTO;
 80003bc:	4b45      	ldr	r3, [pc, #276]	@ (80004d4 <run_automatic+0x1e8>)
 80003be:	220c      	movs	r2, #12
 80003c0:	601a      	str	r2, [r3, #0]
							count1 = time_yellow;
 80003c2:	4b4b      	ldr	r3, [pc, #300]	@ (80004f0 <run_automatic+0x204>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a45      	ldr	r2, [pc, #276]	@ (80004dc <run_automatic+0x1f0>)
 80003c8:	6013      	str	r3, [r2, #0]
						}
						break;
 80003ca:	e005      	b.n	80003d8 <run_automatic+0xec>
					}
				default:
						break;
 80003cc:	bf00      	nop
 80003ce:	e004      	b.n	80003da <run_automatic+0xee>
						break;
 80003d0:	bf00      	nop
 80003d2:	e002      	b.n	80003da <run_automatic+0xee>
						break;
 80003d4:	bf00      	nop
 80003d6:	e000      	b.n	80003da <run_automatic+0xee>
						break;
 80003d8:	bf00      	nop
			}

		switch(status2){
 80003da:	4b43      	ldr	r3, [pc, #268]	@ (80004e8 <run_automatic+0x1fc>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b0d      	cmp	r3, #13
 80003e0:	d852      	bhi.n	8000488 <run_automatic+0x19c>
 80003e2:	a201      	add	r2, pc, #4	@ (adr r2, 80003e8 <run_automatic+0xfc>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	08000421 	.word	0x08000421
 80003ec:	08000489 	.word	0x08000489
 80003f0:	08000489 	.word	0x08000489
 80003f4:	08000489 	.word	0x08000489
 80003f8:	08000489 	.word	0x08000489
 80003fc:	08000489 	.word	0x08000489
 8000400:	08000489 	.word	0x08000489
 8000404:	08000489 	.word	0x08000489
 8000408:	08000489 	.word	0x08000489
 800040c:	08000489 	.word	0x08000489
 8000410:	08000489 	.word	0x08000489
 8000414:	08000435 	.word	0x08000435
 8000418:	08000451 	.word	0x08000451
 800041c:	0800046d 	.word	0x0800046d
					case INIT:{
							ResetLight2();
 8000420:	f000 faa2 	bl	8000968 <ResetLight2>
							status2 = GREEN_LED_AUTO;
 8000424:	4b30      	ldr	r3, [pc, #192]	@ (80004e8 <run_automatic+0x1fc>)
 8000426:	220d      	movs	r2, #13
 8000428:	601a      	str	r2, [r3, #0]
							count2 = time_green;
 800042a:	4b2d      	ldr	r3, [pc, #180]	@ (80004e0 <run_automatic+0x1f4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a2f      	ldr	r2, [pc, #188]	@ (80004ec <run_automatic+0x200>)
 8000430:	6013      	str	r3, [r2, #0]
							break;
 8000432:	e030      	b.n	8000496 <run_automatic+0x1aa>
						}
					case RED_LED_AUTO:{
							RedLight2();
 8000434:	f000 faf0 	bl	8000a18 <RedLight2>
							if (count2==0){
 8000438:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <run_automatic+0x200>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d125      	bne.n	800048c <run_automatic+0x1a0>
								status2 = GREEN_LED_AUTO;
 8000440:	4b29      	ldr	r3, [pc, #164]	@ (80004e8 <run_automatic+0x1fc>)
 8000442:	220d      	movs	r2, #13
 8000444:	601a      	str	r2, [r3, #0]
								count2 = time_green;
 8000446:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <run_automatic+0x1f4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a28      	ldr	r2, [pc, #160]	@ (80004ec <run_automatic+0x200>)
 800044c:	6013      	str	r3, [r2, #0]
							}
							break;
 800044e:	e01d      	b.n	800048c <run_automatic+0x1a0>
						}
					case YELLOW_LED_AUTO:{
							YellowLight2();
 8000450:	f000 faf8 	bl	8000a44 <YellowLight2>
							if (count2==0){
 8000454:	4b25      	ldr	r3, [pc, #148]	@ (80004ec <run_automatic+0x200>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d119      	bne.n	8000490 <run_automatic+0x1a4>
								status2 = RED_LED_AUTO;
 800045c:	4b22      	ldr	r3, [pc, #136]	@ (80004e8 <run_automatic+0x1fc>)
 800045e:	220b      	movs	r2, #11
 8000460:	601a      	str	r2, [r3, #0]
								count2 = time_red;
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <run_automatic+0x1ec>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <run_automatic+0x200>)
 8000468:	6013      	str	r3, [r2, #0]
							}
							break;
 800046a:	e011      	b.n	8000490 <run_automatic+0x1a4>
						}
					case GREEN_LED_AUTO:{
							GreenLight2();
 800046c:	f000 fb00 	bl	8000a70 <GreenLight2>
							if (count2 == 0)	{
 8000470:	4b1e      	ldr	r3, [pc, #120]	@ (80004ec <run_automatic+0x200>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10d      	bne.n	8000494 <run_automatic+0x1a8>
								status2 = YELLOW_LED_AUTO;
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <run_automatic+0x1fc>)
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
								count2 = time_yellow;
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <run_automatic+0x204>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a1a      	ldr	r2, [pc, #104]	@ (80004ec <run_automatic+0x200>)
 8000484:	6013      	str	r3, [r2, #0]
							}
							break;
 8000486:	e005      	b.n	8000494 <run_automatic+0x1a8>
						}
					default:
							break;
 8000488:	bf00      	nop
 800048a:	e004      	b.n	8000496 <run_automatic+0x1aa>
							break;
 800048c:	bf00      	nop
 800048e:	e002      	b.n	8000496 <run_automatic+0x1aa>
							break;
 8000490:	bf00      	nop
 8000492:	e000      	b.n	8000496 <run_automatic+0x1aa>
							break;
 8000494:	bf00      	nop
				}

		if((status1/10)==1 && count1>0 )count1--;
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <run_automatic+0x1e8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3b0a      	subs	r3, #10
 800049c:	2b09      	cmp	r3, #9
 800049e:	d808      	bhi.n	80004b2 <run_automatic+0x1c6>
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <run_automatic+0x1f0>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dd04      	ble.n	80004b2 <run_automatic+0x1c6>
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <run_automatic+0x1f0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	4a0b      	ldr	r2, [pc, #44]	@ (80004dc <run_automatic+0x1f0>)
 80004b0:	6013      	str	r3, [r2, #0]
		if((status2/10)==1 && count2>0 )count2--;
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <run_automatic+0x1fc>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3b0a      	subs	r3, #10
 80004b8:	2b09      	cmp	r3, #9
 80004ba:	d808      	bhi.n	80004ce <run_automatic+0x1e2>
 80004bc:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <run_automatic+0x200>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	dd04      	ble.n	80004ce <run_automatic+0x1e2>
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <run_automatic+0x200>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	4a08      	ldr	r2, [pc, #32]	@ (80004ec <run_automatic+0x200>)
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200000cc 	.word	0x200000cc
 80004d8:	20000064 	.word	0x20000064
 80004dc:	200000d4 	.word	0x200000d4
 80004e0:	2000006c 	.word	0x2000006c
 80004e4:	40010800 	.word	0x40010800
 80004e8:	200000d0 	.word	0x200000d0
 80004ec:	200000d8 	.word	0x200000d8
 80004f0:	20000068 	.word	0x20000068

080004f4 <run_manual>:
#include "fsm_manual.h"

void run_manual(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	switch (status1){
 80004f8:	4b70      	ldr	r3, [pc, #448]	@ (80006bc <run_manual+0x1c8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b15      	subs	r3, #21
 80004fe:	2b03      	cmp	r3, #3
 8000500:	f200 80c3 	bhi.w	800068a <run_manual+0x196>
 8000504:	a201      	add	r2, pc, #4	@ (adr r2, 800050c <run_manual+0x18>)
 8000506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050a:	bf00      	nop
 800050c:	0800051d 	.word	0x0800051d
 8000510:	08000577 	.word	0x08000577
 8000514:	080005d5 	.word	0x080005d5
 8000518:	0800062d 	.word	0x0800062d
	case RED_GREEN_MAN:{
		RedLight1();
 800051c:	f000 fa3a 	bl	8000994 <RedLight1>
		GreenLight2();
 8000520:	f000 faa6 	bl	8000a70 <GreenLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 8000524:	4b66      	ldr	r3, [pc, #408]	@ (80006c0 <run_manual+0x1cc>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d005      	beq.n	8000538 <run_manual+0x44>
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff fe27 	bl	8000180 <isButtonLongPressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d10d      	bne.n	8000554 <run_manual+0x60>
			count1 = time_red;
 8000538:	4b62      	ldr	r3, [pc, #392]	@ (80006c4 <run_manual+0x1d0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a60      	ldr	r2, [pc, #384]	@ (80006c0 <run_manual+0x1cc>)
 800053e:	6013      	str	r3, [r2, #0]
			count2 = time_green;
 8000540:	4b61      	ldr	r3, [pc, #388]	@ (80006c8 <run_manual+0x1d4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a61      	ldr	r2, [pc, #388]	@ (80006cc <run_manual+0x1d8>)
 8000546:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 8000548:	4b5c      	ldr	r3, [pc, #368]	@ (80006bc <run_manual+0x1c8>)
 800054a:	220b      	movs	r2, #11
 800054c:	601a      	str	r2, [r3, #0]
			status2 = GREEN_LED_AUTO;
 800054e:	4b60      	ldr	r3, [pc, #384]	@ (80006d0 <run_manual+0x1dc>)
 8000550:	220d      	movs	r2, #13
 8000552:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1){
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff fdf9 	bl	800014c <isButtonPressed>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	f040 8096 	bne.w	800068e <run_manual+0x19a>
			status1= RED_YELLOW_MAN;
 8000562:	4b56      	ldr	r3, [pc, #344]	@ (80006bc <run_manual+0x1c8>)
 8000564:	2216      	movs	r2, #22
 8000566:	601a      	str	r2, [r3, #0]
			count1 = 10*scale;
 8000568:	4b55      	ldr	r3, [pc, #340]	@ (80006c0 <run_manual+0x1cc>)
 800056a:	2264      	movs	r2, #100	@ 0x64
 800056c:	601a      	str	r2, [r3, #0]
			count2 = 1;
 800056e:	4b57      	ldr	r3, [pc, #348]	@ (80006cc <run_manual+0x1d8>)
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
		}
		break;
 8000574:	e08b      	b.n	800068e <run_manual+0x19a>
	}
	case RED_YELLOW_MAN:{
		RedLight1();
 8000576:	f000 fa0d 	bl	8000994 <RedLight1>
		YellowLight2();
 800057a:	f000 fa63 	bl	8000a44 <YellowLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 800057e:	4b50      	ldr	r3, [pc, #320]	@ (80006c0 <run_manual+0x1cc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d005      	beq.n	8000592 <run_manual+0x9e>
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fdfa 	bl	8000180 <isButtonLongPressed>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	d110      	bne.n	80005b4 <run_manual+0xc0>
			count1 = time_red - time_green;
 8000592:	4b4c      	ldr	r3, [pc, #304]	@ (80006c4 <run_manual+0x1d0>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b4c      	ldr	r3, [pc, #304]	@ (80006c8 <run_manual+0x1d4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a48      	ldr	r2, [pc, #288]	@ (80006c0 <run_manual+0x1cc>)
 800059e:	6013      	str	r3, [r2, #0]
			count2 = time_yellow;
 80005a0:	4b4c      	ldr	r3, [pc, #304]	@ (80006d4 <run_manual+0x1e0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a49      	ldr	r2, [pc, #292]	@ (80006cc <run_manual+0x1d8>)
 80005a6:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 80005a8:	4b44      	ldr	r3, [pc, #272]	@ (80006bc <run_manual+0x1c8>)
 80005aa:	220b      	movs	r2, #11
 80005ac:	601a      	str	r2, [r3, #0]
			status2 = YELLOW_LED_AUTO;
 80005ae:	4b48      	ldr	r3, [pc, #288]	@ (80006d0 <run_manual+0x1dc>)
 80005b0:	220c      	movs	r2, #12
 80005b2:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1){
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fdc9 	bl	800014c <isButtonPressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d168      	bne.n	8000692 <run_manual+0x19e>
			status1= GREEN_RED_MAN;
 80005c0:	4b3e      	ldr	r3, [pc, #248]	@ (80006bc <run_manual+0x1c8>)
 80005c2:	2217      	movs	r2, #23
 80005c4:	601a      	str	r2, [r3, #0]
			count1 = 10*scale;
 80005c6:	4b3e      	ldr	r3, [pc, #248]	@ (80006c0 <run_manual+0x1cc>)
 80005c8:	2264      	movs	r2, #100	@ 0x64
 80005ca:	601a      	str	r2, [r3, #0]
			count2 = 1;
 80005cc:	4b3f      	ldr	r3, [pc, #252]	@ (80006cc <run_manual+0x1d8>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
		}
		break;
 80005d2:	e05e      	b.n	8000692 <run_manual+0x19e>
	}
	case GREEN_RED_MAN:{
		GreenLight1();
 80005d4:	f000 fa0a 	bl	80009ec <GreenLight1>
		RedLight2();
 80005d8:	f000 fa1e 	bl	8000a18 <RedLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 80005dc:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <run_manual+0x1cc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d005      	beq.n	80005f0 <run_manual+0xfc>
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff fdcb 	bl	8000180 <isButtonLongPressed>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10d      	bne.n	800060c <run_manual+0x118>
			count1 = time_green;
 80005f0:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <run_manual+0x1d4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a32      	ldr	r2, [pc, #200]	@ (80006c0 <run_manual+0x1cc>)
 80005f6:	6013      	str	r3, [r2, #0]
			count2 = time_red;
 80005f8:	4b32      	ldr	r3, [pc, #200]	@ (80006c4 <run_manual+0x1d0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a33      	ldr	r2, [pc, #204]	@ (80006cc <run_manual+0x1d8>)
 80005fe:	6013      	str	r3, [r2, #0]
			status1 = GREEN_LED_AUTO;
 8000600:	4b2e      	ldr	r3, [pc, #184]	@ (80006bc <run_manual+0x1c8>)
 8000602:	220d      	movs	r2, #13
 8000604:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_AUTO;
 8000606:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <run_manual+0x1dc>)
 8000608:	220b      	movs	r2, #11
 800060a:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1){
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fd9d 	bl	800014c <isButtonPressed>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d13e      	bne.n	8000696 <run_manual+0x1a2>
			status1= YELLOW_RED_MAN;
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <run_manual+0x1c8>)
 800061a:	2218      	movs	r2, #24
 800061c:	601a      	str	r2, [r3, #0]
			count1 = 5*scale;
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <run_manual+0x1cc>)
 8000620:	2232      	movs	r2, #50	@ 0x32
 8000622:	601a      	str	r2, [r3, #0]
			count2 = 1;
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <run_manual+0x1d8>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
		}
		break;
 800062a:	e034      	b.n	8000696 <run_manual+0x1a2>
	}
	case YELLOW_RED_MAN:{
			YellowLight1();
 800062c:	f000 f9c8 	bl	80009c0 <YellowLight1>
			RedLight2();
 8000630:	f000 f9f2 	bl	8000a18 <RedLight2>
			if(count1==0 || isButtonLongPressed(up_button)==1){
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <run_manual+0x1cc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <run_manual+0x154>
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff fd9f 	bl	8000180 <isButtonLongPressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d110      	bne.n	800066a <run_manual+0x176>
				count1 = time_yellow;
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <run_manual+0x1e0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <run_manual+0x1cc>)
 800064e:	6013      	str	r3, [r2, #0]
				count2 = time_red - time_green ;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <run_manual+0x1d0>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <run_manual+0x1d4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <run_manual+0x1d8>)
 800065c:	6013      	str	r3, [r2, #0]
				status1 = YELLOW_LED_AUTO;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <run_manual+0x1c8>)
 8000660:	220c      	movs	r2, #12
 8000662:	601a      	str	r2, [r3, #0]
				status2 = RED_LED_AUTO;
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <run_manual+0x1dc>)
 8000666:	220b      	movs	r2, #11
 8000668:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(up_button)==1){
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff fd6e 	bl	800014c <isButtonPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d111      	bne.n	800069a <run_manual+0x1a6>
				status1= RED_GREEN_MAN;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <run_manual+0x1c8>)
 8000678:	2215      	movs	r2, #21
 800067a:	601a      	str	r2, [r3, #0]
				count1 = 5*scale;
 800067c:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <run_manual+0x1cc>)
 800067e:	2232      	movs	r2, #50	@ 0x32
 8000680:	601a      	str	r2, [r3, #0]
				count2 = 1;
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <run_manual+0x1d8>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
			}
			break;
 8000688:	e007      	b.n	800069a <run_manual+0x1a6>

	}
	default:
		break;
 800068a:	bf00      	nop
 800068c:	e006      	b.n	800069c <run_manual+0x1a8>
		break;
 800068e:	bf00      	nop
 8000690:	e004      	b.n	800069c <run_manual+0x1a8>
		break;
 8000692:	bf00      	nop
 8000694:	e002      	b.n	800069c <run_manual+0x1a8>
		break;
 8000696:	bf00      	nop
 8000698:	e000      	b.n	800069c <run_manual+0x1a8>
			break;
 800069a:	bf00      	nop
	}
	if((status1/10)==2 && count1>0)count1--;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <run_manual+0x1c8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b14      	subs	r3, #20
 80006a2:	2b09      	cmp	r3, #9
 80006a4:	d808      	bhi.n	80006b8 <run_manual+0x1c4>
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <run_manual+0x1cc>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd04      	ble.n	80006b8 <run_manual+0x1c4>
 80006ae:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <run_manual+0x1cc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	4a02      	ldr	r2, [pc, #8]	@ (80006c0 <run_manual+0x1cc>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000cc 	.word	0x200000cc
 80006c0:	200000d4 	.word	0x200000d4
 80006c4:	20000064 	.word	0x20000064
 80006c8:	2000006c 	.word	0x2000006c
 80006cc:	200000d8 	.word	0x200000d8
 80006d0:	200000d0 	.word	0x200000d0
 80006d4:	20000068 	.word	0x20000068

080006d8 <run_setting>:

int tmp_red=0;
int tmp_yellow=0;
int tmp_green=0;

void run_setting(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if ((status1/10)!=3){
 80006dc:	4b8b      	ldr	r3, [pc, #556]	@ (800090c <run_setting+0x234>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3b1e      	subs	r3, #30
 80006e2:	2b09      	cmp	r3, #9
 80006e4:	d919      	bls.n	800071a <run_setting+0x42>
		if(isButtonLongPressed(set_button)){
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fd4a 	bl	8000180 <isButtonLongPressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d013      	beq.n	800071a <run_setting+0x42>
			count3=1*scale;
 80006f2:	4b87      	ldr	r3, [pc, #540]	@ (8000910 <run_setting+0x238>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	601a      	str	r2, [r3, #0]
			status1 = RED_LED_SET;
 80006f8:	4b84      	ldr	r3, [pc, #528]	@ (800090c <run_setting+0x234>)
 80006fa:	221f      	movs	r2, #31
 80006fc:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_SET;
 80006fe:	4b85      	ldr	r3, [pc, #532]	@ (8000914 <run_setting+0x23c>)
 8000700:	221f      	movs	r2, #31
 8000702:	601a      	str	r2, [r3, #0]
			count1 = 2; //Mode
 8000704:	4b84      	ldr	r3, [pc, #528]	@ (8000918 <run_setting+0x240>)
 8000706:	2202      	movs	r2, #2
 8000708:	601a      	str	r2, [r3, #0]
			count2 = time_red; //Value
 800070a:	4b84      	ldr	r3, [pc, #528]	@ (800091c <run_setting+0x244>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a84      	ldr	r2, [pc, #528]	@ (8000920 <run_setting+0x248>)
 8000710:	6013      	str	r3, [r2, #0]
			ResetLight1();
 8000712:	f000 f913 	bl	800093c <ResetLight1>
			ResetLight2();
 8000716:	f000 f927 	bl	8000968 <ResetLight2>
		}
	}
	switch (status1){
 800071a:	4b7c      	ldr	r3, [pc, #496]	@ (800090c <run_setting+0x234>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b21      	cmp	r3, #33	@ 0x21
 8000720:	f000 8089 	beq.w	8000836 <run_setting+0x15e>
 8000724:	2b21      	cmp	r3, #33	@ 0x21
 8000726:	f300 80d9 	bgt.w	80008dc <run_setting+0x204>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	d002      	beq.n	8000734 <run_setting+0x5c>
 800072e:	2b20      	cmp	r3, #32
 8000730:	d041      	beq.n	80007b6 <run_setting+0xde>
			tmp_green = count2;
		}
		break;
	}
	default:
			break;
 8000732:	e0d3      	b.n	80008dc <run_setting+0x204>
		if(count3==0){
 8000734:	4b76      	ldr	r3, [pc, #472]	@ (8000910 <run_setting+0x238>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10a      	bne.n	8000752 <run_setting+0x7a>
			count3=1*scale;
 800073c:	4b74      	ldr	r3, [pc, #464]	@ (8000910 <run_setting+0x238>)
 800073e:	220a      	movs	r2, #10
 8000740:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_RED_1);
 8000742:	2102      	movs	r1, #2
 8000744:	4877      	ldr	r0, [pc, #476]	@ (8000924 <run_setting+0x24c>)
 8000746:	f001 f8d0 	bl	80018ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_2);
 800074a:	2110      	movs	r1, #16
 800074c:	4875      	ldr	r0, [pc, #468]	@ (8000924 <run_setting+0x24c>)
 800074e:	f001 f8cc 	bl	80018ea <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fd14 	bl	8000180 <isButtonLongPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d10d      	bne.n	800077a <run_setting+0xa2>
			status1 = YELLOW_LED_SET;
 800075e:	4b6b      	ldr	r3, [pc, #428]	@ (800090c <run_setting+0x234>)
 8000760:	2220      	movs	r2, #32
 8000762:	601a      	str	r2, [r3, #0]
			count1 = 3;
 8000764:	4b6c      	ldr	r3, [pc, #432]	@ (8000918 <run_setting+0x240>)
 8000766:	2203      	movs	r2, #3
 8000768:	601a      	str	r2, [r3, #0]
			count2 = time_yellow;
 800076a:	4b6f      	ldr	r3, [pc, #444]	@ (8000928 <run_setting+0x250>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a6c      	ldr	r2, [pc, #432]	@ (8000920 <run_setting+0x248>)
 8000770:	6013      	str	r3, [r2, #0]
			ResetLight1();
 8000772:	f000 f8e3 	bl	800093c <ResetLight1>
			ResetLight2();
 8000776:	f000 f8f7 	bl	8000968 <ResetLight2>
		if(isButtonPressed(up_button)==1){
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff fce6 	bl	800014c <isButtonPressed>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10b      	bne.n	800079e <run_setting+0xc6>
			count2++;
 8000786:	4b66      	ldr	r3, [pc, #408]	@ (8000920 <run_setting+0x248>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a64      	ldr	r2, [pc, #400]	@ (8000920 <run_setting+0x248>)
 800078e:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 8000790:	4b63      	ldr	r3, [pc, #396]	@ (8000920 <run_setting+0x248>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b63      	cmp	r3, #99	@ 0x63
 8000796:	dd02      	ble.n	800079e <run_setting+0xc6>
 8000798:	4b61      	ldr	r3, [pc, #388]	@ (8000920 <run_setting+0x248>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fcd4 	bl	800014c <isButtonPressed>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	f040 809a 	bne.w	80008e0 <run_setting+0x208>
			tmp_red = count2;
 80007ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000920 <run_setting+0x248>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a5e      	ldr	r2, [pc, #376]	@ (800092c <run_setting+0x254>)
 80007b2:	6013      	str	r3, [r2, #0]
		break;
 80007b4:	e094      	b.n	80008e0 <run_setting+0x208>
		if(count3==0){
 80007b6:	4b56      	ldr	r3, [pc, #344]	@ (8000910 <run_setting+0x238>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10a      	bne.n	80007d4 <run_setting+0xfc>
			count3=1*scale;
 80007be:	4b54      	ldr	r3, [pc, #336]	@ (8000910 <run_setting+0x238>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1);
 80007c4:	2104      	movs	r1, #4
 80007c6:	4857      	ldr	r0, [pc, #348]	@ (8000924 <run_setting+0x24c>)
 80007c8:	f001 f88f 	bl	80018ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2);
 80007cc:	2120      	movs	r1, #32
 80007ce:	4855      	ldr	r0, [pc, #340]	@ (8000924 <run_setting+0x24c>)
 80007d0:	f001 f88b 	bl	80018ea <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fcd3 	bl	8000180 <isButtonLongPressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d10d      	bne.n	80007fc <run_setting+0x124>
			status1 = GREEN_LED_SET;
 80007e0:	4b4a      	ldr	r3, [pc, #296]	@ (800090c <run_setting+0x234>)
 80007e2:	2221      	movs	r2, #33	@ 0x21
 80007e4:	601a      	str	r2, [r3, #0]
			count1 = 4;
 80007e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000918 <run_setting+0x240>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	601a      	str	r2, [r3, #0]
			count2 = time_green;
 80007ec:	4b50      	ldr	r3, [pc, #320]	@ (8000930 <run_setting+0x258>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a4b      	ldr	r2, [pc, #300]	@ (8000920 <run_setting+0x248>)
 80007f2:	6013      	str	r3, [r2, #0]
			ResetLight1();
 80007f4:	f000 f8a2 	bl	800093c <ResetLight1>
			ResetLight2();
 80007f8:	f000 f8b6 	bl	8000968 <ResetLight2>
		if(isButtonPressed(up_button)==1){
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fca5 	bl	800014c <isButtonPressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10b      	bne.n	8000820 <run_setting+0x148>
			count2++;
 8000808:	4b45      	ldr	r3, [pc, #276]	@ (8000920 <run_setting+0x248>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a44      	ldr	r2, [pc, #272]	@ (8000920 <run_setting+0x248>)
 8000810:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <run_setting+0x248>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b63      	cmp	r3, #99	@ 0x63
 8000818:	dd02      	ble.n	8000820 <run_setting+0x148>
 800081a:	4b41      	ldr	r3, [pc, #260]	@ (8000920 <run_setting+0x248>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fc93 	bl	800014c <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d15b      	bne.n	80008e4 <run_setting+0x20c>
			tmp_yellow = count2;
 800082c:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <run_setting+0x248>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a40      	ldr	r2, [pc, #256]	@ (8000934 <run_setting+0x25c>)
 8000832:	6013      	str	r3, [r2, #0]
		break;
 8000834:	e056      	b.n	80008e4 <run_setting+0x20c>
		if(count3==0){
 8000836:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <run_setting+0x238>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10a      	bne.n	8000854 <run_setting+0x17c>
			count3=1*scale;
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <run_setting+0x238>)
 8000840:	220a      	movs	r2, #10
 8000842:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1);
 8000844:	2108      	movs	r1, #8
 8000846:	4837      	ldr	r0, [pc, #220]	@ (8000924 <run_setting+0x24c>)
 8000848:	f001 f84f 	bl	80018ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2);
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	4835      	ldr	r0, [pc, #212]	@ (8000924 <run_setting+0x24c>)
 8000850:	f001 f84b 	bl	80018ea <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fc93 	bl	8000180 <isButtonLongPressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d120      	bne.n	80008a2 <run_setting+0x1ca>
			if(tmp_red == tmp_green + tmp_yellow){
 8000860:	4b35      	ldr	r3, [pc, #212]	@ (8000938 <run_setting+0x260>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <run_setting+0x25c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	441a      	add	r2, r3
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <run_setting+0x254>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d10b      	bne.n	800088a <run_setting+0x1b2>
				time_red=tmp_red;
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <run_setting+0x254>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a29      	ldr	r2, [pc, #164]	@ (800091c <run_setting+0x244>)
 8000878:	6013      	str	r3, [r2, #0]
				time_yellow=tmp_yellow;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <run_setting+0x25c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <run_setting+0x250>)
 8000880:	6013      	str	r3, [r2, #0]
				time_green=tmp_green;
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <run_setting+0x260>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <run_setting+0x258>)
 8000888:	6013      	str	r3, [r2, #0]
			status1 = INIT;
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <run_setting+0x234>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 8000890:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <run_setting+0x23c>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
			count1 = 0;
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <run_setting+0x240>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
			count2 = 0;
 800089c:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <run_setting+0x248>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(up_button)==1 ){
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fc52 	bl	800014c <isButtonPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d10b      	bne.n	80008c6 <run_setting+0x1ee>
			count2++;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <run_setting+0x248>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <run_setting+0x248>)
 80008b6:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <run_setting+0x248>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b63      	cmp	r3, #99	@ 0x63
 80008be:	dd02      	ble.n	80008c6 <run_setting+0x1ee>
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <run_setting+0x248>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fc40 	bl	800014c <isButtonPressed>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10a      	bne.n	80008e8 <run_setting+0x210>
			tmp_green = count2;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <run_setting+0x248>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <run_setting+0x260>)
 80008d8:	6013      	str	r3, [r2, #0]
		break;
 80008da:	e005      	b.n	80008e8 <run_setting+0x210>
			break;
 80008dc:	bf00      	nop
 80008de:	e004      	b.n	80008ea <run_setting+0x212>
		break;
 80008e0:	bf00      	nop
 80008e2:	e002      	b.n	80008ea <run_setting+0x212>
		break;
 80008e4:	bf00      	nop
 80008e6:	e000      	b.n	80008ea <run_setting+0x212>
		break;
 80008e8:	bf00      	nop
	}
	if((status1/10)==3 && count3>0)count3--;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <run_setting+0x234>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3b1e      	subs	r3, #30
 80008f0:	2b09      	cmp	r3, #9
 80008f2:	d808      	bhi.n	8000906 <run_setting+0x22e>
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <run_setting+0x238>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dd04      	ble.n	8000906 <run_setting+0x22e>
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <run_setting+0x238>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	4a03      	ldr	r2, [pc, #12]	@ (8000910 <run_setting+0x238>)
 8000904:	6013      	str	r3, [r2, #0]

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000cc 	.word	0x200000cc
 8000910:	200000dc 	.word	0x200000dc
 8000914:	200000d0 	.word	0x200000d0
 8000918:	200000d4 	.word	0x200000d4
 800091c:	20000064 	.word	0x20000064
 8000920:	200000d8 	.word	0x200000d8
 8000924:	40010800 	.word	0x40010800
 8000928:	20000068 	.word	0x20000068
 800092c:	200000c0 	.word	0x200000c0
 8000930:	2000006c 	.word	0x2000006c
 8000934:	200000c4 	.word	0x200000c4
 8000938:	200000c8 	.word	0x200000c8

0800093c <ResetLight1>:

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

void ResetLight1(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2102      	movs	r1, #2
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <ResetLight1+0x28>)
 8000946:	f000 ffb8 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2104      	movs	r1, #4
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <ResetLight1+0x28>)
 8000950:	f000 ffb3 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2108      	movs	r1, #8
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <ResetLight1+0x28>)
 800095a:	f000 ffae 	bl	80018ba <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010800 	.word	0x40010800

08000968 <ResetLight2>:

void ResetLight2(){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4807      	ldr	r0, [pc, #28]	@ (8000990 <ResetLight2+0x28>)
 8000972:	f000 ffa2 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 ,  RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <ResetLight2+0x28>)
 800097c:	f000 ff9d 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <ResetLight2+0x28>)
 8000986:	f000 ff98 	bl	80018ba <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800

08000994 <RedLight1>:
void RedLight1(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2102      	movs	r1, #2
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <RedLight1+0x28>)
 800099e:	f000 ff8c 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <RedLight1+0x28>)
 80009a8:	f000 ff87 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <RedLight1+0x28>)
 80009b2:	f000 ff82 	bl	80018ba <HAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800

080009c0 <YellowLight1>:
void YellowLight1(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2102      	movs	r1, #2
 80009c8:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <YellowLight1+0x28>)
 80009ca:	f000 ff76 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2104      	movs	r1, #4
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <YellowLight1+0x28>)
 80009d4:	f000 ff71 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2108      	movs	r1, #8
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <YellowLight1+0x28>)
 80009de:	f000 ff6c 	bl	80018ba <HAL_GPIO_WritePin>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010800 	.word	0x40010800

080009ec <GreenLight1>:
void GreenLight1(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2102      	movs	r1, #2
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <GreenLight1+0x28>)
 80009f6:	f000 ff60 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2104      	movs	r1, #4
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <GreenLight1+0x28>)
 8000a00:	f000 ff5b 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <GreenLight1+0x28>)
 8000a0a:	f000 ff56 	bl	80018ba <HAL_GPIO_WritePin>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800

08000a18 <RedLight2>:
void RedLight2(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2110      	movs	r1, #16
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <RedLight2+0x28>)
 8000a22:	f000 ff4a 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <RedLight2+0x28>)
 8000a2c:	f000 ff45 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	@ 0x40
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <RedLight2+0x28>)
 8000a36:	f000 ff40 	bl	80018ba <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010800 	.word	0x40010800

08000a44 <YellowLight2>:
void YellowLight2(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <YellowLight2+0x28>)
 8000a4e:	f000 ff34 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2120      	movs	r1, #32
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <YellowLight2+0x28>)
 8000a58:	f000 ff2f 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	@ 0x40
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <YellowLight2+0x28>)
 8000a62:	f000 ff2a 	bl	80018ba <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010800 	.word	0x40010800

08000a70 <GreenLight2>:
void GreenLight2(){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <GreenLight2+0x28>)
 8000a7a:	f000 ff1e 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2120      	movs	r1, #32
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <GreenLight2+0x28>)
 8000a84:	f000 ff19 	bl	80018ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <GreenLight2+0x28>)
 8000a8e:	f000 ff14 	bl	80018ba <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010800 	.word	0x40010800

08000a9c <Run_Traffic_Light>:

void BlinkLed(){
	HAL_GPIO_TogglePin(GPIOA, LED_PINK);
}

void Run_Traffic_Light(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	run_setting();
 8000aa0:	f7ff fe1a 	bl	80006d8 <run_setting>
	run_manual();
 8000aa4:	f7ff fd26 	bl	80004f4 <run_manual>
	run_automatic();
 8000aa8:	f7ff fc20 	bl	80002ec <run_automatic>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 fbfe 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f81e 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f000 f8d6 	bl	8000c6c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ac0:	f000 f888 	bl	8000bd4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ac4:	f000 f858 	bl	8000b78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <main+0x3c>)
 8000aca:	f001 fcb7 	bl	800243c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 8000ace:	f000 f927 	bl	8000d20 <SCH_Init>
  //SCH_Add_Task(BlinkLed, 0 , 1000);
  //SCH_Add_Task(BlinkLed2, 0 , 2000);
  SCH_Add_Task(Run_Traffic_Light,0,100);
 8000ad2:	2264      	movs	r2, #100	@ 0x64
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <main+0x40>)
 8000ad8:	f000 f9ac 	bl	8000e34 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0 , 10);
 8000adc:	220a      	movs	r2, #10
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <main+0x44>)
 8000ae2:	f000 f9a7 	bl	8000e34 <SCH_Add_Task>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task() ;
 8000ae6:	f000 fa53 	bl	8000f90 <SCH_Dispatch_Task>
 8000aea:	e7fc      	b.n	8000ae6 <main+0x36>
 8000aec:	20000134 	.word	0x20000134
 8000af0:	08000a9d 	.word	0x08000a9d
 8000af4:	080001b5 	.word	0x080001b5

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	@ 0x40
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2228      	movs	r2, #40	@ 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f824 	bl	8002b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	2310      	movs	r3, #16
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f834 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000b42:	f000 f8e7 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 faa1 	bl	80020a8 <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b6c:	f000 f8d2 	bl	8000d14 <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3740      	adds	r7, #64	@ 0x40
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000b7e:	4a13      	ldr	r2, [pc, #76]	@ (8000bcc <MX_I2C1_Init+0x54>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000b84:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <MX_I2C1_Init+0x58>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000b96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <MX_I2C1_Init+0x50>)
 8000bb6:	f000 feb1 	bl	800191c <HAL_I2C_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f000 f8a8 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000e0 	.word	0x200000e0
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	000186a0 	.word	0x000186a0

08000bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000bfa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c08:	2209      	movs	r2, #9
 8000c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c18:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c1a:	f001 fbbf 	bl	800239c <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c24:	f000 f876 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c36:	f001 fd3d 	bl	80026b4 <HAL_TIM_ConfigClockSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c40:	f000 f868 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_TIM2_Init+0x94>)
 8000c52:	f001 ff15 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f85a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000134 	.word	0x20000134

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <MX_GPIO_Init+0x8c>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <MX_GPIO_Init+0x8c>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_GPIO_Init+0x8c>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <MX_GPIO_Init+0x8c>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a16      	ldr	r2, [pc, #88]	@ (8000cf8 <MX_GPIO_Init+0x8c>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_GPIO_Init+0x8c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	21fe      	movs	r1, #254	@ 0xfe
 8000cb4:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <MX_GPIO_Init+0x90>)
 8000cb6:	f000 fe00 	bl	80018ba <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000cba:	23fe      	movs	r3, #254	@ 0xfe
 8000cbc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480a      	ldr	r0, [pc, #40]	@ (8000cfc <MX_GPIO_Init+0x90>)
 8000cd2:	f000 fc5f 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0x90>)
 8000cec:	f000 fc52 	bl	8001594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	//timer_run();
	SCH_Update();
 8000d08:	f000 f824 	bl	8000d54 <SCH_Update>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <SCH_Init>:
uint8_t Error_code_G ;
uint8_t Error_port ;
uint8_t Last_error_code_G;
uint32_t Error_tick_count_G;

void SCH_Init(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e006      	b.n	8000d3a <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f8e6 	bl	8000f00 <SCH_Delete_Task>
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	3301      	adds	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b27      	cmp	r3, #39	@ 0x27
 8000d3e:	d9f5      	bls.n	8000d2c <SCH_Init+0xc>
	}
	 // Reset the global error variable
	 // − SCH_Delete_Task() will generate an error code,
	 // (because the task array is empty)
	 Error_code_G= 0;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <SCH_Init+0x30>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	 //Timer_init();
	 //MX_IWDG_Init(); //Watchdog init
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000049c 	.word	0x2000049c

08000d54 <SCH_Update>:

void SCH_Update(void){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
	uint32_t Index;
	  //NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	e05d      	b.n	8000e1c <SCH_Update+0xc8>
	  // Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask){
 8000d60:	4933      	ldr	r1, [pc, #204]	@ (8000e30 <SCH_Update+0xdc>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d050      	beq.n	8000e16 <SCH_Update+0xc2>
			if (SCH_tasks_G[Index].Delay == 0) {
 8000d74:	492e      	ldr	r1, [pc, #184]	@ (8000e30 <SCH_Update+0xdc>)
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d132      	bne.n	8000df0 <SCH_Update+0x9c>
				  // The task is due to run
				  // Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe+= 1;
 8000d8a:	4929      	ldr	r1, [pc, #164]	@ (8000e30 <SCH_Update+0xdc>)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	330c      	adds	r3, #12
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2d8      	uxtb	r0, r3
 8000da0:	4923      	ldr	r1, [pc, #140]	@ (8000e30 <SCH_Update+0xdc>)
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	330c      	adds	r3, #12
 8000db0:	4602      	mov	r2, r0
 8000db2:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 8000db4:	491e      	ldr	r1, [pc, #120]	@ (8000e30 <SCH_Update+0xdc>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d025      	beq.n	8000e16 <SCH_Update+0xc2>
					  // Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000dca:	4919      	ldr	r1, [pc, #100]	@ (8000e30 <SCH_Update+0xdc>)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3308      	adds	r3, #8
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <SCH_Update+0xdc>)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4403      	add	r3, r0
 8000dea:	3304      	adds	r3, #4
 8000dec:	6019      	str	r1, [r3, #0]
 8000dee:	e012      	b.n	8000e16 <SCH_Update+0xc2>
				}
			} else {
				  // Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay --;
 8000df0:	490f      	ldr	r1, [pc, #60]	@ (8000e30 <SCH_Update+0xdc>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1e59      	subs	r1, r3, #1
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <SCH_Update+0xdc>)
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4403      	add	r3, r0
 8000e12:	3304      	adds	r3, #4
 8000e14:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b27      	cmp	r3, #39	@ 0x27
 8000e20:	d99e      	bls.n	8000d60 <SCH_Update+0xc>
			}
		}
	}
	//Watchdog_Refresh();
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000017c 	.word	0x2000017c

08000e34 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
	// First find a gap in the array (if there is one)
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8000e44:	e002      	b.n	8000e4c <SCH_Add_Task+0x18>
 	 {
	 	 Index++;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8000e4c:	4929      	ldr	r1, [pc, #164]	@ (8000ef4 <SCH_Add_Task+0xc0>)
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <SCH_Add_Task+0x32>
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2b27      	cmp	r3, #39	@ 0x27
 8000e64:	d9ef      	bls.n	8000e46 <SCH_Add_Task+0x12>
 	 }
 // Havewe reached the end of the list?
 if (Index ==SCH_MAX_TASKS){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b28      	cmp	r3, #40	@ 0x28
 8000e6a:	d104      	bne.n	8000e76 <SCH_Add_Task+0x42>
 // Task list is full
 // Set the global error variable
 Error_code_G=ERROR_SCH_TOO_MANY_TASKS;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <SCH_Add_Task+0xc4>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
  // Also return an error code
 return SCH_MAX_TASKS;
 8000e72:	2328      	movs	r3, #40	@ 0x28
 8000e74:	e039      	b.n	8000eea <SCH_Add_Task+0xb6>
 }
 // If we’re here, there is a space in the task array
 SCH_tasks_G[Index].pTask = pFunction;
 8000e76:	491f      	ldr	r1, [pc, #124]	@ (8000ef4 <SCH_Add_Task+0xc0>)
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	601a      	str	r2, [r3, #0]
 SCH_tasks_G[Index].Delay = DELAY / TICK;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <SCH_Add_Task+0xc8>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	08d9      	lsrs	r1, r3, #3
 8000e92:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <SCH_Add_Task+0xc0>)
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4403      	add	r3, r0
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].Period = PERIOD / TICK;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <SCH_Add_Task+0xc8>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	08d9      	lsrs	r1, r3, #3
 8000eae:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <SCH_Add_Task+0xc0>)
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4403      	add	r3, r0
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].RunMe = 0;
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <SCH_Add_Task+0xc0>)
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	330c      	adds	r3, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
 SCH_tasks_G[Index].TaskID = Index;
 8000ed4:	4907      	ldr	r1, [pc, #28]	@ (8000ef4 <SCH_Add_Task+0xc0>)
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	601a      	str	r2, [r3, #0]
 // return position of task (to allow later deletion)
 return Index;
 8000ee8:	697b      	ldr	r3, [r7, #20]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	2000017c 	.word	0x2000017c
 8000ef8:	2000049c 	.word	0x2000049c
 8000efc:	cccccccd 	.word	0xcccccccd

08000f00 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8000f08:	491f      	ldr	r1, [pc, #124]	@ (8000f88 <SCH_Delete_Task+0x88>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d105      	bne.n	8000f28 <SCH_Delete_Task+0x28>
	 // No task at this location ...
	 // Set the global error variable
	 Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <SCH_Delete_Task+0x8c>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	701a      	strb	r2, [r3, #0]
	 // ... also return an error code
	 Return_code = RETURN_ERROR;
 8000f22:	23ff      	movs	r3, #255	@ 0xff
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e001      	b.n	8000f2c <SCH_Delete_Task+0x2c>
	 } else {
	 Return_code = RETURN_NORMAL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	 }
	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000f2c:	4916      	ldr	r1, [pc, #88]	@ (8000f88 <SCH_Delete_Task+0x88>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 8000f3e:	4912      	ldr	r1, [pc, #72]	@ (8000f88 <SCH_Delete_Task+0x88>)
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <SCH_Delete_Task+0x88>)
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3308      	adds	r3, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8000f66:	4908      	ldr	r1, [pc, #32]	@ (8000f88 <SCH_Delete_Task+0x88>)
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	330c      	adds	r3, #12
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	 return Return_code; // return status
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000017c 	.word	0x2000017c
 8000f8c:	2000049c 	.word	0x2000049c

08000f90 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	// Dispatches (runs) the next task (if one is ready)
	uint8_t Index;
	 // Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	e039      	b.n	8001010 <SCH_Dispatch_Task+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4921      	ldr	r1, [pc, #132]	@ (8001024 <SCH_Dispatch_Task+0x94>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	330c      	adds	r3, #12
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02b      	beq.n	800100a <SCH_Dispatch_Task+0x7a>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	491b      	ldr	r1, [pc, #108]	@ (8001024 <SCH_Dispatch_Task+0x94>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 8000fc4:	79fa      	ldrb	r2, [r7, #7]
 8000fc6:	4917      	ldr	r1, [pc, #92]	@ (8001024 <SCH_Dispatch_Task+0x94>)
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	4912      	ldr	r1, [pc, #72]	@ (8001024 <SCH_Dispatch_Task+0x94>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	330c      	adds	r3, #12
 8000fe8:	4602      	mov	r2, r0
 8000fea:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0){
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <SCH_Dispatch_Task+0x94>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <SCH_Dispatch_Task+0x7a>
				SCH_Delete_Task(Index);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff7b 	bl	8000f00 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3301      	adds	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b27      	cmp	r3, #39	@ 0x27
 8001014:	d9c2      	bls.n	8000f9c <SCH_Dispatch_Task+0xc>
			}
		}
	}
	// Report system status
	SCH_Report_Status();
 8001016:	f000 f807 	bl	8001028 <SCH_Report_Status>
	// The scheduler enters idlemode at this point
	//SCH_Go_To_Sleep();
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000017c 	.word	0x2000017c

08001028 <SCH_Report_Status>:

void SCH_Go_To_Sleep(){}

void SCH_Report_Status(void) {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
#ifdef SCH_REPORT_ERRORS
	//ONLYAPPLIES IFWEAREREPORTINGERRORS
	// Check for answer error code
	if (Error_code_G != Last_error_code_G) {
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <SCH_Report_Status+0x68>)
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <SCH_Report_Status+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d016      	beq.n	8001066 <SCH_Report_Status+0x3e>
		// Negative logic onLEDs assumed
		Error_port = 255 - Error_code_G;
 8001038:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <SCH_Report_Status+0x68>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	43db      	mvns	r3, r3
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <SCH_Report_Status+0x70>)
 8001042:	701a      	strb	r2, [r3, #0]
		Last_error_code_G = Error_code_G;
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <SCH_Report_Status+0x68>)
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <SCH_Report_Status+0x6c>)
 800104a:	701a      	strb	r2, [r3, #0]
		if (Error_code_G != 0){
 800104c:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <SCH_Report_Status+0x68>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <SCH_Report_Status+0x36>
			Error_tick_count_G= 60000;
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <SCH_Report_Status+0x74>)
 8001056:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800105a:	601a      	str	r2, [r3, #0]
				Error_code_G= 0; // Reset error code
			}
		}
	}
#endif
}
 800105c:	e013      	b.n	8001086 <SCH_Report_Status+0x5e>
			Error_tick_count_G= 0;
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <SCH_Report_Status+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	e00f      	b.n	8001086 <SCH_Report_Status+0x5e>
		if (Error_tick_count_G != 0){
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <SCH_Report_Status+0x74>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <SCH_Report_Status+0x5e>
			if (--Error_tick_count_G== 0) {
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <SCH_Report_Status+0x74>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <SCH_Report_Status+0x74>)
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <SCH_Report_Status+0x74>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <SCH_Report_Status+0x5e>
				Error_code_G= 0; // Reset error code
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <SCH_Report_Status+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000049c 	.word	0x2000049c
 8001094:	2000049e 	.word	0x2000049e
 8001098:	2000049d 	.word	0x2000049d
 800109c:	200004a0 	.word	0x200004a0

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_MspInit+0x5c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <HAL_MspInit+0x5c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_MspInit+0x5c>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_MspInit+0x5c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_MspInit+0x5c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_MspInit+0x5c>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_MspInit+0x60>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_MspInit+0x60>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000

08001104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <HAL_I2C_MspInit+0x94>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d134      	bne.n	800118e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_I2C_MspInit+0x98>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <HAL_I2C_MspInit+0x98>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_I2C_MspInit+0x98>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001142:	2312      	movs	r3, #18
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4812      	ldr	r0, [pc, #72]	@ (80011a0 <HAL_I2C_MspInit+0x9c>)
 8001156:	f000 fa1d 	bl	8001594 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_I2C_MspInit+0xa0>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <HAL_I2C_MspInit+0xa0>)
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <HAL_I2C_MspInit+0x98>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a08      	ldr	r2, [pc, #32]	@ (800119c <HAL_I2C_MspInit+0x98>)
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_I2C_MspInit+0x98>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	40010000 	.word	0x40010000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b8:	d113      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	201c      	movs	r0, #28
 80011d8:	f000 f9a5 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 f9be 	bl	800155e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f87e 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <TIM2_IRQHandler+0x10>)
 800124e:	f001 f941 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000134 	.word	0x20000134

0800125c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001268:	f7ff fff8 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800126e:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001284:	4c09      	ldr	r4, [pc, #36]	@ (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f001 fc67 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff fc0b 	bl	8000ab0 <main>
  bx lr
 800129a:	4770      	bx	lr
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80012a4:	08002bf8 	.word	0x08002bf8
  ldr r2, =_sbss
 80012a8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012ac:	200004a8 	.word	0x200004a8

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_Init+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_Init+0x28>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f923 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fee6 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f93b 	bl	800157a <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f903 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000070 	.word	0x20000070
 8001338:	20000078 	.word	0x20000078
 800133c:	20000074 	.word	0x20000074

08001340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_IncTick+0x1c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_IncTick+0x20>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a03      	ldr	r2, [pc, #12]	@ (8001360 <HAL_IncTick+0x20>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000078 	.word	0x20000078
 8001360:	200004a4 	.word	0x200004a4

08001364 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b02      	ldr	r3, [pc, #8]	@ (8001374 <HAL_GetTick+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	200004a4 	.word	0x200004a4

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4906      	ldr	r1, [pc, #24]	@ (8001410 <__NVIC_EnableIRQ+0x34>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff90 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff2d 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff42 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff35 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa2 	bl	80014cc <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e161      	b.n	800186c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a8:	2201      	movs	r2, #1
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8150 	bne.w	8001866 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a97      	ldr	r2, [pc, #604]	@ (8001828 <HAL_GPIO_Init+0x294>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d05e      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015d0:	4a95      	ldr	r2, [pc, #596]	@ (8001828 <HAL_GPIO_Init+0x294>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d875      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015d6:	4a95      	ldr	r2, [pc, #596]	@ (800182c <HAL_GPIO_Init+0x298>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d058      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015dc:	4a93      	ldr	r2, [pc, #588]	@ (800182c <HAL_GPIO_Init+0x298>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d86f      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015e2:	4a93      	ldr	r2, [pc, #588]	@ (8001830 <HAL_GPIO_Init+0x29c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d052      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015e8:	4a91      	ldr	r2, [pc, #580]	@ (8001830 <HAL_GPIO_Init+0x29c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d869      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015ee:	4a91      	ldr	r2, [pc, #580]	@ (8001834 <HAL_GPIO_Init+0x2a0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d04c      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015f4:	4a8f      	ldr	r2, [pc, #572]	@ (8001834 <HAL_GPIO_Init+0x2a0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d863      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015fa:	4a8f      	ldr	r2, [pc, #572]	@ (8001838 <HAL_GPIO_Init+0x2a4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d046      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 8001600:	4a8d      	ldr	r2, [pc, #564]	@ (8001838 <HAL_GPIO_Init+0x2a4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d85d      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d82a      	bhi.n	8001660 <HAL_GPIO_Init+0xcc>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d859      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 800160e:	a201      	add	r2, pc, #4	@ (adr r2, 8001614 <HAL_GPIO_Init+0x80>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	0800168f 	.word	0x0800168f
 8001618:	08001669 	.word	0x08001669
 800161c:	0800167b 	.word	0x0800167b
 8001620:	080016bd 	.word	0x080016bd
 8001624:	080016c3 	.word	0x080016c3
 8001628:	080016c3 	.word	0x080016c3
 800162c:	080016c3 	.word	0x080016c3
 8001630:	080016c3 	.word	0x080016c3
 8001634:	080016c3 	.word	0x080016c3
 8001638:	080016c3 	.word	0x080016c3
 800163c:	080016c3 	.word	0x080016c3
 8001640:	080016c3 	.word	0x080016c3
 8001644:	080016c3 	.word	0x080016c3
 8001648:	080016c3 	.word	0x080016c3
 800164c:	080016c3 	.word	0x080016c3
 8001650:	080016c3 	.word	0x080016c3
 8001654:	080016c3 	.word	0x080016c3
 8001658:	08001671 	.word	0x08001671
 800165c:	08001685 	.word	0x08001685
 8001660:	4a76      	ldr	r2, [pc, #472]	@ (800183c <HAL_GPIO_Init+0x2a8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e02c      	b.n	80016c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e029      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e024      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	3308      	adds	r3, #8
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e01f      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	330c      	adds	r3, #12
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e01a      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001696:	2304      	movs	r3, #4
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e013      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a4:	2308      	movs	r3, #8
 80016a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	611a      	str	r2, [r3, #16]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b0:	2308      	movs	r3, #8
 80016b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	615a      	str	r2, [r3, #20]
          break;
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          break;
 80016c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	@ 0xff
 80016c8:	d801      	bhi.n	80016ce <HAL_GPIO_Init+0x13a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_Init+0x13e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	@ 0xff
 80016d8:	d802      	bhi.n	80016e0 <HAL_GPIO_Init+0x14c>
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x152>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	3b08      	subs	r3, #8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a9 	beq.w	8001866 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001714:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_GPIO_Init+0x2ac>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a49      	ldr	r2, [pc, #292]	@ (8001840 <HAL_GPIO_Init+0x2ac>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <HAL_GPIO_Init+0x2ac>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172c:	4a45      	ldr	r2, [pc, #276]	@ (8001844 <HAL_GPIO_Init+0x2b0>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3d      	ldr	r2, [pc, #244]	@ (8001848 <HAL_GPIO_Init+0x2b4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00d      	beq.n	8001774 <HAL_GPIO_Init+0x1e0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3c      	ldr	r2, [pc, #240]	@ (800184c <HAL_GPIO_Init+0x2b8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x1dc>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3b      	ldr	r2, [pc, #236]	@ (8001850 <HAL_GPIO_Init+0x2bc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_GPIO_Init+0x1d8>
 8001768:	2302      	movs	r3, #2
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 800176c:	2303      	movs	r3, #3
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001774:	2300      	movs	r3, #0
 8001776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001786:	492f      	ldr	r1, [pc, #188]	@ (8001844 <HAL_GPIO_Init+0x2b0>)
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	492b      	ldr	r1, [pc, #172]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4927      	ldr	r1, [pc, #156]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4921      	ldr	r1, [pc, #132]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	491d      	ldr	r1, [pc, #116]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4917      	ldr	r1, [pc, #92]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	4913      	ldr	r1, [pc, #76]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 8001808:	4013      	ands	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01f      	beq.n	8001858 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	490d      	ldr	r1, [pc, #52]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e01f      	b.n	8001866 <HAL_GPIO_Init+0x2d2>
 8001826:	bf00      	nop
 8001828:	10320000 	.word	0x10320000
 800182c:	10310000 	.word	0x10310000
 8001830:	10220000 	.word	0x10220000
 8001834:	10210000 	.word	0x10210000
 8001838:	10120000 	.word	0x10120000
 800183c:	10110000 	.word	0x10110000
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000
 8001848:	40010800 	.word	0x40010800
 800184c:	40010c00 	.word	0x40010c00
 8001850:	40011000 	.word	0x40011000
 8001854:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_GPIO_Init+0x2f4>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4909      	ldr	r1, [pc, #36]	@ (8001888 <HAL_GPIO_Init+0x2f4>)
 8001862:	4013      	ands	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f ae96 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	372c      	adds	r7, #44	@ 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	4613      	mov	r3, r2
 80018c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ca:	787b      	ldrb	r3, [r7, #1]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	041a      	lsls	r2, r3, #16
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018fc:	887a      	ldrh	r2, [r7, #2]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	041a      	lsls	r2, r3, #16
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43d9      	mvns	r1, r3
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	400b      	ands	r3, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e12b      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fbde 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	@ 0x24
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800197e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001980:	f000 fcda 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a81      	ldr	r2, [pc, #516]	@ (8001b90 <HAL_I2C_Init+0x274>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d807      	bhi.n	80019a0 <HAL_I2C_Init+0x84>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a80      	ldr	r2, [pc, #512]	@ (8001b94 <HAL_I2C_Init+0x278>)
 8001994:	4293      	cmp	r3, r2
 8001996:	bf94      	ite	ls
 8001998:	2301      	movls	r3, #1
 800199a:	2300      	movhi	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e006      	b.n	80019ae <HAL_I2C_Init+0x92>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001b98 <HAL_I2C_Init+0x27c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0e7      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a78      	ldr	r2, [pc, #480]	@ (8001b9c <HAL_I2C_Init+0x280>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9b      	lsrs	r3, r3, #18
 80019c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b90 <HAL_I2C_Init+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d802      	bhi.n	80019f0 <HAL_I2C_Init+0xd4>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3301      	adds	r3, #1
 80019ee:	e009      	b.n	8001a04 <HAL_I2C_Init+0xe8>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a69      	ldr	r2, [pc, #420]	@ (8001ba0 <HAL_I2C_Init+0x284>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	3301      	adds	r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	495c      	ldr	r1, [pc, #368]	@ (8001b90 <HAL_I2C_Init+0x274>)
 8001a20:	428b      	cmp	r3, r1
 8001a22:	d819      	bhi.n	8001a58 <HAL_I2C_Init+0x13c>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e59      	subs	r1, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a38:	400b      	ands	r3, r1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_I2C_Init+0x138>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e59      	subs	r1, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a52:	e051      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e04f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_I2C_Init+0x168>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e012      	b.n	8001aaa <HAL_I2C_Init+0x18e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x196>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e022      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_I2C_Init+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1e58      	subs	r0, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad6:	e00f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	0099      	lsls	r1, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6911      	ldr	r1, [r2, #16]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68d2      	ldr	r2, [r2, #12]
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	000186a0 	.word	0x000186a0
 8001b94:	001e847f 	.word	0x001e847f
 8001b98:	003d08ff 	.word	0x003d08ff
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e272      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b92      	ldr	r3, [pc, #584]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
 8001bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b89      	ldr	r3, [pc, #548]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e24c      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x76>
 8001c0c:	4b80      	ldr	r3, [pc, #512]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7f      	ldr	r2, [pc, #508]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x98>
 8001c22:	4b7b      	ldr	r3, [pc, #492]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b78      	ldr	r3, [pc, #480]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a77      	ldr	r2, [pc, #476]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xbc>
 8001c46:	4b72      	ldr	r3, [pc, #456]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a71      	ldr	r2, [pc, #452]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6f      	ldr	r3, [pc, #444]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c60:	4b6b      	ldr	r3, [pc, #428]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6a      	ldr	r2, [pc, #424]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b68      	ldr	r3, [pc, #416]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a67      	ldr	r2, [pc, #412]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb70 	bl	8001364 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fb6c 	bl	8001364 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e200      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe4>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb5c 	bl	8001364 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb58 	bl	8001364 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1ec      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b53      	ldr	r3, [pc, #332]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x10c>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b4c      	ldr	r3, [pc, #304]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cea:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
 8001cf6:	4b46      	ldr	r3, [pc, #280]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b43      	ldr	r3, [pc, #268]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1c0      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4939      	ldr	r1, [pc, #228]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fb11 	bl	8001364 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fb0d 	bl	8001364 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1a1      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2d      	ldr	r3, [pc, #180]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b2a      	ldr	r3, [pc, #168]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4927      	ldr	r1, [pc, #156]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff faf0 	bl	8001364 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff faec 	bl	8001364 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e180      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d019      	beq.n	8001dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fad0 	bl	8001364 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff facc 	bl	8001364 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e160      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 faba 	bl	8002360 <RCC_Delay>
 8001dec:	e01c      	b.n	8001e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fab6 	bl	8001364 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfa:	e00f      	b.n	8001e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fab2 	bl	8001364 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d908      	bls.n	8001e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e146      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	42420000 	.word	0x42420000
 8001e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e9      	bne.n	8001dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a6 	beq.w	8001f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b88      	ldr	r3, [pc, #544]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a87      	ldr	r2, [pc, #540]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b85      	ldr	r3, [pc, #532]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b82      	ldr	r3, [pc, #520]	@ (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7e      	ldr	r2, [pc, #504]	@ (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fa73 	bl	8001364 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fa6f 	bl	8001364 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b64      	cmp	r3, #100	@ 0x64
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e103      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b75      	ldr	r3, [pc, #468]	@ (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x312>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a6e      	ldr	r2, [pc, #440]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x334>
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a69      	ldr	r2, [pc, #420]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b67      	ldr	r3, [pc, #412]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a66      	ldr	r2, [pc, #408]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x356>
 8001ee0:	4b61      	ldr	r3, [pc, #388]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a60      	ldr	r2, [pc, #384]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	4b5e      	ldr	r3, [pc, #376]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001efa:	4b5b      	ldr	r3, [pc, #364]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a5a      	ldr	r2, [pc, #360]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b58      	ldr	r3, [pc, #352]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a57      	ldr	r2, [pc, #348]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fa23 	bl	8001364 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fa1f 	bl	8001364 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0b1      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x37e>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fa0d 	bl	8001364 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fa09 	bl	8001364 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e09b      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b3c      	ldr	r3, [pc, #240]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d061      	beq.n	800205c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d146      	bne.n	800202e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f9dd 	bl	8001364 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff f9d9 	bl	8001364 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e06d      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4921      	ldr	r1, [pc, #132]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a19      	ldr	r1, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	491b      	ldr	r1, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff f9ad 	bl	8001364 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff f9a9 	bl	8001364 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e03d      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x46a>
 800202c:	e035      	b.n	800209a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff f996 	bl	8001364 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff f992 	bl	8001364 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e026      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x498>
 800205a:	e01e      	b.n	800209a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e019      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x500>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d0      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b67      	ldr	r3, [pc, #412]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4965      	ldr	r1, [pc, #404]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a58      	ldr	r2, [pc, #352]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800210e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a52      	ldr	r2, [pc, #328]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d040      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e073      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3d      	ldr	r3, [pc, #244]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b39      	ldr	r3, [pc, #228]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4936      	ldr	r1, [pc, #216]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7ff f8e4 	bl	8001364 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7ff f8e0 	bl	8001364 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e053      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d210      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	4922      	ldr	r1, [pc, #136]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	@ (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_ClockConfig+0x1cc>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f842 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08002bc4 	.word	0x08002bc4
 8002274:	20000070 	.word	0x20000070
 8002278:	20000074 	.word	0x20000074

0800227c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x94>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x30>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x36>
 80022aa:	e027      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	e027      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4a17      	ldr	r2, [pc, #92]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d010      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ca:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x94>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0c5b      	lsrs	r3, r3, #17
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	4a11      	ldr	r2, [pc, #68]	@ (800231c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x98>)
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	613b      	str	r3, [r7, #16]
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fe:	613b      	str	r3, [r7, #16]
      break;
 8002300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002302:	693b      	ldr	r3, [r7, #16]
}
 8002304:	4618      	mov	r0, r3
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	007a1200 	.word	0x007a1200
 8002318:	08002bdc 	.word	0x08002bdc
 800231c:	08002bec 	.word	0x08002bec
 8002320:	003d0900 	.word	0x003d0900

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b02      	ldr	r3, [pc, #8]	@ (8002334 <HAL_RCC_GetHCLKFreq+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000070 	.word	0x20000070

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff2 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4903      	ldr	r1, [pc, #12]	@ (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08002bd4 	.word	0x08002bd4

08002360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <RCC_Delay+0x34>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <RCC_Delay+0x38>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800237c:	bf00      	nop
  }
  while (Delay --);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	60fa      	str	r2, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <RCC_Delay+0x1c>
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000070 	.word	0x20000070
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e041      	b.n	8002432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fef0 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 fa56 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e035      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a16      	ldr	r2, [pc, #88]	@ (80024cc <HAL_TIM_Base_Start_IT+0x90>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x4e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800247e:	d004      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x4e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d010      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	e007      	b.n	80024be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400

080024d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d020      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0202 	mvn.w	r2, #2
 8002508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f998 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f98b 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f99a 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d020      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0204 	mvn.w	r2, #4
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f972 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f965 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f974 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0208 	mvn.w	r2, #8
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f94c 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f93f 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f94e 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0210 	mvn.w	r2, #16
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2208      	movs	r2, #8
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f926 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f919 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f928 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fb60 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa6f 	bl	8002b42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8f8 	bl	8002878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0220 	mvn.w	r2, #32
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa42 	bl	8002b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIM_ConfigClockSource+0x1c>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0b4      	b.n	800283a <HAL_TIM_ConfigClockSource+0x186>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002708:	d03e      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xd4>
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800270e:	f200 8087 	bhi.w	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002716:	f000 8086 	beq.w	8002826 <HAL_TIM_ConfigClockSource+0x172>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271e:	d87f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b70      	cmp	r3, #112	@ 0x70
 8002722:	d01a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0xa6>
 8002724:	2b70      	cmp	r3, #112	@ 0x70
 8002726:	d87b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b60      	cmp	r3, #96	@ 0x60
 800272a:	d050      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x11a>
 800272c:	2b60      	cmp	r3, #96	@ 0x60
 800272e:	d877      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b50      	cmp	r3, #80	@ 0x50
 8002732:	d03c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xfa>
 8002734:	2b50      	cmp	r3, #80	@ 0x50
 8002736:	d873      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d058      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x13a>
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d86f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b30      	cmp	r3, #48	@ 0x30
 8002742:	d064      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b30      	cmp	r3, #48	@ 0x30
 8002746:	d86b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d060      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d867      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b10      	cmp	r3, #16
 8002756:	d05a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	e062      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	f000 f96a 	bl	8002a42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800277c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	609a      	str	r2, [r3, #8]
      break;
 8002786:	e04f      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	f000 f953 	bl	8002a42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027aa:	609a      	str	r2, [r3, #8]
      break;
 80027ac:	e03c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8ca 	bl	8002954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2150      	movs	r1, #80	@ 0x50
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f921 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80027cc:	e02c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8e8 	bl	80029b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2160      	movs	r1, #96	@ 0x60
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f911 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80027ec:	e01c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f8aa 	bl	8002954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	@ 0x40
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f901 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800280c:	e00c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 f8f8 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800281e:	e003      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e000      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
	...

0800288c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a2b      	ldr	r2, [pc, #172]	@ (800294c <TIM_Base_SetConfig+0xc0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <TIM_Base_SetConfig+0x28>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028aa:	d003      	beq.n	80028b4 <TIM_Base_SetConfig+0x28>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a28      	ldr	r2, [pc, #160]	@ (8002950 <TIM_Base_SetConfig+0xc4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a20      	ldr	r2, [pc, #128]	@ (800294c <TIM_Base_SetConfig+0xc0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002950 <TIM_Base_SetConfig+0xc4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <TIM_Base_SetConfig+0xc0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d103      	bne.n	8002924 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f023 0201 	bic.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]
  }
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40000400 	.word	0x40000400

08002954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 030a 	bic.w	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0210 	bic.w	r2, r3, #16
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	031b      	lsls	r3, r3, #12
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	621a      	str	r2, [r3, #32]
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	021a      	lsls	r2, r3, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	609a      	str	r2, [r3, #8]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e041      	b.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10c      	bne.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400

08002b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <memset>:
 8002b54:	4603      	mov	r3, r0
 8002b56:	4402      	add	r2, r0
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <memset+0xa>
 8002b5c:	4770      	bx	lr
 8002b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b62:	e7f9      	b.n	8002b58 <memset+0x4>

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2600      	movs	r6, #0
 8002b68:	4d0c      	ldr	r5, [pc, #48]	@ (8002b9c <__libc_init_array+0x38>)
 8002b6a:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba0 <__libc_init_array+0x3c>)
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	f000 f81a 	bl	8002bac <_init>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4d0a      	ldr	r5, [pc, #40]	@ (8002ba4 <__libc_init_array+0x40>)
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba8 <__libc_init_array+0x44>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002bf0 	.word	0x08002bf0
 8002ba0:	08002bf0 	.word	0x08002bf0
 8002ba4:	08002bf0 	.word	0x08002bf0
 8002ba8:	08002bf4 	.word	0x08002bf4

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
