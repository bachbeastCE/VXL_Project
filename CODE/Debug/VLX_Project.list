
VLX_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004554  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004660  08004660  00005660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046fc  080046fc  000060d0  2**0
                  CONTENTS
  4 .ARM          00000008  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004704  08004704  000060d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0800470c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  200000d0  080047dc  000060d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  080047dc  00006700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc00  00000000  00000000  000060f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002728  00000000  00000000  00015cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00018428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca6  00000000  00000000  00019440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035dd  00000000  00000000  0001a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f7d  00000000  00000000  0001d6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aebd  00000000  00000000  00032640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd4fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  000bd540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c1d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004648 	.word	0x08004648

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08004648 	.word	0x08004648

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <isButtonPressed>:
int button_pressed[5] = {0, 0, 0, 0, 0};
int button_long_pressed[5] = {0, 0, 0, 0, 0};
int button_flag[5] = {0, 0, 0, 0, 0};

// Check if the button was pressed
int isButtonPressed(int button_index) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    if (button_pressed[button_index] == 1) {
 8000178:	4a09      	ldr	r2, [pc, #36]	@ (80001a0 <isButtonPressed+0x30>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000180:	2b01      	cmp	r3, #1
 8000182:	d106      	bne.n	8000192 <isButtonPressed+0x22>
        button_pressed[button_index] = 0;
 8000184:	4a06      	ldr	r2, [pc, #24]	@ (80001a0 <isButtonPressed+0x30>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2100      	movs	r1, #0
 800018a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800018e:	2301      	movs	r3, #1
 8000190:	e000      	b.n	8000194 <isButtonPressed+0x24>
    }
    return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	200000ec 	.word	0x200000ec

080001a4 <isButtonLongPressed>:

// Check if the button was long-pressed
int isButtonLongPressed(int button_index) {
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    if (button_long_pressed[button_index] == 1) {
 80001ac:	4a09      	ldr	r2, [pc, #36]	@ (80001d4 <isButtonLongPressed+0x30>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d106      	bne.n	80001c6 <isButtonLongPressed+0x22>
        button_long_pressed[button_index] = 0;
 80001b8:	4a06      	ldr	r2, [pc, #24]	@ (80001d4 <isButtonLongPressed+0x30>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2100      	movs	r1, #0
 80001be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 80001c2:	2301      	movs	r3, #1
 80001c4:	e000      	b.n	80001c8 <isButtonLongPressed+0x24>
    }
    return 0;
 80001c6:	2300      	movs	r3, #0
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000100 	.word	0x20000100

080001d8 <getKeyInput>:
    button_flag[button_index] = 1;
    // Add specific logic for short press or long press
}

// Detect button input and process short/long presses
void getKeyInput() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_BUTTON; i++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e07b      	b.n	80002dc <getKeyInput+0x104>
        KeyReg2[i] = KeyReg1[i];
 80001e4:	4a42      	ldr	r2, [pc, #264]	@ (80002f0 <getKeyInput+0x118>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4941      	ldr	r1, [pc, #260]	@ (80002f4 <getKeyInput+0x11c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg0[i];
 80001f4:	4a40      	ldr	r2, [pc, #256]	@ (80002f8 <getKeyInput+0x120>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	493c      	ldr	r1, [pc, #240]	@ (80002f0 <getKeyInput+0x118>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Replace MODIFY_BUTTON, MODE_BUTTON, etc., with the actual GPIO pins for your buttons
        KeyReg0[0] = HAL_GPIO_ReadPin(GPIOA, UP_BUTTON);
 8000204:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000208:	483c      	ldr	r0, [pc, #240]	@ (80002fc <getKeyInput+0x124>)
 800020a:	f001 fd8b 	bl	8001d24 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	4b39      	ldr	r3, [pc, #228]	@ (80002f8 <getKeyInput+0x120>)
 8000214:	601a      	str	r2, [r3, #0]
        KeyReg0[1] = HAL_GPIO_ReadPin(GPIOA, SET_BUTTON);
 8000216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800021a:	4838      	ldr	r0, [pc, #224]	@ (80002fc <getKeyInput+0x124>)
 800021c:	f001 fd82 	bl	8001d24 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	4b34      	ldr	r3, [pc, #208]	@ (80002f8 <getKeyInput+0x120>)
 8000226:	605a      	str	r2, [r3, #4]
        // Add more buttons as needed

        // Debounce logic
        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000228:	4a31      	ldr	r2, [pc, #196]	@ (80002f0 <getKeyInput+0x118>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4931      	ldr	r1, [pc, #196]	@ (80002f8 <getKeyInput+0x120>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d14c      	bne.n	80002d6 <getKeyInput+0xfe>
 800023c:	4a2c      	ldr	r2, [pc, #176]	@ (80002f0 <getKeyInput+0x118>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	492b      	ldr	r1, [pc, #172]	@ (80002f4 <getKeyInput+0x11c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d142      	bne.n	80002d6 <getKeyInput+0xfe>
            if (KeyReg2[i] != KeyReg3[i]) {
 8000250:	4a28      	ldr	r2, [pc, #160]	@ (80002f4 <getKeyInput+0x11c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4929      	ldr	r1, [pc, #164]	@ (8000300 <getKeyInput+0x128>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000260:	429a      	cmp	r2, r3
 8000262:	d018      	beq.n	8000296 <getKeyInput+0xbe>
                KeyReg3[i] = KeyReg2[i];
 8000264:	4a23      	ldr	r2, [pc, #140]	@ (80002f4 <getKeyInput+0x11c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	4924      	ldr	r1, [pc, #144]	@ (8000300 <getKeyInput+0x128>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // Button is pressed
                if (KeyReg3[i] == PRESSED_STATE) {
 8000274:	4a22      	ldr	r2, [pc, #136]	@ (8000300 <getKeyInput+0x128>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d12a      	bne.n	80002d6 <getKeyInput+0xfe>
                    TimeOutForKeyPress[i] = 100; // Reset long press timeout
 8000280:	4a20      	ldr	r2, [pc, #128]	@ (8000304 <getKeyInput+0x12c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2164      	movs	r1, #100	@ 0x64
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_pressed[i] = 1;       // Mark as a short press
 800028a:	4a1f      	ldr	r2, [pc, #124]	@ (8000308 <getKeyInput+0x130>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000294:	e01f      	b.n	80002d6 <getKeyInput+0xfe>
                }
            } else {
                // If button is still pressed, decrement timeout for long press
                if (KeyReg3[i] == PRESSED_STATE) {
 8000296:	4a1a      	ldr	r2, [pc, #104]	@ (8000300 <getKeyInput+0x128>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d119      	bne.n	80002d6 <getKeyInput+0xfe>
                    if (TimeOutForKeyPress[i] > 0) {
 80002a2:	4a18      	ldr	r2, [pc, #96]	@ (8000304 <getKeyInput+0x12c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	dd09      	ble.n	80002c2 <getKeyInput+0xea>
                        TimeOutForKeyPress[i]--;
 80002ae:	4a15      	ldr	r2, [pc, #84]	@ (8000304 <getKeyInput+0x12c>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	1e5a      	subs	r2, r3, #1
 80002b8:	4912      	ldr	r1, [pc, #72]	@ (8000304 <getKeyInput+0x12c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002c0:	e009      	b.n	80002d6 <getKeyInput+0xfe>
                    } else {
                        // Long press detected
                        button_long_pressed[i] = 1;
 80002c2:	4a12      	ldr	r2, [pc, #72]	@ (800030c <getKeyInput+0x134>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2101      	movs	r1, #1
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimeOutForKeyPress[i] = 100; // Reset timeout
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <getKeyInput+0x12c>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2164      	movs	r1, #100	@ 0x64
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_BUTTON; i++) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	2205      	movs	r2, #5
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	f6ff af7f 	blt.w	80001e4 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000014 	.word	0x20000014
 80002f4:	20000028 	.word	0x20000028
 80002f8:	20000000 	.word	0x20000000
 80002fc:	40010800 	.word	0x40010800
 8000300:	2000003c 	.word	0x2000003c
 8000304:	20000050 	.word	0x20000050
 8000308:	200000ec 	.word	0x200000ec
 800030c:	20000100 	.word	0x20000100

08000310 <run_automatic>:
#include "fsm_automatic.h"
void run_automatic(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	@ 0x28
 8000314:	af00      	add	r7, sp, #0
	switch(status1){
 8000316:	4b93      	ldr	r3, [pc, #588]	@ (8000564 <run_automatic+0x254>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b0d      	cmp	r3, #13
 800031c:	d868      	bhi.n	80003f0 <run_automatic+0xe0>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <run_automatic+0x14>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	0800035d 	.word	0x0800035d
 8000328:	080003f1 	.word	0x080003f1
 800032c:	080003f1 	.word	0x080003f1
 8000330:	080003f1 	.word	0x080003f1
 8000334:	080003f1 	.word	0x080003f1
 8000338:	080003f1 	.word	0x080003f1
 800033c:	080003f1 	.word	0x080003f1
 8000340:	080003f1 	.word	0x080003f1
 8000344:	080003f1 	.word	0x080003f1
 8000348:	080003f1 	.word	0x080003f1
 800034c:	080003f1 	.word	0x080003f1
 8000350:	08000371 	.word	0x08000371
 8000354:	080003b9 	.word	0x080003b9
 8000358:	080003d5 	.word	0x080003d5
				case INIT:{
						ResetLight1();
 800035c:	f000 fb40 	bl	80009e0 <ResetLight1>
						status1 = RED_LED_AUTO;
 8000360:	4b80      	ldr	r3, [pc, #512]	@ (8000564 <run_automatic+0x254>)
 8000362:	220b      	movs	r2, #11
 8000364:	601a      	str	r2, [r3, #0]
						count1 = time_red;
 8000366:	4b80      	ldr	r3, [pc, #512]	@ (8000568 <run_automatic+0x258>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a80      	ldr	r2, [pc, #512]	@ (800056c <run_automatic+0x25c>)
 800036c:	6013      	str	r3, [r2, #0]
						break;
 800036e:	e046      	b.n	80003fe <run_automatic+0xee>
					}
				case RED_LED_AUTO:{
						RedLight1();
 8000370:	f000 fb64 	bl	8000a3c <RedLight1>
						if (count1 == 0){
 8000374:	4b7d      	ldr	r3, [pc, #500]	@ (800056c <run_automatic+0x25c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d106      	bne.n	800038a <run_automatic+0x7a>
							status1 = GREEN_LED_AUTO;
 800037c:	4b79      	ldr	r3, [pc, #484]	@ (8000564 <run_automatic+0x254>)
 800037e:	220d      	movs	r2, #13
 8000380:	601a      	str	r2, [r3, #0]
							count1 = time_green;
 8000382:	4b7b      	ldr	r3, [pc, #492]	@ (8000570 <run_automatic+0x260>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a79      	ldr	r2, [pc, #484]	@ (800056c <run_automatic+0x25c>)
 8000388:	6013      	str	r3, [r2, #0]
						}
						if (isButtonLongPressed(up_button)==1){
 800038a:	2000      	movs	r0, #0
 800038c:	f7ff ff0a 	bl	80001a4 <isButtonLongPressed>
 8000390:	4603      	mov	r3, r0
 8000392:	2b01      	cmp	r3, #1
 8000394:	d12e      	bne.n	80003f4 <run_automatic+0xe4>
							HAL_GPIO_TogglePin(GPIOA, LED_PINK);
 8000396:	2102      	movs	r1, #2
 8000398:	4876      	ldr	r0, [pc, #472]	@ (8000574 <run_automatic+0x264>)
 800039a:	f001 fcf2 	bl	8001d82 <HAL_GPIO_TogglePin>
							status1 = RED_GREEN_MAN;
 800039e:	4b71      	ldr	r3, [pc, #452]	@ (8000564 <run_automatic+0x254>)
 80003a0:	2215      	movs	r2, #21
 80003a2:	601a      	str	r2, [r3, #0]
							status2 = RED_GREEN_MAN;
 80003a4:	4b74      	ldr	r3, [pc, #464]	@ (8000578 <run_automatic+0x268>)
 80003a6:	2215      	movs	r2, #21
 80003a8:	601a      	str	r2, [r3, #0]
							count1 = 10*scale;
 80003aa:	4b70      	ldr	r3, [pc, #448]	@ (800056c <run_automatic+0x25c>)
 80003ac:	2264      	movs	r2, #100	@ 0x64
 80003ae:	601a      	str	r2, [r3, #0]
							count2 = 1;
 80003b0:	4b72      	ldr	r3, [pc, #456]	@ (800057c <run_automatic+0x26c>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
						}
						break;
 80003b6:	e01d      	b.n	80003f4 <run_automatic+0xe4>
					}
				case YELLOW_LED_AUTO:{
						YellowLight1();
 80003b8:	f000 fb56 	bl	8000a68 <YellowLight1>
						if (count1==0){
 80003bc:	4b6b      	ldr	r3, [pc, #428]	@ (800056c <run_automatic+0x25c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d119      	bne.n	80003f8 <run_automatic+0xe8>
							status1 = RED_LED_AUTO;
 80003c4:	4b67      	ldr	r3, [pc, #412]	@ (8000564 <run_automatic+0x254>)
 80003c6:	220b      	movs	r2, #11
 80003c8:	601a      	str	r2, [r3, #0]
							count1 = time_red;
 80003ca:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <run_automatic+0x258>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a67      	ldr	r2, [pc, #412]	@ (800056c <run_automatic+0x25c>)
 80003d0:	6013      	str	r3, [r2, #0]
						}
						break;
 80003d2:	e011      	b.n	80003f8 <run_automatic+0xe8>
					}
				case GREEN_LED_AUTO:{
						GreenLight1();
 80003d4:	f000 fb5e 	bl	8000a94 <GreenLight1>
						if (count1==0)	{
 80003d8:	4b64      	ldr	r3, [pc, #400]	@ (800056c <run_automatic+0x25c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d10d      	bne.n	80003fc <run_automatic+0xec>
							status1 = YELLOW_LED_AUTO;
 80003e0:	4b60      	ldr	r3, [pc, #384]	@ (8000564 <run_automatic+0x254>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	601a      	str	r2, [r3, #0]
							count1 = time_yellow;
 80003e6:	4b66      	ldr	r3, [pc, #408]	@ (8000580 <run_automatic+0x270>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a60      	ldr	r2, [pc, #384]	@ (800056c <run_automatic+0x25c>)
 80003ec:	6013      	str	r3, [r2, #0]
						}
						break;
 80003ee:	e005      	b.n	80003fc <run_automatic+0xec>
					}
				default:
						break;
 80003f0:	bf00      	nop
 80003f2:	e004      	b.n	80003fe <run_automatic+0xee>
						break;
 80003f4:	bf00      	nop
 80003f6:	e002      	b.n	80003fe <run_automatic+0xee>
						break;
 80003f8:	bf00      	nop
 80003fa:	e000      	b.n	80003fe <run_automatic+0xee>
						break;
 80003fc:	bf00      	nop
			}

		switch(status2){
 80003fe:	4b5e      	ldr	r3, [pc, #376]	@ (8000578 <run_automatic+0x268>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b0d      	cmp	r3, #13
 8000404:	d852      	bhi.n	80004ac <run_automatic+0x19c>
 8000406:	a201      	add	r2, pc, #4	@ (adr r2, 800040c <run_automatic+0xfc>)
 8000408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040c:	08000445 	.word	0x08000445
 8000410:	080004ad 	.word	0x080004ad
 8000414:	080004ad 	.word	0x080004ad
 8000418:	080004ad 	.word	0x080004ad
 800041c:	080004ad 	.word	0x080004ad
 8000420:	080004ad 	.word	0x080004ad
 8000424:	080004ad 	.word	0x080004ad
 8000428:	080004ad 	.word	0x080004ad
 800042c:	080004ad 	.word	0x080004ad
 8000430:	080004ad 	.word	0x080004ad
 8000434:	080004ad 	.word	0x080004ad
 8000438:	08000459 	.word	0x08000459
 800043c:	08000475 	.word	0x08000475
 8000440:	08000491 	.word	0x08000491
					case INIT:{
							ResetLight2();
 8000444:	f000 fae2 	bl	8000a0c <ResetLight2>
							status2 = GREEN_LED_AUTO;
 8000448:	4b4b      	ldr	r3, [pc, #300]	@ (8000578 <run_automatic+0x268>)
 800044a:	220d      	movs	r2, #13
 800044c:	601a      	str	r2, [r3, #0]
							count2 = time_green;
 800044e:	4b48      	ldr	r3, [pc, #288]	@ (8000570 <run_automatic+0x260>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a4a      	ldr	r2, [pc, #296]	@ (800057c <run_automatic+0x26c>)
 8000454:	6013      	str	r3, [r2, #0]
							break;
 8000456:	e030      	b.n	80004ba <run_automatic+0x1aa>
						}
					case RED_LED_AUTO:{
							RedLight2();
 8000458:	f000 fb32 	bl	8000ac0 <RedLight2>
							if (count2==0){
 800045c:	4b47      	ldr	r3, [pc, #284]	@ (800057c <run_automatic+0x26c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d125      	bne.n	80004b0 <run_automatic+0x1a0>
								status2 = GREEN_LED_AUTO;
 8000464:	4b44      	ldr	r3, [pc, #272]	@ (8000578 <run_automatic+0x268>)
 8000466:	220d      	movs	r2, #13
 8000468:	601a      	str	r2, [r3, #0]
								count2 = time_green;
 800046a:	4b41      	ldr	r3, [pc, #260]	@ (8000570 <run_automatic+0x260>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a43      	ldr	r2, [pc, #268]	@ (800057c <run_automatic+0x26c>)
 8000470:	6013      	str	r3, [r2, #0]
							}
							break;
 8000472:	e01d      	b.n	80004b0 <run_automatic+0x1a0>
						}
					case YELLOW_LED_AUTO:{
							YellowLight2();
 8000474:	f000 fb3c 	bl	8000af0 <YellowLight2>
							if (count2==0){
 8000478:	4b40      	ldr	r3, [pc, #256]	@ (800057c <run_automatic+0x26c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d119      	bne.n	80004b4 <run_automatic+0x1a4>
								status2 = RED_LED_AUTO;
 8000480:	4b3d      	ldr	r3, [pc, #244]	@ (8000578 <run_automatic+0x268>)
 8000482:	220b      	movs	r2, #11
 8000484:	601a      	str	r2, [r3, #0]
								count2 = time_red;
 8000486:	4b38      	ldr	r3, [pc, #224]	@ (8000568 <run_automatic+0x258>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a3c      	ldr	r2, [pc, #240]	@ (800057c <run_automatic+0x26c>)
 800048c:	6013      	str	r3, [r2, #0]
							}
							break;
 800048e:	e011      	b.n	80004b4 <run_automatic+0x1a4>
						}
					case GREEN_LED_AUTO:{
							GreenLight2();
 8000490:	f000 fb46 	bl	8000b20 <GreenLight2>
							if (count2 == 0)	{
 8000494:	4b39      	ldr	r3, [pc, #228]	@ (800057c <run_automatic+0x26c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10d      	bne.n	80004b8 <run_automatic+0x1a8>
								status2 = YELLOW_LED_AUTO;
 800049c:	4b36      	ldr	r3, [pc, #216]	@ (8000578 <run_automatic+0x268>)
 800049e:	220c      	movs	r2, #12
 80004a0:	601a      	str	r2, [r3, #0]
								count2 = time_yellow;
 80004a2:	4b37      	ldr	r3, [pc, #220]	@ (8000580 <run_automatic+0x270>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a35      	ldr	r2, [pc, #212]	@ (800057c <run_automatic+0x26c>)
 80004a8:	6013      	str	r3, [r2, #0]
							}
							break;
 80004aa:	e005      	b.n	80004b8 <run_automatic+0x1a8>
						}
					default:
							break;
 80004ac:	bf00      	nop
 80004ae:	e004      	b.n	80004ba <run_automatic+0x1aa>
							break;
 80004b0:	bf00      	nop
 80004b2:	e002      	b.n	80004ba <run_automatic+0x1aa>
							break;
 80004b4:	bf00      	nop
 80004b6:	e000      	b.n	80004ba <run_automatic+0x1aa>
							break;
 80004b8:	bf00      	nop
				}

		if((status1/10)==1 && count1>0 )count1--;
 80004ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000564 <run_automatic+0x254>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b0a      	subs	r3, #10
 80004c0:	2b09      	cmp	r3, #9
 80004c2:	d808      	bhi.n	80004d6 <run_automatic+0x1c6>
 80004c4:	4b29      	ldr	r3, [pc, #164]	@ (800056c <run_automatic+0x25c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dd04      	ble.n	80004d6 <run_automatic+0x1c6>
 80004cc:	4b27      	ldr	r3, [pc, #156]	@ (800056c <run_automatic+0x25c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a26      	ldr	r2, [pc, #152]	@ (800056c <run_automatic+0x25c>)
 80004d4:	6013      	str	r3, [r2, #0]
		if((status2/10)==1 && count2>0 )count2--;
 80004d6:	4b28      	ldr	r3, [pc, #160]	@ (8000578 <run_automatic+0x268>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3b0a      	subs	r3, #10
 80004dc:	2b09      	cmp	r3, #9
 80004de:	d808      	bhi.n	80004f2 <run_automatic+0x1e2>
 80004e0:	4b26      	ldr	r3, [pc, #152]	@ (800057c <run_automatic+0x26c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dd04      	ble.n	80004f2 <run_automatic+0x1e2>
 80004e8:	4b24      	ldr	r3, [pc, #144]	@ (800057c <run_automatic+0x26c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	4a23      	ldr	r2, [pc, #140]	@ (800057c <run_automatic+0x26c>)
 80004f0:	6013      	str	r3, [r2, #0]
		if((status1/10)==1 && count3>0 ){
 80004f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <run_automatic+0x254>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	3b0a      	subs	r3, #10
 80004f8:	2b09      	cmp	r3, #9
 80004fa:	d82f      	bhi.n	800055c <run_automatic+0x24c>
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <run_automatic+0x274>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dd2b      	ble.n	800055c <run_automatic+0x24c>
			count3--;
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <run_automatic+0x274>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3b01      	subs	r3, #1
 800050a:	4a1e      	ldr	r2, [pc, #120]	@ (8000584 <run_automatic+0x274>)
 800050c:	6013      	str	r3, [r2, #0]
			if(count3 ==0){
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <run_automatic+0x274>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d122      	bne.n	800055c <run_automatic+0x24c>
				count3 = scale;
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <run_automatic+0x274>)
 8000518:	220a      	movs	r2, #10
 800051a:	601a      	str	r2, [r3, #0]
				//LCD + UART HERE
		        char str[40];
		        sprintf(str, "Count1: %d - Count2: %d\n\r", count1/10,count2/10);
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <run_automatic+0x25c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a19      	ldr	r2, [pc, #100]	@ (8000588 <run_automatic+0x278>)
 8000522:	fb82 1203 	smull	r1, r2, r2, r3
 8000526:	1092      	asrs	r2, r2, #2
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad1      	subs	r1, r2, r3
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <run_automatic+0x26c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <run_automatic+0x278>)
 8000532:	fb82 0203 	smull	r0, r2, r2, r3
 8000536:	1092      	asrs	r2, r2, #2
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4638      	mov	r0, r7
 800053e:	460a      	mov	r2, r1
 8000540:	4912      	ldr	r1, [pc, #72]	@ (800058c <run_automatic+0x27c>)
 8000542:	f003 fbd1 	bl	8003ce8 <siprintf>
		        HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe09 	bl	8000160 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	4639      	mov	r1, r7
 8000554:	2364      	movs	r3, #100	@ 0x64
 8000556:	480e      	ldr	r0, [pc, #56]	@ (8000590 <run_automatic+0x280>)
 8000558:	f002 fdac 	bl	80030b4 <HAL_UART_Transmit>
			}
		}
}
 800055c:	bf00      	nop
 800055e:	3728      	adds	r7, #40	@ 0x28
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000120 	.word	0x20000120
 8000568:	20000064 	.word	0x20000064
 800056c:	20000128 	.word	0x20000128
 8000570:	2000006c 	.word	0x2000006c
 8000574:	40010800 	.word	0x40010800
 8000578:	20000124 	.word	0x20000124
 800057c:	2000012c 	.word	0x2000012c
 8000580:	20000068 	.word	0x20000068
 8000584:	20000070 	.word	0x20000070
 8000588:	66666667 	.word	0x66666667
 800058c:	08004660 	.word	0x08004660
 8000590:	200001cc 	.word	0x200001cc

08000594 <run_manual>:
#include "fsm_manual.h"

void run_manual(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	switch (status1){
 8000598:	4b70      	ldr	r3, [pc, #448]	@ (800075c <run_manual+0x1c8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3b15      	subs	r3, #21
 800059e:	2b03      	cmp	r3, #3
 80005a0:	f200 80c3 	bhi.w	800072a <run_manual+0x196>
 80005a4:	a201      	add	r2, pc, #4	@ (adr r2, 80005ac <run_manual+0x18>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005bd 	.word	0x080005bd
 80005b0:	08000617 	.word	0x08000617
 80005b4:	08000675 	.word	0x08000675
 80005b8:	080006cd 	.word	0x080006cd
	case RED_GREEN_MAN:{
		RedLight1();
 80005bc:	f000 fa3e 	bl	8000a3c <RedLight1>
		GreenLight2();
 80005c0:	f000 faae 	bl	8000b20 <GreenLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 80005c4:	4b66      	ldr	r3, [pc, #408]	@ (8000760 <run_manual+0x1cc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <run_manual+0x44>
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fde9 	bl	80001a4 <isButtonLongPressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10d      	bne.n	80005f4 <run_manual+0x60>
			count1 = time_red;
 80005d8:	4b62      	ldr	r3, [pc, #392]	@ (8000764 <run_manual+0x1d0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a60      	ldr	r2, [pc, #384]	@ (8000760 <run_manual+0x1cc>)
 80005de:	6013      	str	r3, [r2, #0]
			count2 = time_green;
 80005e0:	4b61      	ldr	r3, [pc, #388]	@ (8000768 <run_manual+0x1d4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a61      	ldr	r2, [pc, #388]	@ (800076c <run_manual+0x1d8>)
 80005e6:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 80005e8:	4b5c      	ldr	r3, [pc, #368]	@ (800075c <run_manual+0x1c8>)
 80005ea:	220b      	movs	r2, #11
 80005ec:	601a      	str	r2, [r3, #0]
			status2 = GREEN_LED_AUTO;
 80005ee:	4b60      	ldr	r3, [pc, #384]	@ (8000770 <run_manual+0x1dc>)
 80005f0:	220d      	movs	r2, #13
 80005f2:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1){
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fdbb 	bl	8000170 <isButtonPressed>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	f040 8096 	bne.w	800072e <run_manual+0x19a>
			status1= RED_YELLOW_MAN;
 8000602:	4b56      	ldr	r3, [pc, #344]	@ (800075c <run_manual+0x1c8>)
 8000604:	2216      	movs	r2, #22
 8000606:	601a      	str	r2, [r3, #0]
			count1 = 10*scale;
 8000608:	4b55      	ldr	r3, [pc, #340]	@ (8000760 <run_manual+0x1cc>)
 800060a:	2264      	movs	r2, #100	@ 0x64
 800060c:	601a      	str	r2, [r3, #0]
			count2 = 1;
 800060e:	4b57      	ldr	r3, [pc, #348]	@ (800076c <run_manual+0x1d8>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
		}
		break;
 8000614:	e08b      	b.n	800072e <run_manual+0x19a>
	}
	case RED_YELLOW_MAN:{
		RedLight1();
 8000616:	f000 fa11 	bl	8000a3c <RedLight1>
		YellowLight2();
 800061a:	f000 fa69 	bl	8000af0 <YellowLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 800061e:	4b50      	ldr	r3, [pc, #320]	@ (8000760 <run_manual+0x1cc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <run_manual+0x9e>
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fdbc 	bl	80001a4 <isButtonLongPressed>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d110      	bne.n	8000654 <run_manual+0xc0>
			count1 = time_red - time_green;
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <run_manual+0x1d0>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4b4c      	ldr	r3, [pc, #304]	@ (8000768 <run_manual+0x1d4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a48      	ldr	r2, [pc, #288]	@ (8000760 <run_manual+0x1cc>)
 800063e:	6013      	str	r3, [r2, #0]
			count2 = time_yellow;
 8000640:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <run_manual+0x1e0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a49      	ldr	r2, [pc, #292]	@ (800076c <run_manual+0x1d8>)
 8000646:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 8000648:	4b44      	ldr	r3, [pc, #272]	@ (800075c <run_manual+0x1c8>)
 800064a:	220b      	movs	r2, #11
 800064c:	601a      	str	r2, [r3, #0]
			status2 = YELLOW_LED_AUTO;
 800064e:	4b48      	ldr	r3, [pc, #288]	@ (8000770 <run_manual+0x1dc>)
 8000650:	220c      	movs	r2, #12
 8000652:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1){
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fd8b 	bl	8000170 <isButtonPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d168      	bne.n	8000732 <run_manual+0x19e>
			status1= GREEN_RED_MAN;
 8000660:	4b3e      	ldr	r3, [pc, #248]	@ (800075c <run_manual+0x1c8>)
 8000662:	2217      	movs	r2, #23
 8000664:	601a      	str	r2, [r3, #0]
			count1 = 10*scale;
 8000666:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <run_manual+0x1cc>)
 8000668:	2264      	movs	r2, #100	@ 0x64
 800066a:	601a      	str	r2, [r3, #0]
			count2 = 1;
 800066c:	4b3f      	ldr	r3, [pc, #252]	@ (800076c <run_manual+0x1d8>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
		}
		break;
 8000672:	e05e      	b.n	8000732 <run_manual+0x19e>
	}
	case GREEN_RED_MAN:{
		GreenLight1();
 8000674:	f000 fa0e 	bl	8000a94 <GreenLight1>
		RedLight2();
 8000678:	f000 fa22 	bl	8000ac0 <RedLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 800067c:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <run_manual+0x1cc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <run_manual+0xfc>
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff fd8d 	bl	80001a4 <isButtonLongPressed>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d10d      	bne.n	80006ac <run_manual+0x118>
			count1 = time_green;
 8000690:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <run_manual+0x1d4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a32      	ldr	r2, [pc, #200]	@ (8000760 <run_manual+0x1cc>)
 8000696:	6013      	str	r3, [r2, #0]
			count2 = time_red;
 8000698:	4b32      	ldr	r3, [pc, #200]	@ (8000764 <run_manual+0x1d0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a33      	ldr	r2, [pc, #204]	@ (800076c <run_manual+0x1d8>)
 800069e:	6013      	str	r3, [r2, #0]
			status1 = GREEN_LED_AUTO;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <run_manual+0x1c8>)
 80006a2:	220d      	movs	r2, #13
 80006a4:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_AUTO;
 80006a6:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <run_manual+0x1dc>)
 80006a8:	220b      	movs	r2, #11
 80006aa:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1){
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff fd5f 	bl	8000170 <isButtonPressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d13e      	bne.n	8000736 <run_manual+0x1a2>
			status1= YELLOW_RED_MAN;
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <run_manual+0x1c8>)
 80006ba:	2218      	movs	r2, #24
 80006bc:	601a      	str	r2, [r3, #0]
			count1 = 5*scale;
 80006be:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <run_manual+0x1cc>)
 80006c0:	2232      	movs	r2, #50	@ 0x32
 80006c2:	601a      	str	r2, [r3, #0]
			count2 = 1;
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <run_manual+0x1d8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80006ca:	e034      	b.n	8000736 <run_manual+0x1a2>
	}
	case YELLOW_RED_MAN:{
			YellowLight1();
 80006cc:	f000 f9cc 	bl	8000a68 <YellowLight1>
			RedLight2();
 80006d0:	f000 f9f6 	bl	8000ac0 <RedLight2>
			if(count1==0 || isButtonLongPressed(up_button)==1){
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <run_manual+0x1cc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <run_manual+0x154>
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fd61 	bl	80001a4 <isButtonLongPressed>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d110      	bne.n	800070a <run_manual+0x176>
				count1 = time_yellow;
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <run_manual+0x1e0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <run_manual+0x1cc>)
 80006ee:	6013      	str	r3, [r2, #0]
				count2 = time_red - time_green ;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <run_manual+0x1d0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <run_manual+0x1d4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <run_manual+0x1d8>)
 80006fc:	6013      	str	r3, [r2, #0]
				status1 = YELLOW_LED_AUTO;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <run_manual+0x1c8>)
 8000700:	220c      	movs	r2, #12
 8000702:	601a      	str	r2, [r3, #0]
				status2 = RED_LED_AUTO;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <run_manual+0x1dc>)
 8000706:	220b      	movs	r2, #11
 8000708:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(up_button)==1){
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fd30 	bl	8000170 <isButtonPressed>
 8000710:	4603      	mov	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d111      	bne.n	800073a <run_manual+0x1a6>
				status1= RED_GREEN_MAN;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <run_manual+0x1c8>)
 8000718:	2215      	movs	r2, #21
 800071a:	601a      	str	r2, [r3, #0]
				count1 = 5*scale;
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <run_manual+0x1cc>)
 800071e:	2232      	movs	r2, #50	@ 0x32
 8000720:	601a      	str	r2, [r3, #0]
				count2 = 1;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <run_manual+0x1d8>)
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
			}
			break;
 8000728:	e007      	b.n	800073a <run_manual+0x1a6>

	}
	default:
		break;
 800072a:	bf00      	nop
 800072c:	e006      	b.n	800073c <run_manual+0x1a8>
		break;
 800072e:	bf00      	nop
 8000730:	e004      	b.n	800073c <run_manual+0x1a8>
		break;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <run_manual+0x1a8>
		break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <run_manual+0x1a8>
			break;
 800073a:	bf00      	nop
	}
	if((status1/10)==2 && count1>0)count1--;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <run_manual+0x1c8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3b14      	subs	r3, #20
 8000742:	2b09      	cmp	r3, #9
 8000744:	d808      	bhi.n	8000758 <run_manual+0x1c4>
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <run_manual+0x1cc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	dd04      	ble.n	8000758 <run_manual+0x1c4>
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <run_manual+0x1cc>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	4a02      	ldr	r2, [pc, #8]	@ (8000760 <run_manual+0x1cc>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000120 	.word	0x20000120
 8000760:	20000128 	.word	0x20000128
 8000764:	20000064 	.word	0x20000064
 8000768:	2000006c 	.word	0x2000006c
 800076c:	2000012c 	.word	0x2000012c
 8000770:	20000124 	.word	0x20000124
 8000774:	20000068 	.word	0x20000068

08000778 <run_setting>:

int tmp_red=0;
int tmp_yellow=0;
int tmp_green=0;

void run_setting(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	if ((status1/10)!=3){
 800077c:	4b8c      	ldr	r3, [pc, #560]	@ (80009b0 <run_setting+0x238>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b1e      	subs	r3, #30
 8000782:	2b09      	cmp	r3, #9
 8000784:	d919      	bls.n	80007ba <run_setting+0x42>
		if(isButtonLongPressed(set_button)){
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff fd0c 	bl	80001a4 <isButtonLongPressed>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d013      	beq.n	80007ba <run_setting+0x42>
			count3=1*scale;
 8000792:	4b88      	ldr	r3, [pc, #544]	@ (80009b4 <run_setting+0x23c>)
 8000794:	220a      	movs	r2, #10
 8000796:	601a      	str	r2, [r3, #0]
			status1 = RED_LED_SET;
 8000798:	4b85      	ldr	r3, [pc, #532]	@ (80009b0 <run_setting+0x238>)
 800079a:	221f      	movs	r2, #31
 800079c:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_SET;
 800079e:	4b86      	ldr	r3, [pc, #536]	@ (80009b8 <run_setting+0x240>)
 80007a0:	221f      	movs	r2, #31
 80007a2:	601a      	str	r2, [r3, #0]
			count1 = 2; //Mode
 80007a4:	4b85      	ldr	r3, [pc, #532]	@ (80009bc <run_setting+0x244>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	601a      	str	r2, [r3, #0]
			count2 = time_red; //Value
 80007aa:	4b85      	ldr	r3, [pc, #532]	@ (80009c0 <run_setting+0x248>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a85      	ldr	r2, [pc, #532]	@ (80009c4 <run_setting+0x24c>)
 80007b0:	6013      	str	r3, [r2, #0]
			ResetLight1();
 80007b2:	f000 f915 	bl	80009e0 <ResetLight1>
			ResetLight2();
 80007b6:	f000 f929 	bl	8000a0c <ResetLight2>
		}
	}
	switch (status1){
 80007ba:	4b7d      	ldr	r3, [pc, #500]	@ (80009b0 <run_setting+0x238>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b21      	cmp	r3, #33	@ 0x21
 80007c0:	f000 808a 	beq.w	80008d8 <run_setting+0x160>
 80007c4:	2b21      	cmp	r3, #33	@ 0x21
 80007c6:	f300 80db 	bgt.w	8000980 <run_setting+0x208>
 80007ca:	2b1f      	cmp	r3, #31
 80007cc:	d002      	beq.n	80007d4 <run_setting+0x5c>
 80007ce:	2b20      	cmp	r3, #32
 80007d0:	d041      	beq.n	8000856 <run_setting+0xde>
			tmp_green = count2;
		}
		break;
	}
	default:
			break;
 80007d2:	e0d5      	b.n	8000980 <run_setting+0x208>
		if(count3==0){
 80007d4:	4b77      	ldr	r3, [pc, #476]	@ (80009b4 <run_setting+0x23c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10a      	bne.n	80007f2 <run_setting+0x7a>
			count3=1*scale;
 80007dc:	4b75      	ldr	r3, [pc, #468]	@ (80009b4 <run_setting+0x23c>)
 80007de:	220a      	movs	r2, #10
 80007e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_RED_1);
 80007e2:	2110      	movs	r1, #16
 80007e4:	4878      	ldr	r0, [pc, #480]	@ (80009c8 <run_setting+0x250>)
 80007e6:	f001 facc 	bl	8001d82 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_2);
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	4876      	ldr	r0, [pc, #472]	@ (80009c8 <run_setting+0x250>)
 80007ee:	f001 fac8 	bl	8001d82 <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fcd6 	bl	80001a4 <isButtonLongPressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10d      	bne.n	800081a <run_setting+0xa2>
			status1 = YELLOW_LED_SET;
 80007fe:	4b6c      	ldr	r3, [pc, #432]	@ (80009b0 <run_setting+0x238>)
 8000800:	2220      	movs	r2, #32
 8000802:	601a      	str	r2, [r3, #0]
			count1 = 3;
 8000804:	4b6d      	ldr	r3, [pc, #436]	@ (80009bc <run_setting+0x244>)
 8000806:	2203      	movs	r2, #3
 8000808:	601a      	str	r2, [r3, #0]
			count2 = time_yellow;
 800080a:	4b70      	ldr	r3, [pc, #448]	@ (80009cc <run_setting+0x254>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a6d      	ldr	r2, [pc, #436]	@ (80009c4 <run_setting+0x24c>)
 8000810:	6013      	str	r3, [r2, #0]
			ResetLight1();
 8000812:	f000 f8e5 	bl	80009e0 <ResetLight1>
			ResetLight2();
 8000816:	f000 f8f9 	bl	8000a0c <ResetLight2>
		if(isButtonPressed(up_button)==1){
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fca8 	bl	8000170 <isButtonPressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d10b      	bne.n	800083e <run_setting+0xc6>
			count2++;
 8000826:	4b67      	ldr	r3, [pc, #412]	@ (80009c4 <run_setting+0x24c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a65      	ldr	r2, [pc, #404]	@ (80009c4 <run_setting+0x24c>)
 800082e:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 8000830:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <run_setting+0x24c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b63      	cmp	r3, #99	@ 0x63
 8000836:	dd02      	ble.n	800083e <run_setting+0xc6>
 8000838:	4b62      	ldr	r3, [pc, #392]	@ (80009c4 <run_setting+0x24c>)
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fc96 	bl	8000170 <isButtonPressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 809c 	bne.w	8000984 <run_setting+0x20c>
			tmp_red = count2;
 800084c:	4b5d      	ldr	r3, [pc, #372]	@ (80009c4 <run_setting+0x24c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a5f      	ldr	r2, [pc, #380]	@ (80009d0 <run_setting+0x258>)
 8000852:	6013      	str	r3, [r2, #0]
		break;
 8000854:	e096      	b.n	8000984 <run_setting+0x20c>
		if(count3==0){
 8000856:	4b57      	ldr	r3, [pc, #348]	@ (80009b4 <run_setting+0x23c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10b      	bne.n	8000876 <run_setting+0xfe>
			count3=1*scale;
 800085e:	4b55      	ldr	r3, [pc, #340]	@ (80009b4 <run_setting+0x23c>)
 8000860:	220a      	movs	r2, #10
 8000862:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1);
 8000864:	2120      	movs	r1, #32
 8000866:	4858      	ldr	r0, [pc, #352]	@ (80009c8 <run_setting+0x250>)
 8000868:	f001 fa8b 	bl	8001d82 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2);
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4855      	ldr	r0, [pc, #340]	@ (80009c8 <run_setting+0x250>)
 8000872:	f001 fa86 	bl	8001d82 <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fc94 	bl	80001a4 <isButtonLongPressed>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d10d      	bne.n	800089e <run_setting+0x126>
			status1 = GREEN_LED_SET;
 8000882:	4b4b      	ldr	r3, [pc, #300]	@ (80009b0 <run_setting+0x238>)
 8000884:	2221      	movs	r2, #33	@ 0x21
 8000886:	601a      	str	r2, [r3, #0]
			count1 = 4;
 8000888:	4b4c      	ldr	r3, [pc, #304]	@ (80009bc <run_setting+0x244>)
 800088a:	2204      	movs	r2, #4
 800088c:	601a      	str	r2, [r3, #0]
			count2 = time_green;
 800088e:	4b51      	ldr	r3, [pc, #324]	@ (80009d4 <run_setting+0x25c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a4c      	ldr	r2, [pc, #304]	@ (80009c4 <run_setting+0x24c>)
 8000894:	6013      	str	r3, [r2, #0]
			ResetLight1();
 8000896:	f000 f8a3 	bl	80009e0 <ResetLight1>
			ResetLight2();
 800089a:	f000 f8b7 	bl	8000a0c <ResetLight2>
		if(isButtonPressed(up_button)==1){
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fc66 	bl	8000170 <isButtonPressed>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <run_setting+0x14a>
			count2++;
 80008aa:	4b46      	ldr	r3, [pc, #280]	@ (80009c4 <run_setting+0x24c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a44      	ldr	r2, [pc, #272]	@ (80009c4 <run_setting+0x24c>)
 80008b2:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 80008b4:	4b43      	ldr	r3, [pc, #268]	@ (80009c4 <run_setting+0x24c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b63      	cmp	r3, #99	@ 0x63
 80008ba:	dd02      	ble.n	80008c2 <run_setting+0x14a>
 80008bc:	4b41      	ldr	r3, [pc, #260]	@ (80009c4 <run_setting+0x24c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff fc54 	bl	8000170 <isButtonPressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d15c      	bne.n	8000988 <run_setting+0x210>
			tmp_yellow = count2;
 80008ce:	4b3d      	ldr	r3, [pc, #244]	@ (80009c4 <run_setting+0x24c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a41      	ldr	r2, [pc, #260]	@ (80009d8 <run_setting+0x260>)
 80008d4:	6013      	str	r3, [r2, #0]
		break;
 80008d6:	e057      	b.n	8000988 <run_setting+0x210>
		if(count3==0){
 80008d8:	4b36      	ldr	r3, [pc, #216]	@ (80009b4 <run_setting+0x23c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10b      	bne.n	80008f8 <run_setting+0x180>
			count3=1*scale;
 80008e0:	4b34      	ldr	r3, [pc, #208]	@ (80009b4 <run_setting+0x23c>)
 80008e2:	220a      	movs	r2, #10
 80008e4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1);
 80008e6:	2140      	movs	r1, #64	@ 0x40
 80008e8:	4837      	ldr	r0, [pc, #220]	@ (80009c8 <run_setting+0x250>)
 80008ea:	f001 fa4a 	bl	8001d82 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2);
 80008ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f2:	4835      	ldr	r0, [pc, #212]	@ (80009c8 <run_setting+0x250>)
 80008f4:	f001 fa45 	bl	8001d82 <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fc53 	bl	80001a4 <isButtonLongPressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d120      	bne.n	8000946 <run_setting+0x1ce>
			if(tmp_red == tmp_green + tmp_yellow){
 8000904:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <run_setting+0x264>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <run_setting+0x260>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	441a      	add	r2, r3
 800090e:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <run_setting+0x258>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	d10b      	bne.n	800092e <run_setting+0x1b6>
				time_red=tmp_red;
 8000916:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <run_setting+0x258>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a29      	ldr	r2, [pc, #164]	@ (80009c0 <run_setting+0x248>)
 800091c:	6013      	str	r3, [r2, #0]
				time_yellow=tmp_yellow;
 800091e:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <run_setting+0x260>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <run_setting+0x254>)
 8000924:	6013      	str	r3, [r2, #0]
				time_green=tmp_green;
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <run_setting+0x264>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a2a      	ldr	r2, [pc, #168]	@ (80009d4 <run_setting+0x25c>)
 800092c:	6013      	str	r3, [r2, #0]
			status1 = INIT;
 800092e:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <run_setting+0x238>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 8000934:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <run_setting+0x240>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
			count1 = 0;
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <run_setting+0x244>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8000940:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <run_setting+0x24c>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(up_button)==1 ){
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fc12 	bl	8000170 <isButtonPressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10b      	bne.n	800096a <run_setting+0x1f2>
			count2++;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <run_setting+0x24c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a1a      	ldr	r2, [pc, #104]	@ (80009c4 <run_setting+0x24c>)
 800095a:	6013      	str	r3, [r2, #0]
			if(count2 > 99)count2 =1;
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <run_setting+0x24c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b63      	cmp	r3, #99	@ 0x63
 8000962:	dd02      	ble.n	800096a <run_setting+0x1f2>
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <run_setting+0x24c>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fc00 	bl	8000170 <isButtonPressed>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10a      	bne.n	800098c <run_setting+0x214>
			tmp_green = count2;
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <run_setting+0x24c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <run_setting+0x264>)
 800097c:	6013      	str	r3, [r2, #0]
		break;
 800097e:	e005      	b.n	800098c <run_setting+0x214>
			break;
 8000980:	bf00      	nop
 8000982:	e004      	b.n	800098e <run_setting+0x216>
		break;
 8000984:	bf00      	nop
 8000986:	e002      	b.n	800098e <run_setting+0x216>
		break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <run_setting+0x216>
		break;
 800098c:	bf00      	nop
	}
	if((status1/10)==3 && count3>0)count3--;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <run_setting+0x238>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b1e      	subs	r3, #30
 8000994:	2b09      	cmp	r3, #9
 8000996:	d808      	bhi.n	80009aa <run_setting+0x232>
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <run_setting+0x23c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dd04      	ble.n	80009aa <run_setting+0x232>
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <run_setting+0x23c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	4a03      	ldr	r2, [pc, #12]	@ (80009b4 <run_setting+0x23c>)
 80009a8:	6013      	str	r3, [r2, #0]

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000120 	.word	0x20000120
 80009b4:	20000070 	.word	0x20000070
 80009b8:	20000124 	.word	0x20000124
 80009bc:	20000128 	.word	0x20000128
 80009c0:	20000064 	.word	0x20000064
 80009c4:	2000012c 	.word	0x2000012c
 80009c8:	40010800 	.word	0x40010800
 80009cc:	20000068 	.word	0x20000068
 80009d0:	20000114 	.word	0x20000114
 80009d4:	2000006c 	.word	0x2000006c
 80009d8:	20000118 	.word	0x20000118
 80009dc:	2000011c 	.word	0x2000011c

080009e0 <ResetLight1>:

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

void ResetLight1(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <ResetLight1+0x28>)
 80009ea:	f001 f9b2 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <ResetLight1+0x28>)
 80009f4:	f001 f9ad 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	@ 0x40
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <ResetLight1+0x28>)
 80009fe:	f001 f9a8 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010800 	.word	0x40010800

08000a0c <ResetLight2>:

void ResetLight2(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <ResetLight2+0x2c>)
 8000a16:	f001 f99c 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 ,  RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <ResetLight2+0x2c>)
 8000a22:	f001 f996 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <ResetLight2+0x2c>)
 8000a2e:	f001 f990 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010800 	.word	0x40010800

08000a3c <RedLight1>:
void RedLight1(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <RedLight1+0x28>)
 8000a46:	f001 f984 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <RedLight1+0x28>)
 8000a50:	f001 f97f 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2140      	movs	r1, #64	@ 0x40
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <RedLight1+0x28>)
 8000a5a:	f001 f97a 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010800 	.word	0x40010800

08000a68 <YellowLight1>:
void YellowLight1(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <YellowLight1+0x28>)
 8000a72:	f001 f96e 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <YellowLight1+0x28>)
 8000a7c:	f001 f969 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2140      	movs	r1, #64	@ 0x40
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <YellowLight1+0x28>)
 8000a86:	f001 f964 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010800 	.word	0x40010800

08000a94 <GreenLight1>:
void GreenLight1(){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <GreenLight1+0x28>)
 8000a9e:	f001 f958 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <GreenLight1+0x28>)
 8000aa8:	f001 f953 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2140      	movs	r1, #64	@ 0x40
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <GreenLight1+0x28>)
 8000ab2:	f001 f94e 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40010800 	.word	0x40010800

08000ac0 <RedLight2>:
void RedLight2(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <RedLight2+0x2c>)
 8000aca:	f001 f942 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <RedLight2+0x2c>)
 8000ad6:	f001 f93c 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <RedLight2+0x2c>)
 8000ae2:	f001 f936 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010800 	.word	0x40010800

08000af0 <YellowLight2>:
void YellowLight2(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <YellowLight2+0x2c>)
 8000afa:	f001 f92a 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <YellowLight2+0x2c>)
 8000b06:	f001 f924 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <YellowLight2+0x2c>)
 8000b12:	f001 f91e 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40010800 	.word	0x40010800

08000b20 <GreenLight2>:
void GreenLight2(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <GreenLight2+0x2c>)
 8000b2a:	f001 f912 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <GreenLight2+0x2c>)
 8000b36:	f001 f90c 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <GreenLight2+0x2c>)
 8000b42:	f001 f906 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010800 	.word	0x40010800

08000b50 <Run_Traffic_Light>:

void BlinkLed(){
	HAL_GPIO_TogglePin(GPIOA, LED_PINK);
}

void Run_Traffic_Light(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	run_setting();
 8000b54:	f7ff fe10 	bl	8000778 <run_setting>
	run_manual();
 8000b58:	f7ff fd1c 	bl	8000594 <run_manual>
	run_automatic();
 8000b5c:	f7ff fbd8 	bl	8000310 <run_automatic>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f000 fd3e 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f82a 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f000 f90c 	bl	8000d8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b74:	f000 f894 	bl	8000ca0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000b78:	f000 f864 	bl	8000c44 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000b7c:	f000 f8dc 	bl	8000d38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <main+0x4c>)
 8000b82:	f001 febb 	bl	80028fc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	490a      	ldr	r1, [pc, #40]	@ (8000bb4 <main+0x50>)
 8000b8a:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <main+0x54>)
 8000b8c:	f002 fb1d 	bl	80031ca <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 8000b90:	f000 f9ce 	bl	8000f30 <SCH_Init>
  //SCH_Add_Task(BlinkLed, 0 , 1000);
  //SCH_Add_Task(BlinkLed2, 0 , 2000);
  SCH_Add_Task(Run_Traffic_Light,0,100);
 8000b94:	2264      	movs	r2, #100	@ 0x64
 8000b96:	2100      	movs	r1, #0
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <main+0x58>)
 8000b9a:	f000 fa53 	bl	8001044 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0 , 10);
 8000b9e:	220a      	movs	r2, #10
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <main+0x5c>)
 8000ba4:	f000 fa4e 	bl	8001044 <SCH_Add_Task>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task() ;
 8000ba8:	f000 fafa 	bl	80011a0 <SCH_Dispatch_Task>
 8000bac:	e7fc      	b.n	8000ba8 <main+0x44>
 8000bae:	bf00      	nop
 8000bb0:	20000184 	.word	0x20000184
 8000bb4:	20000218 	.word	0x20000218
 8000bb8:	200001cc 	.word	0x200001cc
 8000bbc:	08000b51 	.word	0x08000b51
 8000bc0:	080001d9 	.word	0x080001d9

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b090      	sub	sp, #64	@ 0x40
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2228      	movs	r2, #40	@ 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 f8a8 	bl	8003d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fa1a 	bl	800203c <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000c0e:	f000 f989 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fc87 	bl	8002540 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c38:	f000 f974 	bl	8000f24 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	@ 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c4a:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <MX_I2C1_Init+0x54>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c50:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_I2C1_Init+0x58>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MX_I2C1_Init+0x50>)
 8000c82:	f001 f897 	bl	8001db4 <HAL_I2C_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c8c:	f000 f94a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000130 	.word	0x20000130
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	000186a0 	.word	0x000186a0

08000ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cc6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cd4:	2209      	movs	r2, #9
 8000cd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000ce6:	f001 fdb9 	bl	800285c <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf0:	f000 f918 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000d02:	f001 ff37 	bl	8002b74 <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 f90a 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000d1e:	f002 f90f 	bl	8002f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f8fc 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000184 	.word	0x20000184

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f002 f950 	bl	8003014 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f8d3 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001cc 	.word	0x200001cc
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8000dd6:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000dd8:	f000 ffbb 	bl	8001d52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000ddc:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 8000de0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2302      	movs	r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000df6:	f000 fe19 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dfa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000e10:	f000 fe0c 	bl	8001a2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010800 	.word	0x40010800

08000e24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	//timer_run();
	SCH_Update();
 8000e2c:	f000 f89a 	bl	8000f64 <SCH_Update>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  uint8_t i;
  if (huart->Instance == USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a2e      	ldr	r2, [pc, #184]	@ (8000f00 <HAL_UART_RxCpltCallback+0xc8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d156      	bne.n	8000ef8 <HAL_UART_RxCpltCallback+0xc0>
  {
    if (rx_idx == 0)
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <HAL_UART_RxCpltCallback+0xcc>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10c      	bne.n	8000e6c <HAL_UART_RxCpltCallback+0x34>
    {
      for (i = 0; i < 100; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	77fb      	strb	r3, [r7, #31]
 8000e56:	e006      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x2e>
      {
        rx_buffer[i] = 0;
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f08 <HAL_UART_RxCpltCallback+0xd0>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	54d1      	strb	r1, [r2, r3]
      for (i = 0; i < 100; i++)
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	3301      	adds	r3, #1
 8000e64:	77fb      	strb	r3, [r7, #31]
 8000e66:	7ffb      	ldrb	r3, [r7, #31]
 8000e68:	2b63      	cmp	r3, #99	@ 0x63
 8000e6a:	d9f5      	bls.n	8000e58 <HAL_UART_RxCpltCallback+0x20>
      }
    } // RESET RX BUFFER

    if (rx_data[0] != 13)
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <HAL_UART_RxCpltCallback+0xd4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b0d      	cmp	r3, #13
 8000e72:	d00b      	beq.n	8000e8c <HAL_UART_RxCpltCallback+0x54>
    {
      rx_buffer[rx_idx++] = rx_data[0];
 8000e74:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <HAL_UART_RxCpltCallback+0xcc>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	b2d1      	uxtb	r1, r2
 8000e7c:	4a21      	ldr	r2, [pc, #132]	@ (8000f04 <HAL_UART_RxCpltCallback+0xcc>)
 8000e7e:	7011      	strb	r1, [r2, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <HAL_UART_RxCpltCallback+0xd4>)
 8000e84:	7819      	ldrb	r1, [r3, #0]
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_UART_RxCpltCallback+0xd0>)
 8000e88:	5499      	strb	r1, [r3, r2]
 8000e8a:	e026      	b.n	8000eda <HAL_UART_RxCpltCallback+0xa2>
    }
    else
    {
      rx_idx = 0;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <HAL_UART_RxCpltCallback+0xcc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
      transfer_clpt = 1;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <HAL_UART_RxCpltCallback+0xd8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8000e98:	2364      	movs	r3, #100	@ 0x64
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	491d      	ldr	r1, [pc, #116]	@ (8000f14 <HAL_UART_RxCpltCallback+0xdc>)
 8000e9e:	481e      	ldr	r0, [pc, #120]	@ (8000f18 <HAL_UART_RxCpltCallback+0xe0>)
 8000ea0:	f002 f908 	bl	80030b4 <HAL_UART_Transmit>
      if (!strcmp(rx_buffer, "SHOW TIME"))
 8000ea4:	491d      	ldr	r1, [pc, #116]	@ (8000f1c <HAL_UART_RxCpltCallback+0xe4>)
 8000ea6:	4818      	ldr	r0, [pc, #96]	@ (8000f08 <HAL_UART_RxCpltCallback+0xd0>)
 8000ea8:	f7ff f950 	bl	800014c <strcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10d      	bne.n	8000ece <HAL_UART_RxCpltCallback+0x96>
      {
        char str[20];
        //sprintf(str, "ADC READ: %d Volt\n\r", ADC_value);
        HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff f952 	bl	8000160 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f107 0108 	add.w	r1, r7, #8
 8000ec4:	2364      	movs	r3, #100	@ 0x64
 8000ec6:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <HAL_UART_RxCpltCallback+0xe0>)
 8000ec8:	f002 f8f4 	bl	80030b4 <HAL_UART_Transmit>
 8000ecc:	e005      	b.n	8000eda <HAL_UART_RxCpltCallback+0xa2>
      }
      else
      {
        HAL_UART_Transmit(&huart2, "SYNTAX ERROR\n\r", 14, 100);
 8000ece:	2364      	movs	r3, #100	@ 0x64
 8000ed0:	220e      	movs	r2, #14
 8000ed2:	4913      	ldr	r1, [pc, #76]	@ (8000f20 <HAL_UART_RxCpltCallback+0xe8>)
 8000ed4:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <HAL_UART_RxCpltCallback+0xe0>)
 8000ed6:	f002 f8ed 	bl	80030b4 <HAL_UART_Transmit>
      }
    }
    HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	490b      	ldr	r1, [pc, #44]	@ (8000f0c <HAL_UART_RxCpltCallback+0xd4>)
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <HAL_UART_RxCpltCallback+0xe0>)
 8000ee0:	f002 f973 	bl	80031ca <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, rx_data, strlen(rx_data), 100);
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <HAL_UART_RxCpltCallback+0xd4>)
 8000ee6:	f7ff f93b 	bl	8000160 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	4906      	ldr	r1, [pc, #24]	@ (8000f0c <HAL_UART_RxCpltCallback+0xd4>)
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <HAL_UART_RxCpltCallback+0xe0>)
 8000ef4:	f002 f8de 	bl	80030b4 <HAL_UART_Transmit>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40004400 	.word	0x40004400
 8000f04:	20000214 	.word	0x20000214
 8000f08:	20000220 	.word	0x20000220
 8000f0c:	20000218 	.word	0x20000218
 8000f10:	20000284 	.word	0x20000284
 8000f14:	0800467c 	.word	0x0800467c
 8000f18:	200001cc 	.word	0x200001cc
 8000f1c:	08004680 	.word	0x08004680
 8000f20:	0800468c 	.word	0x0800468c

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <SCH_Init>:
uint8_t Error_code_G ;
uint8_t Error_port ;
uint8_t Last_error_code_G;
uint32_t Error_tick_count_G;

void SCH_Init(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e006      	b.n	8000f4a <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8e6 	bl	8001110 <SCH_Delete_Task>
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	3301      	adds	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b27      	cmp	r3, #39	@ 0x27
 8000f4e:	d9f5      	bls.n	8000f3c <SCH_Init+0xc>
	}
	 // Reset the global error variable
	 // − SCH_Delete_Task() will generate an error code,
	 // (because the task array is empty)
	 Error_code_G= 0;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <SCH_Init+0x30>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	 //Timer_init();
	 //MX_IWDG_Init(); //Watchdog init
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200005a8 	.word	0x200005a8

08000f64 <SCH_Update>:

void SCH_Update(void){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
	uint32_t Index;
	  //NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e05d      	b.n	800102c <SCH_Update+0xc8>
	  // Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask){
 8000f70:	4933      	ldr	r1, [pc, #204]	@ (8001040 <SCH_Update+0xdc>)
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d050      	beq.n	8001026 <SCH_Update+0xc2>
			if (SCH_tasks_G[Index].Delay == 0) {
 8000f84:	492e      	ldr	r1, [pc, #184]	@ (8001040 <SCH_Update+0xdc>)
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d132      	bne.n	8001000 <SCH_Update+0x9c>
				  // The task is due to run
				  // Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe+= 1;
 8000f9a:	4929      	ldr	r1, [pc, #164]	@ (8001040 <SCH_Update+0xdc>)
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	330c      	adds	r3, #12
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2d8      	uxtb	r0, r3
 8000fb0:	4923      	ldr	r1, [pc, #140]	@ (8001040 <SCH_Update+0xdc>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	330c      	adds	r3, #12
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 8000fc4:	491e      	ldr	r1, [pc, #120]	@ (8001040 <SCH_Update+0xdc>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d025      	beq.n	8001026 <SCH_Update+0xc2>
					  // Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000fda:	4919      	ldr	r1, [pc, #100]	@ (8001040 <SCH_Update+0xdc>)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3308      	adds	r3, #8
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	4814      	ldr	r0, [pc, #80]	@ (8001040 <SCH_Update+0xdc>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4403      	add	r3, r0
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	6019      	str	r1, [r3, #0]
 8000ffe:	e012      	b.n	8001026 <SCH_Update+0xc2>
				}
			} else {
				  // Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay --;
 8001000:	490f      	ldr	r1, [pc, #60]	@ (8001040 <SCH_Update+0xdc>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	3304      	adds	r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1e59      	subs	r1, r3, #1
 8001014:	480a      	ldr	r0, [pc, #40]	@ (8001040 <SCH_Update+0xdc>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4403      	add	r3, r0
 8001022:	3304      	adds	r3, #4
 8001024:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3301      	adds	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b27      	cmp	r3, #39	@ 0x27
 8001030:	d99e      	bls.n	8000f70 <SCH_Update+0xc>
			}
		}
	}
	//Watchdog_Refresh();
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000288 	.word	0x20000288

08001044 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
	// First find a gap in the array (if there is one)
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001054:	e002      	b.n	800105c <SCH_Add_Task+0x18>
 	 {
	 	 Index++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 800105c:	4929      	ldr	r1, [pc, #164]	@ (8001104 <SCH_Add_Task+0xc0>)
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <SCH_Add_Task+0x32>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b27      	cmp	r3, #39	@ 0x27
 8001074:	d9ef      	bls.n	8001056 <SCH_Add_Task+0x12>
 	 }
 // Havewe reached the end of the list?
 if (Index ==SCH_MAX_TASKS){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b28      	cmp	r3, #40	@ 0x28
 800107a:	d104      	bne.n	8001086 <SCH_Add_Task+0x42>
 // Task list is full
 // Set the global error variable
 Error_code_G=ERROR_SCH_TOO_MANY_TASKS;
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <SCH_Add_Task+0xc4>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
  // Also return an error code
 return SCH_MAX_TASKS;
 8001082:	2328      	movs	r3, #40	@ 0x28
 8001084:	e039      	b.n	80010fa <SCH_Add_Task+0xb6>
 }
 // If we’re here, there is a space in the task array
 SCH_tasks_G[Index].pTask = pFunction;
 8001086:	491f      	ldr	r1, [pc, #124]	@ (8001104 <SCH_Add_Task+0xc0>)
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	601a      	str	r2, [r3, #0]
 SCH_tasks_G[Index].Delay = DELAY / TICK;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <SCH_Add_Task+0xc8>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	08d9      	lsrs	r1, r3, #3
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <SCH_Add_Task+0xc0>)
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4403      	add	r3, r0
 80010b0:	3304      	adds	r3, #4
 80010b2:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].Period = PERIOD / TICK;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a15      	ldr	r2, [pc, #84]	@ (800110c <SCH_Add_Task+0xc8>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	08d9      	lsrs	r1, r3, #3
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <SCH_Add_Task+0xc0>)
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	3308      	adds	r3, #8
 80010ce:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].RunMe = 0;
 80010d0:	490c      	ldr	r1, [pc, #48]	@ (8001104 <SCH_Add_Task+0xc0>)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	330c      	adds	r3, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 SCH_tasks_G[Index].TaskID = Index;
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <SCH_Add_Task+0xc0>)
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3310      	adds	r3, #16
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]
 // return position of task (to allow later deletion)
 return Index;
 80010f8:	697b      	ldr	r3, [r7, #20]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000288 	.word	0x20000288
 8001108:	200005a8 	.word	0x200005a8
 800110c:	cccccccd 	.word	0xcccccccd

08001110 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	uint8_t Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8001118:	491f      	ldr	r1, [pc, #124]	@ (8001198 <SCH_Delete_Task+0x88>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <SCH_Delete_Task+0x28>
	 // No task at this location ...
	 // Set the global error variable
	 Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <SCH_Delete_Task+0x8c>)
 800112e:	2208      	movs	r2, #8
 8001130:	701a      	strb	r2, [r3, #0]
	 // ... also return an error code
	 Return_code = RETURN_ERROR;
 8001132:	23ff      	movs	r3, #255	@ 0xff
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e001      	b.n	800113c <SCH_Delete_Task+0x2c>
	 } else {
	 Return_code = RETURN_NORMAL;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
	 }
	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800113c:	4916      	ldr	r1, [pc, #88]	@ (8001198 <SCH_Delete_Task+0x88>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 800114e:	4912      	ldr	r1, [pc, #72]	@ (8001198 <SCH_Delete_Task+0x88>)
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	3304      	adds	r3, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <SCH_Delete_Task+0x88>)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3308      	adds	r3, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <SCH_Delete_Task+0x88>)
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	330c      	adds	r3, #12
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	 return Return_code; // return status
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000288 	.word	0x20000288
 800119c:	200005a8 	.word	0x200005a8

080011a0 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	// Dispatches (runs) the next task (if one is ready)
	uint8_t Index;
	 // Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e039      	b.n	8001220 <SCH_Dispatch_Task+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	4921      	ldr	r1, [pc, #132]	@ (8001234 <SCH_Dispatch_Task+0x94>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	330c      	adds	r3, #12
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d02b      	beq.n	800121a <SCH_Dispatch_Task+0x7a>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	491b      	ldr	r1, [pc, #108]	@ (8001234 <SCH_Dispatch_Task+0x94>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	4917      	ldr	r1, [pc, #92]	@ (8001234 <SCH_Dispatch_Task+0x94>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	330c      	adds	r3, #12
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	4912      	ldr	r1, [pc, #72]	@ (8001234 <SCH_Dispatch_Task+0x94>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	330c      	adds	r3, #12
 80011f8:	4602      	mov	r2, r0
 80011fa:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0){
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	490d      	ldr	r1, [pc, #52]	@ (8001234 <SCH_Dispatch_Task+0x94>)
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3308      	adds	r3, #8
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <SCH_Dispatch_Task+0x7a>
				SCH_Delete_Task(Index);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff7b 	bl	8001110 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3301      	adds	r3, #1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b27      	cmp	r3, #39	@ 0x27
 8001224:	d9c2      	bls.n	80011ac <SCH_Dispatch_Task+0xc>
			}
		}
	}
	// Report system status
	SCH_Report_Status();
 8001226:	f000 f807 	bl	8001238 <SCH_Report_Status>
	// The scheduler enters idlemode at this point
	//SCH_Go_To_Sleep();
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000288 	.word	0x20000288

08001238 <SCH_Report_Status>:

void SCH_Go_To_Sleep(){}

void SCH_Report_Status(void) {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
#ifdef SCH_REPORT_ERRORS
	//ONLYAPPLIES IFWEAREREPORTINGERRORS
	// Check for answer error code
	if (Error_code_G != Last_error_code_G) {
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <SCH_Report_Status+0x68>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <SCH_Report_Status+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d016      	beq.n	8001276 <SCH_Report_Status+0x3e>
		// Negative logic onLEDs assumed
		Error_port = 255 - Error_code_G;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <SCH_Report_Status+0x68>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	43db      	mvns	r3, r3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <SCH_Report_Status+0x70>)
 8001252:	701a      	strb	r2, [r3, #0]
		Last_error_code_G = Error_code_G;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <SCH_Report_Status+0x68>)
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <SCH_Report_Status+0x6c>)
 800125a:	701a      	strb	r2, [r3, #0]
		if (Error_code_G != 0){
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <SCH_Report_Status+0x68>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <SCH_Report_Status+0x36>
			Error_tick_count_G= 60000;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <SCH_Report_Status+0x74>)
 8001266:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800126a:	601a      	str	r2, [r3, #0]
				Error_code_G= 0; // Reset error code
			}
		}
	}
#endif
}
 800126c:	e013      	b.n	8001296 <SCH_Report_Status+0x5e>
			Error_tick_count_G= 0;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <SCH_Report_Status+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	e00f      	b.n	8001296 <SCH_Report_Status+0x5e>
		if (Error_tick_count_G != 0){
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <SCH_Report_Status+0x74>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <SCH_Report_Status+0x5e>
			if (--Error_tick_count_G== 0) {
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <SCH_Report_Status+0x74>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <SCH_Report_Status+0x74>)
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <SCH_Report_Status+0x74>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <SCH_Report_Status+0x5e>
				Error_code_G= 0; // Reset error code
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <SCH_Report_Status+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200005a8 	.word	0x200005a8
 80012a4:	200005aa 	.word	0x200005aa
 80012a8:	200005a9 	.word	0x200005a9
 80012ac:	200005ac 	.word	0x200005ac

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1e      	ldr	r2, [pc, #120]	@ (80013a8 <HAL_I2C_MspInit+0x94>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d134      	bne.n	800139e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_I2C_MspInit+0x98>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <HAL_I2C_MspInit+0x98>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_I2C_MspInit+0x98>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800134c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001352:	2312      	movs	r3, #18
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <HAL_I2C_MspInit+0x9c>)
 8001366:	f000 fb61 	bl	8001a2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_I2C_MspInit+0xa0>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001380:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <HAL_I2C_MspInit+0xa0>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_I2C_MspInit+0x98>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_I2C_MspInit+0x98>)
 800138c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_I2C_MspInit+0x98>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	40010000 	.word	0x40010000

080013b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c8:	d113      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <HAL_TIM_Base_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201c      	movs	r0, #28
 80013e8:	f000 fa37 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ec:	201c      	movs	r0, #28
 80013ee:	f000 fa50 	bl	8001892 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <HAL_UART_MspInit+0x98>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d137      	bne.n	8001490 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001420:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <HAL_UART_MspInit+0x9c>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_UART_MspInit+0x9c>)
 8001426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142a:	61d3      	str	r3, [r2, #28]
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <HAL_UART_MspInit+0x9c>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_UART_MspInit+0x9c>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <HAL_UART_MspInit+0x9c>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_UART_MspInit+0x9c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001450:	2304      	movs	r3, #4
 8001452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <HAL_UART_MspInit+0xa0>)
 8001464:	f000 fae2 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001468:	2308      	movs	r3, #8
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <HAL_UART_MspInit+0xa0>)
 800147c:	f000 fad6 	bl	8001a2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2026      	movs	r0, #38	@ 0x26
 8001486:	f000 f9e8 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800148a:	2026      	movs	r0, #38	@ 0x26
 800148c:	f000 fa01 	bl	8001892 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40004400 	.word	0x40004400
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010800 	.word	0x40010800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f8be 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <TIM2_IRQHandler+0x10>)
 8001502:	f001 fa47 	bl	8002994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000184 	.word	0x20000184

08001510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <USART2_IRQHandler+0x10>)
 8001516:	f001 fe7d 	bl	8003214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001cc 	.word	0x200001cc

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f002 fbf0 	bl	8003d38 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20002800 	.word	0x20002800
 8001584:	00000400 	.word	0x00000400
 8001588:	200005b0 	.word	0x200005b0
 800158c:	20000700 	.word	0x20000700

08001590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff fff8 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015a2:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015a4:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b8:	4c09      	ldr	r4, [pc, #36]	@ (80015e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f002 fbbd 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7ff facb 	bl	8000b64 <main>
  bx lr
 80015ce:	4770      	bx	lr
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80015d8:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 80015dc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80015e0:	20000700 	.word	0x20000700

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_Init+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_Init+0x28>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f923 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fe54 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f93b 	bl	80018ae <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 f903 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000074 	.word	0x20000074
 800166c:	2000007c 	.word	0x2000007c
 8001670:	20000078 	.word	0x20000078

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x1c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_IncTick+0x20>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a03      	ldr	r2, [pc, #12]	@ (8001694 <HAL_IncTick+0x20>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	2000007c 	.word	0x2000007c
 8001694:	200005b4 	.word	0x200005b4

08001698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b02      	ldr	r3, [pc, #8]	@ (80016a8 <HAL_GetTick+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	200005b4 	.word	0x200005b4

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4906      	ldr	r1, [pc, #24]	@ (8001744 <__NVIC_EnableIRQ+0x34>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff90 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff2d 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff42 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff90 	bl	800179c <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5f 	bl	8001748 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff35 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d008      	beq.n	80018f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2204      	movs	r2, #4
 80018e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e020      	b.n	8001932 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 020e 	bic.w	r2, r2, #14
 80018fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d005      	beq.n	8001960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e051      	b.n	8001a04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 020e 	bic.w	r2, r2, #14
 800196e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <HAL_DMA_Abort_IT+0xd4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d029      	beq.n	80019de <HAL_DMA_Abort_IT+0xa2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <HAL_DMA_Abort_IT+0xd8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d022      	beq.n	80019da <HAL_DMA_Abort_IT+0x9e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1f      	ldr	r2, [pc, #124]	@ (8001a18 <HAL_DMA_Abort_IT+0xdc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01a      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x98>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a1c <HAL_DMA_Abort_IT+0xe0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d012      	beq.n	80019ce <HAL_DMA_Abort_IT+0x92>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <HAL_DMA_Abort_IT+0xe4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00a      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x8c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a24 <HAL_DMA_Abort_IT+0xe8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d102      	bne.n	80019c2 <HAL_DMA_Abort_IT+0x86>
 80019bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019c0:	e00e      	b.n	80019e0 <HAL_DMA_Abort_IT+0xa4>
 80019c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019c6:	e00b      	b.n	80019e0 <HAL_DMA_Abort_IT+0xa4>
 80019c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019cc:	e008      	b.n	80019e0 <HAL_DMA_Abort_IT+0xa4>
 80019ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d2:	e005      	b.n	80019e0 <HAL_DMA_Abort_IT+0xa4>
 80019d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d8:	e002      	b.n	80019e0 <HAL_DMA_Abort_IT+0xa4>
 80019da:	2310      	movs	r3, #16
 80019dc:	e000      	b.n	80019e0 <HAL_DMA_Abort_IT+0xa4>
 80019de:	2301      	movs	r3, #1
 80019e0:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_DMA_Abort_IT+0xec>)
 80019e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
    } 
  }
  return status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40020008 	.word	0x40020008
 8001a14:	4002001c 	.word	0x4002001c
 8001a18:	40020030 	.word	0x40020030
 8001a1c:	40020044 	.word	0x40020044
 8001a20:	40020058 	.word	0x40020058
 8001a24:	4002006c 	.word	0x4002006c
 8001a28:	40020000 	.word	0x40020000

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b08b      	sub	sp, #44	@ 0x2c
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e161      	b.n	8001d04 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a40:	2201      	movs	r2, #1
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8150 	bne.w	8001cfe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a97      	ldr	r2, [pc, #604]	@ (8001cc0 <HAL_GPIO_Init+0x294>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d05e      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a68:	4a95      	ldr	r2, [pc, #596]	@ (8001cc0 <HAL_GPIO_Init+0x294>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d875      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a6e:	4a95      	ldr	r2, [pc, #596]	@ (8001cc4 <HAL_GPIO_Init+0x298>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d058      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a74:	4a93      	ldr	r2, [pc, #588]	@ (8001cc4 <HAL_GPIO_Init+0x298>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d86f      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a7a:	4a93      	ldr	r2, [pc, #588]	@ (8001cc8 <HAL_GPIO_Init+0x29c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d052      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a80:	4a91      	ldr	r2, [pc, #580]	@ (8001cc8 <HAL_GPIO_Init+0x29c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d869      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a86:	4a91      	ldr	r2, [pc, #580]	@ (8001ccc <HAL_GPIO_Init+0x2a0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d04c      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a8c:	4a8f      	ldr	r2, [pc, #572]	@ (8001ccc <HAL_GPIO_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d863      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a92:	4a8f      	ldr	r2, [pc, #572]	@ (8001cd0 <HAL_GPIO_Init+0x2a4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d046      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a98:	4a8d      	ldr	r2, [pc, #564]	@ (8001cd0 <HAL_GPIO_Init+0x2a4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d85d      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d82a      	bhi.n	8001af8 <HAL_GPIO_Init+0xcc>
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d859      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <HAL_GPIO_Init+0x80>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001b27 	.word	0x08001b27
 8001ab0:	08001b01 	.word	0x08001b01
 8001ab4:	08001b13 	.word	0x08001b13
 8001ab8:	08001b55 	.word	0x08001b55
 8001abc:	08001b5b 	.word	0x08001b5b
 8001ac0:	08001b5b 	.word	0x08001b5b
 8001ac4:	08001b5b 	.word	0x08001b5b
 8001ac8:	08001b5b 	.word	0x08001b5b
 8001acc:	08001b5b 	.word	0x08001b5b
 8001ad0:	08001b5b 	.word	0x08001b5b
 8001ad4:	08001b5b 	.word	0x08001b5b
 8001ad8:	08001b5b 	.word	0x08001b5b
 8001adc:	08001b5b 	.word	0x08001b5b
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b5b 	.word	0x08001b5b
 8001ae8:	08001b5b 	.word	0x08001b5b
 8001aec:	08001b5b 	.word	0x08001b5b
 8001af0:	08001b09 	.word	0x08001b09
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	4a76      	ldr	r2, [pc, #472]	@ (8001cd4 <HAL_GPIO_Init+0x2a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001afe:	e02c      	b.n	8001b5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e029      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e024      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	3308      	adds	r3, #8
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e01f      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	330c      	adds	r3, #12
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e01a      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e013      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	611a      	str	r2, [r3, #16]
          break;
 8001b46:	e009      	b.n	8001b5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	615a      	str	r2, [r3, #20]
          break;
 8001b52:	e003      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          break;
 8001b5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2bff      	cmp	r3, #255	@ 0xff
 8001b60:	d801      	bhi.n	8001b66 <HAL_GPIO_Init+0x13a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_Init+0x13e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	@ 0xff
 8001b70:	d802      	bhi.n	8001b78 <HAL_GPIO_Init+0x14c>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x152>
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	3b08      	subs	r3, #8
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	210f      	movs	r1, #15
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	6a39      	ldr	r1, [r7, #32]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80a9 	beq.w	8001cfe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc4:	4a45      	ldr	r2, [pc, #276]	@ (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce0 <HAL_GPIO_Init+0x2b4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce4 <HAL_GPIO_Init+0x2b8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1d8>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_Init+0x1e2>
 8001c04:	2303      	movs	r3, #3
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x1e2>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_Init+0x1e2>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1e:	492f      	ldr	r1, [pc, #188]	@ (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c38:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	492b      	ldr	r1, [pc, #172]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c46:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4927      	ldr	r1, [pc, #156]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4921      	ldr	r1, [pc, #132]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	491d      	ldr	r1, [pc, #116]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4917      	ldr	r1, [pc, #92]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4913      	ldr	r1, [pc, #76]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01f      	beq.n	8001cf0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	490d      	ldr	r1, [pc, #52]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e01f      	b.n	8001cfe <HAL_GPIO_Init+0x2d2>
 8001cbe:	bf00      	nop
 8001cc0:	10320000 	.word	0x10320000
 8001cc4:	10310000 	.word	0x10310000
 8001cc8:	10220000 	.word	0x10220000
 8001ccc:	10210000 	.word	0x10210000
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4909      	ldr	r1, [pc, #36]	@ (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f47f ae96 	bne.w	8001a40 <HAL_GPIO_Init+0x14>
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	@ 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e001      	b.n	8001d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	887a      	ldrh	r2, [r7, #2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e12b      	b.n	800201e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fa9a 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e18:	f000 fcda 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a81      	ldr	r2, [pc, #516]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d807      	bhi.n	8001e38 <HAL_I2C_Init+0x84>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a80      	ldr	r2, [pc, #512]	@ (800202c <HAL_I2C_Init+0x278>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e006      	b.n	8001e46 <HAL_I2C_Init+0x92>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002030 <HAL_I2C_Init+0x27c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e7      	b.n	800201e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a78      	ldr	r2, [pc, #480]	@ (8002034 <HAL_I2C_Init+0x280>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d802      	bhi.n	8001e88 <HAL_I2C_Init+0xd4>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3301      	adds	r3, #1
 8001e86:	e009      	b.n	8001e9c <HAL_I2C_Init+0xe8>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_I2C_Init+0x284>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	495c      	ldr	r1, [pc, #368]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d819      	bhi.n	8001ef0 <HAL_I2C_Init+0x13c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e59      	subs	r1, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_I2C_Init+0x138>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e59      	subs	r1, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	e051      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e04f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_I2C_Init+0x168>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e012      	b.n	8001f42 <HAL_I2C_Init+0x18e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x196>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e022      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <HAL_I2C_Init+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e58      	subs	r0, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	440b      	add	r3, r1
 8001f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6809      	ldr	r1, [r1, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6911      	ldr	r1, [r2, #16]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	000186a0 	.word	0x000186a0
 800202c:	001e847f 	.word	0x001e847f
 8002030:	003d08ff 	.word	0x003d08ff
 8002034:	431bde83 	.word	0x431bde83
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e272      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8087 	beq.w	800216a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800205c:	4b92      	ldr	r3, [pc, #584]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b04      	cmp	r3, #4
 8002066:	d00c      	beq.n	8002082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002068:	4b8f      	ldr	r3, [pc, #572]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d112      	bne.n	800209a <HAL_RCC_OscConfig+0x5e>
 8002074:	4b8c      	ldr	r3, [pc, #560]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002080:	d10b      	bne.n	800209a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002082:	4b89      	ldr	r3, [pc, #548]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d06c      	beq.n	8002168 <HAL_RCC_OscConfig+0x12c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d168      	bne.n	8002168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e24c      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x76>
 80020a4:	4b80      	ldr	r3, [pc, #512]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a7f      	ldr	r2, [pc, #508]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e02e      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b7b      	ldr	r3, [pc, #492]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7a      	ldr	r2, [pc, #488]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b78      	ldr	r3, [pc, #480]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a77      	ldr	r2, [pc, #476]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0xbc>
 80020de:	4b72      	ldr	r3, [pc, #456]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a71      	ldr	r2, [pc, #452]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6f      	ldr	r3, [pc, #444]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6e      	ldr	r2, [pc, #440]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020f8:	4b6b      	ldr	r3, [pc, #428]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6a      	ldr	r2, [pc, #424]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b68      	ldr	r3, [pc, #416]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a67      	ldr	r2, [pc, #412]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fabe 	bl	8001698 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff faba 	bl	8001698 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e200      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b5d      	ldr	r3, [pc, #372]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xe4>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff faaa 	bl	8001698 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff faa6 	bl	8001698 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	@ 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1ec      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b53      	ldr	r3, [pc, #332]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x10c>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002176:	4b4c      	ldr	r3, [pc, #304]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002182:	4b49      	ldr	r3, [pc, #292]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d11c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x18c>
 800218e:	4b46      	ldr	r3, [pc, #280]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1c0      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4939      	ldr	r1, [pc, #228]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	e03a      	b.n	800223e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <HAL_RCC_OscConfig+0x270>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff fa5f 	bl	8001698 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fa5b 	bl	8001698 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1a1      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4927      	ldr	r1, [pc, #156]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <HAL_RCC_OscConfig+0x270>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fa3e 	bl	8001698 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fa3a 	bl	8001698 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e180      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03a      	beq.n	80022c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fa1e 	bl	8001698 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa1a 	bl	8001698 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e160      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 face 	bl	8002820 <RCC_Delay>
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff fa04 	bl	8001698 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fa00 	bl	8001698 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d908      	bls.n	80022b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e146      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	42420000 	.word	0x42420000
 80022b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b92      	ldr	r3, [pc, #584]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e9      	bne.n	8002294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a6 	beq.w	800241a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a87      	ldr	r2, [pc, #540]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b82      	ldr	r3, [pc, #520]	@ (8002504 <HAL_RCC_OscConfig+0x4c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b7f      	ldr	r3, [pc, #508]	@ (8002504 <HAL_RCC_OscConfig+0x4c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7e      	ldr	r2, [pc, #504]	@ (8002504 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff f9c1 	bl	8001698 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff f9bd 	bl	8001698 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	@ 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e103      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b75      	ldr	r3, [pc, #468]	@ (8002504 <HAL_RCC_OscConfig+0x4c8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x312>
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a6e      	ldr	r2, [pc, #440]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e02d      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002356:	4b6a      	ldr	r3, [pc, #424]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a69      	ldr	r2, [pc, #420]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	4b67      	ldr	r3, [pc, #412]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a66      	ldr	r2, [pc, #408]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x356>
 8002378:	4b61      	ldr	r3, [pc, #388]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a60      	ldr	r2, [pc, #384]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 8002392:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a5a      	ldr	r2, [pc, #360]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	4b58      	ldr	r3, [pc, #352]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a57      	ldr	r2, [pc, #348]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff f971 	bl	8001698 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff f96d 	bl	8001698 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0b1      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x37e>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f95b 	bl	8001698 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff f957 	bl	8001698 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e09b      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b3c      	ldr	r3, [pc, #240]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a3b      	ldr	r2, [pc, #236]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d061      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d146      	bne.n	80024c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <HAL_RCC_OscConfig+0x4cc>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff f92b 	bl	8001698 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f927 	bl	8001698 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e06d      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	4b29      	ldr	r3, [pc, #164]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800246c:	d108      	bne.n	8002480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4921      	ldr	r1, [pc, #132]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a19      	ldr	r1, [r3, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	430b      	orrs	r3, r1
 8002492:	491b      	ldr	r1, [pc, #108]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff f8fb 	bl	8001698 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff f8f7 	bl	8001698 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e03d      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x46a>
 80024c4:	e035      	b.n	8002532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f8e4 	bl	8001698 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f8e0 	bl	8001698 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e026      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x498>
 80024f2:	e01e      	b.n	8002532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e019      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x500>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0d0      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b6a      	ldr	r3, [pc, #424]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d910      	bls.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b67      	ldr	r3, [pc, #412]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4965      	ldr	r1, [pc, #404]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4b59      	ldr	r3, [pc, #356]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a58      	ldr	r2, [pc, #352]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	494d      	ldr	r1, [pc, #308]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d040      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d115      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b41      	ldr	r3, [pc, #260]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e073      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4936      	ldr	r1, [pc, #216]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7ff f832 	bl	8001698 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff f82e 	bl	8001698 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e053      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d210      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4922      	ldr	r1, [pc, #136]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4916      	ldr	r1, [pc, #88]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490e      	ldr	r1, [pc, #56]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f821 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490a      	ldr	r1, [pc, #40]	@ (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <HAL_RCC_ClockConfig+0x1cc>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x1d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe ff90 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	0800469c 	.word	0x0800469c
 800270c:	20000074 	.word	0x20000074
 8002710:	20000078 	.word	0x20000078

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x30>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x36>
 8002742:	e027      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	e027      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0c5b      	lsrs	r3, r3, #17
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	4a11      	ldr	r2, [pc, #68]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002776:	fb03 f202 	mul.w	r2, r3, r2
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e004      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	613b      	str	r3, [r7, #16]
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002796:	613b      	str	r3, [r7, #16]
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	693b      	ldr	r3, [r7, #16]
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	007a1200 	.word	0x007a1200
 80027b0:	080046b4 	.word	0x080046b4
 80027b4:	080046c4 	.word	0x080046c4
 80027b8:	003d0900 	.word	0x003d0900

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b02      	ldr	r3, [pc, #8]	@ (80027cc <HAL_RCC_GetHCLKFreq+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000074 	.word	0x20000074

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d4:	f7ff fff2 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	@ (80027f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	080046ac 	.word	0x080046ac

080027f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027fc:	f7ff ffde 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	080046ac 	.word	0x080046ac

08002820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <RCC_Delay+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <RCC_Delay+0x38>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800283c:	bf00      	nop
  }
  while (Delay --);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <RCC_Delay+0x1c>
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000074 	.word	0x20000074
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e041      	b.n	80028f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fd98 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 fa56 	bl	8002d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d001      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e035      	b.n	8002980 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a16      	ldr	r2, [pc, #88]	@ (800298c <HAL_TIM_Base_Start_IT+0x90>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x4e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293e:	d004      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x4e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <HAL_TIM_Base_Start_IT+0x94>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d111      	bne.n	800296e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b06      	cmp	r3, #6
 800295a:	d010      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	e007      	b.n	800297e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400

08002994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0202 	mvn.w	r2, #2
 80029c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f998 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f98b 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f99a 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0204 	mvn.w	r2, #4
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f972 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f965 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f974 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0208 	mvn.w	r2, #8
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f94c 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f93f 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f94e 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0210 	mvn.w	r2, #16
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f926 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f919 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f928 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00c      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0201 	mvn.w	r2, #1
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe f992 	bl	8000e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa6f 	bl	8003002 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8f8 	bl	8002d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0220 	mvn.w	r2, #32
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa42 	bl	8002ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_ConfigClockSource+0x1c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0b4      	b.n	8002cfa <HAL_TIM_ConfigClockSource+0x186>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bc8:	d03e      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0xd4>
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bce:	f200 8087 	bhi.w	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd6:	f000 8086 	beq.w	8002ce6 <HAL_TIM_ConfigClockSource+0x172>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bde:	d87f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b70      	cmp	r3, #112	@ 0x70
 8002be2:	d01a      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xa6>
 8002be4:	2b70      	cmp	r3, #112	@ 0x70
 8002be6:	d87b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b60      	cmp	r3, #96	@ 0x60
 8002bea:	d050      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x11a>
 8002bec:	2b60      	cmp	r3, #96	@ 0x60
 8002bee:	d877      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b50      	cmp	r3, #80	@ 0x50
 8002bf2:	d03c      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0xfa>
 8002bf4:	2b50      	cmp	r3, #80	@ 0x50
 8002bf6:	d873      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b40      	cmp	r3, #64	@ 0x40
 8002bfa:	d058      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x13a>
 8002bfc:	2b40      	cmp	r3, #64	@ 0x40
 8002bfe:	d86f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b30      	cmp	r3, #48	@ 0x30
 8002c02:	d064      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c04:	2b30      	cmp	r3, #48	@ 0x30
 8002c06:	d86b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d060      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d867      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05c      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d05a      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	e062      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c2a:	f000 f96a 	bl	8002f02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
      break;
 8002c46:	e04f      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	f000 f953 	bl	8002f02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c6a:	609a      	str	r2, [r3, #8]
      break;
 8002c6c:	e03c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f8ca 	bl	8002e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2150      	movs	r1, #80	@ 0x50
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f921 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e02c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f8e8 	bl	8002e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2160      	movs	r1, #96	@ 0x60
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f911 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002cac:	e01c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f8aa 	bl	8002e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2140      	movs	r1, #64	@ 0x40
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f901 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e00c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f000 f8f8 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002cde:	e003      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e0c <TIM_Base_SetConfig+0xc0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0x28>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0x28>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a28      	ldr	r2, [pc, #160]	@ (8002e10 <TIM_Base_SetConfig+0xc4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d108      	bne.n	8002d86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a20      	ldr	r2, [pc, #128]	@ (8002e0c <TIM_Base_SetConfig+0xc0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <TIM_Base_SetConfig+0x52>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d94:	d003      	beq.n	8002d9e <TIM_Base_SetConfig+0x52>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	@ (8002e10 <TIM_Base_SetConfig+0xc4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <TIM_Base_SetConfig+0xc0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]
  }
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40000400 	.word	0x40000400

08002e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f023 0201 	bic.w	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f023 030a 	bic.w	r3, r3, #10
 8002e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0210 	bic.w	r2, r3, #16
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	031b      	lsls	r3, r3, #12
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002eac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	621a      	str	r2, [r3, #32]
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f043 0307 	orr.w	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b087      	sub	sp, #28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	021a      	lsls	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	609a      	str	r2, [r3, #8]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e041      	b.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a10      	ldr	r2, [pc, #64]	@ (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d10c      	bne.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400

08002ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe f9e0 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	@ 0x24
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fdb7 	bl	8003bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d175      	bne.n	80031c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_Transmit+0x2c>
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e06e      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	@ 0x21
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f2:	f7fe fad1 	bl	8001698 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	88fa      	ldrh	r2, [r7, #6]
 8003102:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310c:	d108      	bne.n	8003120 <HAL_UART_Transmit+0x6c>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e003      	b.n	8003128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003128:	e02e      	b.n	8003188 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2180      	movs	r1, #128	@ 0x80
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fb1c 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e03a      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3302      	adds	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	e007      	b.n	800317a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3301      	adds	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1cb      	bne.n	800312a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2140      	movs	r1, #64	@ 0x40
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fae8 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e006      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	4613      	mov	r3, r2
 80031d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d112      	bne.n	800320a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Receive_IT+0x26>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e00b      	b.n	800320c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fb0f 	bl	8003824 <UART_Start_Receive_IT>
 8003206:	4603      	mov	r3, r0
 8003208:	e000      	b.n	800320c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0ba      	sub	sp, #232	@ 0xe8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x66>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fbec 	bl	8003a50 <UART_Receive_IT>
      return;
 8003278:	e25b      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800327a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80de 	beq.w	8003440 <HAL_UART_IRQHandler+0x22c>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003294:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80d1 	beq.w	8003440 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_UART_IRQHandler+0xae>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xd2>
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d011      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
 8003316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 81f2 	beq.w	8003728 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_UART_IRQHandler+0x14e>
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fb77 	bl	8003a50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_UART_IRQHandler+0x17a>
 8003386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04f      	beq.n	800342e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa81 	bl	8003896 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d041      	beq.n	8003426 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1d9      	bne.n	80033a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d013      	beq.n	800341e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	4a7e      	ldr	r2, [pc, #504]	@ (80035f4 <HAL_UART_IRQHandler+0x3e0>)
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fa9a 	bl	800193c <HAL_DMA_Abort_IT>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003418:	4610      	mov	r0, r2
 800341a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	e00e      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f993 	bl	800374a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	e00a      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f98f 	bl	800374a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e006      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f98b 	bl	800374a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800343a:	e175      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	bf00      	nop
    return;
 800343e:	e173      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 814f 	bne.w	80036e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8148 	beq.w	80036e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8141 	beq.w	80036e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b6 	beq.w	80035f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8145 	beq.w	800372c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034aa:	429a      	cmp	r2, r3
 80034ac:	f080 813e 	bcs.w	800372c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	f000 8088 	beq.w	80035d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1d9      	bne.n	80034c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003520:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3314      	adds	r3, #20
 8003530:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003534:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003538:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800353c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e1      	bne.n	8003510 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800355c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800355e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003570:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003572:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003576:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800357e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e3      	bne.n	800354c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a4:	f023 0310 	bic.w	r3, r3, #16
 80035a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e3      	bne.n	8003592 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe f979 	bl	80018c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8b6 	bl	800375c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035f0:	e09c      	b.n	800372c <HAL_UART_IRQHandler+0x518>
 80035f2:	bf00      	nop
 80035f4:	0800395b 	.word	0x0800395b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003600:	b29b      	uxth	r3, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 808e 	beq.w	8003730 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8089 	beq.w	8003730 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003642:	647a      	str	r2, [r7, #68]	@ 0x44
 8003644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e3      	bne.n	800361e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	623b      	str	r3, [r7, #32]
   return(result);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800367a:	633a      	str	r2, [r7, #48]	@ 0x30
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e3      	bne.n	8003656 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0310 	bic.w	r3, r3, #16
 80036b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e3      	bne.n	800369c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f83b 	bl	800375c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036e6:	e023      	b.n	8003730 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_UART_IRQHandler+0x4f4>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f93e 	bl	8003982 <UART_Transmit_IT>
    return;
 8003706:	e014      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <HAL_UART_IRQHandler+0x51e>
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f97d 	bl	8003a20 <UART_EndTransmit_IT>
    return;
 8003726:	e004      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
    return;
 8003728:	bf00      	nop
 800372a:	e002      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
      return;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
      return;
 8003730:	bf00      	nop
  }
}
 8003732:	37e8      	adds	r7, #232	@ 0xe8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003782:	e03b      	b.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d037      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378c:	f7fd ff84 	bl	8001698 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	6a3a      	ldr	r2, [r7, #32]
 8003798:	429a      	cmp	r2, r3
 800379a:	d302      	bcc.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e03a      	b.n	800381c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d023      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b80      	cmp	r3, #128	@ 0x80
 80037b8:	d020      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d01d      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d116      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f856 	bl	8003896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2208      	movs	r2, #8
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e00f      	b.n	800381c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	429a      	cmp	r2, r3
 8003818:	d0b4      	beq.n	8003784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2222      	movs	r2, #34	@ 0x22
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003868:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
 8003878:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003896:	b480      	push	{r7}
 8003898:	b095      	sub	sp, #84	@ 0x54
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038be:	643a      	str	r2, [r7, #64]	@ 0x40
 80038c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e5      	bne.n	800389e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3314      	adds	r3, #20
 80038f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	2b01      	cmp	r3, #1
 800390c:	d119      	bne.n	8003942 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	60bb      	str	r3, [r7, #8]
   return(result);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f023 0310 	bic.w	r3, r3, #16
 8003924:	647b      	str	r3, [r7, #68]	@ 0x44
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392e:	61ba      	str	r2, [r7, #24]
 8003930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	613b      	str	r3, [r7, #16]
   return(result);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e5      	bne.n	800390e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003950:	bf00      	nop
 8003952:	3754      	adds	r7, #84	@ 0x54
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fee8 	bl	800374a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b21      	cmp	r3, #33	@ 0x21
 8003994:	d13e      	bne.n	8003a14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399e:	d114      	bne.n	80039ca <UART_Transmit_IT+0x48>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d110      	bne.n	80039ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	1c9a      	adds	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	621a      	str	r2, [r3, #32]
 80039c8:	e008      	b.n	80039dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6211      	str	r1, [r2, #32]
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4619      	mov	r1, r3
 80039ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fe79 	bl	8003738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	@ 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b22      	cmp	r3, #34	@ 0x22
 8003a62:	f040 80ae 	bne.w	8003bc2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6e:	d117      	bne.n	8003aa0 <UART_Receive_IT+0x50>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d113      	bne.n	8003aa0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a9e:	e026      	b.n	8003aee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab2:	d007      	beq.n	8003ac4 <UART_Receive_IT+0x74>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <UART_Receive_IT+0x82>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e008      	b.n	8003ae4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4619      	mov	r1, r3
 8003afc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d15d      	bne.n	8003bbe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0220 	bic.w	r2, r2, #32
 8003b10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d135      	bne.n	8003bb4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6e:	623a      	str	r2, [r7, #32]
 8003b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	69f9      	ldr	r1, [r7, #28]
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e5      	bne.n	8003b4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d10a      	bne.n	8003ba6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff fdd5 	bl	800375c <HAL_UARTEx_RxEventCallback>
 8003bb2:	e002      	b.n	8003bba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fd f93f 	bl	8000e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e002      	b.n	8003bc4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3730      	adds	r7, #48	@ 0x30
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c06:	f023 030c 	bic.w	r3, r3, #12
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <UART_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fde0 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	e002      	b.n	8003c42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fdc8 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	0119      	lsls	r1, r3, #4
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <UART_SetConfig+0x118>)
 8003c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2064      	movs	r0, #100	@ 0x64
 8003c82:	fb00 f303 	mul.w	r3, r0, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	@ 0x32
 8003c8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ce4 <UART_SetConfig+0x118>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c98:	4419      	add	r1, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	@ 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	@ 0x32
 8003cc4:	4a07      	ldr	r2, [pc, #28]	@ (8003ce4 <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <siprintf>:
 8003ce8:	b40e      	push	{r1, r2, r3}
 8003cea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cee:	b500      	push	{lr}
 8003cf0:	b09c      	sub	sp, #112	@ 0x70
 8003cf2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cf4:	9002      	str	r0, [sp, #8]
 8003cf6:	9006      	str	r0, [sp, #24]
 8003cf8:	9107      	str	r1, [sp, #28]
 8003cfa:	9104      	str	r1, [sp, #16]
 8003cfc:	4808      	ldr	r0, [pc, #32]	@ (8003d20 <siprintf+0x38>)
 8003cfe:	4909      	ldr	r1, [pc, #36]	@ (8003d24 <siprintf+0x3c>)
 8003d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d04:	9105      	str	r1, [sp, #20]
 8003d06:	6800      	ldr	r0, [r0, #0]
 8003d08:	a902      	add	r1, sp, #8
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	f000 f992 	bl	8004034 <_svfiprintf_r>
 8003d10:	2200      	movs	r2, #0
 8003d12:	9b02      	ldr	r3, [sp, #8]
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	b01c      	add	sp, #112	@ 0x70
 8003d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d1c:	b003      	add	sp, #12
 8003d1e:	4770      	bx	lr
 8003d20:	20000080 	.word	0x20000080
 8003d24:	ffff0208 	.word	0xffff0208

08003d28 <memset>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4402      	add	r2, r0
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <memset+0xa>
 8003d30:	4770      	bx	lr
 8003d32:	f803 1b01 	strb.w	r1, [r3], #1
 8003d36:	e7f9      	b.n	8003d2c <memset+0x4>

08003d38 <__errno>:
 8003d38:	4b01      	ldr	r3, [pc, #4]	@ (8003d40 <__errno+0x8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000080 	.word	0x20000080

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	2600      	movs	r6, #0
 8003d48:	4d0c      	ldr	r5, [pc, #48]	@ (8003d7c <__libc_init_array+0x38>)
 8003d4a:	4c0d      	ldr	r4, [pc, #52]	@ (8003d80 <__libc_init_array+0x3c>)
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	f000 fc78 	bl	8004648 <_init>
 8003d58:	2600      	movs	r6, #0
 8003d5a:	4d0a      	ldr	r5, [pc, #40]	@ (8003d84 <__libc_init_array+0x40>)
 8003d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d88 <__libc_init_array+0x44>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	08004704 	.word	0x08004704
 8003d80:	08004704 	.word	0x08004704
 8003d84:	08004704 	.word	0x08004704
 8003d88:	08004708 	.word	0x08004708

08003d8c <__retarget_lock_acquire_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__retarget_lock_release_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <_free_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4605      	mov	r5, r0
 8003d94:	2900      	cmp	r1, #0
 8003d96:	d040      	beq.n	8003e1a <_free_r+0x8a>
 8003d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9c:	1f0c      	subs	r4, r1, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfb8      	it	lt
 8003da2:	18e4      	addlt	r4, r4, r3
 8003da4:	f000 f8de 	bl	8003f64 <__malloc_lock>
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <_free_r+0x8c>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	b933      	cbnz	r3, 8003dbc <_free_r+0x2c>
 8003dae:	6063      	str	r3, [r4, #4]
 8003db0:	6014      	str	r4, [r2, #0]
 8003db2:	4628      	mov	r0, r5
 8003db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003db8:	f000 b8da 	b.w	8003f70 <__malloc_unlock>
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d908      	bls.n	8003dd2 <_free_r+0x42>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	bf01      	itttt	eq
 8003dc8:	6819      	ldreq	r1, [r3, #0]
 8003dca:	685b      	ldreq	r3, [r3, #4]
 8003dcc:	1809      	addeq	r1, r1, r0
 8003dce:	6021      	streq	r1, [r4, #0]
 8003dd0:	e7ed      	b.n	8003dae <_free_r+0x1e>
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	b10b      	cbz	r3, 8003ddc <_free_r+0x4c>
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d9fa      	bls.n	8003dd2 <_free_r+0x42>
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	1850      	adds	r0, r2, r1
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d10b      	bne.n	8003dfc <_free_r+0x6c>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	4401      	add	r1, r0
 8003de8:	1850      	adds	r0, r2, r1
 8003dea:	4283      	cmp	r3, r0
 8003dec:	6011      	str	r1, [r2, #0]
 8003dee:	d1e0      	bne.n	8003db2 <_free_r+0x22>
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4408      	add	r0, r1
 8003df6:	6010      	str	r0, [r2, #0]
 8003df8:	6053      	str	r3, [r2, #4]
 8003dfa:	e7da      	b.n	8003db2 <_free_r+0x22>
 8003dfc:	d902      	bls.n	8003e04 <_free_r+0x74>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	e7d6      	b.n	8003db2 <_free_r+0x22>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	1821      	adds	r1, r4, r0
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	bf01      	itttt	eq
 8003e0c:	6819      	ldreq	r1, [r3, #0]
 8003e0e:	685b      	ldreq	r3, [r3, #4]
 8003e10:	1809      	addeq	r1, r1, r0
 8003e12:	6021      	streq	r1, [r4, #0]
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6054      	str	r4, [r2, #4]
 8003e18:	e7cb      	b.n	8003db2 <_free_r+0x22>
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	200006fc 	.word	0x200006fc

08003e20 <sbrk_aligned>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4e0f      	ldr	r6, [pc, #60]	@ (8003e60 <sbrk_aligned+0x40>)
 8003e24:	460c      	mov	r4, r1
 8003e26:	6831      	ldr	r1, [r6, #0]
 8003e28:	4605      	mov	r5, r0
 8003e2a:	b911      	cbnz	r1, 8003e32 <sbrk_aligned+0x12>
 8003e2c:	f000 fbaa 	bl	8004584 <_sbrk_r>
 8003e30:	6030      	str	r0, [r6, #0]
 8003e32:	4621      	mov	r1, r4
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 fba5 	bl	8004584 <_sbrk_r>
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d103      	bne.n	8003e46 <sbrk_aligned+0x26>
 8003e3e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e42:	4620      	mov	r0, r4
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
 8003e46:	1cc4      	adds	r4, r0, #3
 8003e48:	f024 0403 	bic.w	r4, r4, #3
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d0f8      	beq.n	8003e42 <sbrk_aligned+0x22>
 8003e50:	1a21      	subs	r1, r4, r0
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 fb96 	bl	8004584 <_sbrk_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d1f2      	bne.n	8003e42 <sbrk_aligned+0x22>
 8003e5c:	e7ef      	b.n	8003e3e <sbrk_aligned+0x1e>
 8003e5e:	bf00      	nop
 8003e60:	200006f8 	.word	0x200006f8

08003e64 <_malloc_r>:
 8003e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e68:	1ccd      	adds	r5, r1, #3
 8003e6a:	f025 0503 	bic.w	r5, r5, #3
 8003e6e:	3508      	adds	r5, #8
 8003e70:	2d0c      	cmp	r5, #12
 8003e72:	bf38      	it	cc
 8003e74:	250c      	movcc	r5, #12
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	4606      	mov	r6, r0
 8003e7a:	db01      	blt.n	8003e80 <_malloc_r+0x1c>
 8003e7c:	42a9      	cmp	r1, r5
 8003e7e:	d904      	bls.n	8003e8a <_malloc_r+0x26>
 8003e80:	230c      	movs	r3, #12
 8003e82:	6033      	str	r3, [r6, #0]
 8003e84:	2000      	movs	r0, #0
 8003e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f60 <_malloc_r+0xfc>
 8003e8e:	f000 f869 	bl	8003f64 <__malloc_lock>
 8003e92:	f8d8 3000 	ldr.w	r3, [r8]
 8003e96:	461c      	mov	r4, r3
 8003e98:	bb44      	cbnz	r4, 8003eec <_malloc_r+0x88>
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7ff ffbf 	bl	8003e20 <sbrk_aligned>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	d158      	bne.n	8003f5a <_malloc_r+0xf6>
 8003ea8:	f8d8 4000 	ldr.w	r4, [r8]
 8003eac:	4627      	mov	r7, r4
 8003eae:	2f00      	cmp	r7, #0
 8003eb0:	d143      	bne.n	8003f3a <_malloc_r+0xd6>
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	d04b      	beq.n	8003f4e <_malloc_r+0xea>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	4639      	mov	r1, r7
 8003eba:	4630      	mov	r0, r6
 8003ebc:	eb04 0903 	add.w	r9, r4, r3
 8003ec0:	f000 fb60 	bl	8004584 <_sbrk_r>
 8003ec4:	4581      	cmp	r9, r0
 8003ec6:	d142      	bne.n	8003f4e <_malloc_r+0xea>
 8003ec8:	6821      	ldr	r1, [r4, #0]
 8003eca:	4630      	mov	r0, r6
 8003ecc:	1a6d      	subs	r5, r5, r1
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7ff ffa6 	bl	8003e20 <sbrk_aligned>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d03a      	beq.n	8003f4e <_malloc_r+0xea>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	442b      	add	r3, r5
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	f8d8 3000 	ldr.w	r3, [r8]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	bb62      	cbnz	r2, 8003f40 <_malloc_r+0xdc>
 8003ee6:	f8c8 7000 	str.w	r7, [r8]
 8003eea:	e00f      	b.n	8003f0c <_malloc_r+0xa8>
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	1b52      	subs	r2, r2, r5
 8003ef0:	d420      	bmi.n	8003f34 <_malloc_r+0xd0>
 8003ef2:	2a0b      	cmp	r2, #11
 8003ef4:	d917      	bls.n	8003f26 <_malloc_r+0xc2>
 8003ef6:	1961      	adds	r1, r4, r5
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	6025      	str	r5, [r4, #0]
 8003efc:	bf18      	it	ne
 8003efe:	6059      	strne	r1, [r3, #4]
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	bf08      	it	eq
 8003f04:	f8c8 1000 	streq.w	r1, [r8]
 8003f08:	5162      	str	r2, [r4, r5]
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	f000 f82f 	bl	8003f70 <__malloc_unlock>
 8003f12:	f104 000b 	add.w	r0, r4, #11
 8003f16:	1d23      	adds	r3, r4, #4
 8003f18:	f020 0007 	bic.w	r0, r0, #7
 8003f1c:	1ac2      	subs	r2, r0, r3
 8003f1e:	bf1c      	itt	ne
 8003f20:	1a1b      	subne	r3, r3, r0
 8003f22:	50a3      	strne	r3, [r4, r2]
 8003f24:	e7af      	b.n	8003e86 <_malloc_r+0x22>
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	bf0c      	ite	eq
 8003f2c:	f8c8 2000 	streq.w	r2, [r8]
 8003f30:	605a      	strne	r2, [r3, #4]
 8003f32:	e7eb      	b.n	8003f0c <_malloc_r+0xa8>
 8003f34:	4623      	mov	r3, r4
 8003f36:	6864      	ldr	r4, [r4, #4]
 8003f38:	e7ae      	b.n	8003e98 <_malloc_r+0x34>
 8003f3a:	463c      	mov	r4, r7
 8003f3c:	687f      	ldr	r7, [r7, #4]
 8003f3e:	e7b6      	b.n	8003eae <_malloc_r+0x4a>
 8003f40:	461a      	mov	r2, r3
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	d1fb      	bne.n	8003f40 <_malloc_r+0xdc>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6053      	str	r3, [r2, #4]
 8003f4c:	e7de      	b.n	8003f0c <_malloc_r+0xa8>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	4630      	mov	r0, r6
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	f000 f80c 	bl	8003f70 <__malloc_unlock>
 8003f58:	e794      	b.n	8003e84 <_malloc_r+0x20>
 8003f5a:	6005      	str	r5, [r0, #0]
 8003f5c:	e7d6      	b.n	8003f0c <_malloc_r+0xa8>
 8003f5e:	bf00      	nop
 8003f60:	200006fc 	.word	0x200006fc

08003f64 <__malloc_lock>:
 8003f64:	4801      	ldr	r0, [pc, #4]	@ (8003f6c <__malloc_lock+0x8>)
 8003f66:	f7ff bf11 	b.w	8003d8c <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	200006f4 	.word	0x200006f4

08003f70 <__malloc_unlock>:
 8003f70:	4801      	ldr	r0, [pc, #4]	@ (8003f78 <__malloc_unlock+0x8>)
 8003f72:	f7ff bf0c 	b.w	8003d8e <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	200006f4 	.word	0x200006f4

08003f7c <__ssputs_r>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	461f      	mov	r7, r3
 8003f82:	688e      	ldr	r6, [r1, #8]
 8003f84:	4682      	mov	sl, r0
 8003f86:	42be      	cmp	r6, r7
 8003f88:	460c      	mov	r4, r1
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	680b      	ldr	r3, [r1, #0]
 8003f8e:	d82d      	bhi.n	8003fec <__ssputs_r+0x70>
 8003f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f98:	d026      	beq.n	8003fe8 <__ssputs_r+0x6c>
 8003f9a:	6965      	ldr	r5, [r4, #20]
 8003f9c:	6909      	ldr	r1, [r1, #16]
 8003f9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fa2:	eba3 0901 	sub.w	r9, r3, r1
 8003fa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003faa:	1c7b      	adds	r3, r7, #1
 8003fac:	444b      	add	r3, r9
 8003fae:	106d      	asrs	r5, r5, #1
 8003fb0:	429d      	cmp	r5, r3
 8003fb2:	bf38      	it	cc
 8003fb4:	461d      	movcc	r5, r3
 8003fb6:	0553      	lsls	r3, r2, #21
 8003fb8:	d527      	bpl.n	800400a <__ssputs_r+0x8e>
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7ff ff52 	bl	8003e64 <_malloc_r>
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	b360      	cbz	r0, 800401e <__ssputs_r+0xa2>
 8003fc4:	464a      	mov	r2, r9
 8003fc6:	6921      	ldr	r1, [r4, #16]
 8003fc8:	f000 fafa 	bl	80045c0 <memcpy>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	6126      	str	r6, [r4, #16]
 8003fda:	444e      	add	r6, r9
 8003fdc:	6026      	str	r6, [r4, #0]
 8003fde:	463e      	mov	r6, r7
 8003fe0:	6165      	str	r5, [r4, #20]
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	60a5      	str	r5, [r4, #8]
 8003fe8:	42be      	cmp	r6, r7
 8003fea:	d900      	bls.n	8003fee <__ssputs_r+0x72>
 8003fec:	463e      	mov	r6, r7
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	f000 faac 	bl	8004550 <memmove>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	4433      	add	r3, r6
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	462a      	mov	r2, r5
 800400c:	f000 fae6 	bl	80045dc <_realloc_r>
 8004010:	4606      	mov	r6, r0
 8004012:	2800      	cmp	r0, #0
 8004014:	d1e0      	bne.n	8003fd8 <__ssputs_r+0x5c>
 8004016:	4650      	mov	r0, sl
 8004018:	6921      	ldr	r1, [r4, #16]
 800401a:	f7ff feb9 	bl	8003d90 <_free_r>
 800401e:	230c      	movs	r3, #12
 8004020:	f8ca 3000 	str.w	r3, [sl]
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402e:	81a3      	strh	r3, [r4, #12]
 8004030:	e7e9      	b.n	8004006 <__ssputs_r+0x8a>
	...

08004034 <_svfiprintf_r>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	4698      	mov	r8, r3
 800403a:	898b      	ldrh	r3, [r1, #12]
 800403c:	4607      	mov	r7, r0
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	460d      	mov	r5, r1
 8004042:	4614      	mov	r4, r2
 8004044:	b09d      	sub	sp, #116	@ 0x74
 8004046:	d510      	bpl.n	800406a <_svfiprintf_r+0x36>
 8004048:	690b      	ldr	r3, [r1, #16]
 800404a:	b973      	cbnz	r3, 800406a <_svfiprintf_r+0x36>
 800404c:	2140      	movs	r1, #64	@ 0x40
 800404e:	f7ff ff09 	bl	8003e64 <_malloc_r>
 8004052:	6028      	str	r0, [r5, #0]
 8004054:	6128      	str	r0, [r5, #16]
 8004056:	b930      	cbnz	r0, 8004066 <_svfiprintf_r+0x32>
 8004058:	230c      	movs	r3, #12
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	b01d      	add	sp, #116	@ 0x74
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004066:	2340      	movs	r3, #64	@ 0x40
 8004068:	616b      	str	r3, [r5, #20]
 800406a:	2300      	movs	r3, #0
 800406c:	9309      	str	r3, [sp, #36]	@ 0x24
 800406e:	2320      	movs	r3, #32
 8004070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004074:	2330      	movs	r3, #48	@ 0x30
 8004076:	f04f 0901 	mov.w	r9, #1
 800407a:	f8cd 800c 	str.w	r8, [sp, #12]
 800407e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004218 <_svfiprintf_r+0x1e4>
 8004082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004086:	4623      	mov	r3, r4
 8004088:	469a      	mov	sl, r3
 800408a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800408e:	b10a      	cbz	r2, 8004094 <_svfiprintf_r+0x60>
 8004090:	2a25      	cmp	r2, #37	@ 0x25
 8004092:	d1f9      	bne.n	8004088 <_svfiprintf_r+0x54>
 8004094:	ebba 0b04 	subs.w	fp, sl, r4
 8004098:	d00b      	beq.n	80040b2 <_svfiprintf_r+0x7e>
 800409a:	465b      	mov	r3, fp
 800409c:	4622      	mov	r2, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	4638      	mov	r0, r7
 80040a2:	f7ff ff6b 	bl	8003f7c <__ssputs_r>
 80040a6:	3001      	adds	r0, #1
 80040a8:	f000 80a7 	beq.w	80041fa <_svfiprintf_r+0x1c6>
 80040ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040ae:	445a      	add	r2, fp
 80040b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80040b2:	f89a 3000 	ldrb.w	r3, [sl]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 809f 	beq.w	80041fa <_svfiprintf_r+0x1c6>
 80040bc:	2300      	movs	r3, #0
 80040be:	f04f 32ff 	mov.w	r2, #4294967295
 80040c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c6:	f10a 0a01 	add.w	sl, sl, #1
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	9307      	str	r3, [sp, #28]
 80040ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040d4:	4654      	mov	r4, sl
 80040d6:	2205      	movs	r2, #5
 80040d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040dc:	484e      	ldr	r0, [pc, #312]	@ (8004218 <_svfiprintf_r+0x1e4>)
 80040de:	f000 fa61 	bl	80045a4 <memchr>
 80040e2:	9a04      	ldr	r2, [sp, #16]
 80040e4:	b9d8      	cbnz	r0, 800411e <_svfiprintf_r+0xea>
 80040e6:	06d0      	lsls	r0, r2, #27
 80040e8:	bf44      	itt	mi
 80040ea:	2320      	movmi	r3, #32
 80040ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040f0:	0711      	lsls	r1, r2, #28
 80040f2:	bf44      	itt	mi
 80040f4:	232b      	movmi	r3, #43	@ 0x2b
 80040f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040fa:	f89a 3000 	ldrb.w	r3, [sl]
 80040fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004100:	d015      	beq.n	800412e <_svfiprintf_r+0xfa>
 8004102:	4654      	mov	r4, sl
 8004104:	2000      	movs	r0, #0
 8004106:	f04f 0c0a 	mov.w	ip, #10
 800410a:	9a07      	ldr	r2, [sp, #28]
 800410c:	4621      	mov	r1, r4
 800410e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004112:	3b30      	subs	r3, #48	@ 0x30
 8004114:	2b09      	cmp	r3, #9
 8004116:	d94b      	bls.n	80041b0 <_svfiprintf_r+0x17c>
 8004118:	b1b0      	cbz	r0, 8004148 <_svfiprintf_r+0x114>
 800411a:	9207      	str	r2, [sp, #28]
 800411c:	e014      	b.n	8004148 <_svfiprintf_r+0x114>
 800411e:	eba0 0308 	sub.w	r3, r0, r8
 8004122:	fa09 f303 	lsl.w	r3, r9, r3
 8004126:	4313      	orrs	r3, r2
 8004128:	46a2      	mov	sl, r4
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	e7d2      	b.n	80040d4 <_svfiprintf_r+0xa0>
 800412e:	9b03      	ldr	r3, [sp, #12]
 8004130:	1d19      	adds	r1, r3, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	9103      	str	r1, [sp, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfbb      	ittet	lt
 800413a:	425b      	neglt	r3, r3
 800413c:	f042 0202 	orrlt.w	r2, r2, #2
 8004140:	9307      	strge	r3, [sp, #28]
 8004142:	9307      	strlt	r3, [sp, #28]
 8004144:	bfb8      	it	lt
 8004146:	9204      	strlt	r2, [sp, #16]
 8004148:	7823      	ldrb	r3, [r4, #0]
 800414a:	2b2e      	cmp	r3, #46	@ 0x2e
 800414c:	d10a      	bne.n	8004164 <_svfiprintf_r+0x130>
 800414e:	7863      	ldrb	r3, [r4, #1]
 8004150:	2b2a      	cmp	r3, #42	@ 0x2a
 8004152:	d132      	bne.n	80041ba <_svfiprintf_r+0x186>
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	3402      	adds	r4, #2
 8004158:	1d1a      	adds	r2, r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	9203      	str	r2, [sp, #12]
 800415e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800421c <_svfiprintf_r+0x1e8>
 8004168:	2203      	movs	r2, #3
 800416a:	4650      	mov	r0, sl
 800416c:	7821      	ldrb	r1, [r4, #0]
 800416e:	f000 fa19 	bl	80045a4 <memchr>
 8004172:	b138      	cbz	r0, 8004184 <_svfiprintf_r+0x150>
 8004174:	2240      	movs	r2, #64	@ 0x40
 8004176:	9b04      	ldr	r3, [sp, #16]
 8004178:	eba0 000a 	sub.w	r0, r0, sl
 800417c:	4082      	lsls	r2, r0
 800417e:	4313      	orrs	r3, r2
 8004180:	3401      	adds	r4, #1
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004188:	2206      	movs	r2, #6
 800418a:	4825      	ldr	r0, [pc, #148]	@ (8004220 <_svfiprintf_r+0x1ec>)
 800418c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004190:	f000 fa08 	bl	80045a4 <memchr>
 8004194:	2800      	cmp	r0, #0
 8004196:	d036      	beq.n	8004206 <_svfiprintf_r+0x1d2>
 8004198:	4b22      	ldr	r3, [pc, #136]	@ (8004224 <_svfiprintf_r+0x1f0>)
 800419a:	bb1b      	cbnz	r3, 80041e4 <_svfiprintf_r+0x1b0>
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	3307      	adds	r3, #7
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	3308      	adds	r3, #8
 80041a6:	9303      	str	r3, [sp, #12]
 80041a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041aa:	4433      	add	r3, r6
 80041ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ae:	e76a      	b.n	8004086 <_svfiprintf_r+0x52>
 80041b0:	460c      	mov	r4, r1
 80041b2:	2001      	movs	r0, #1
 80041b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80041b8:	e7a8      	b.n	800410c <_svfiprintf_r+0xd8>
 80041ba:	2300      	movs	r3, #0
 80041bc:	f04f 0c0a 	mov.w	ip, #10
 80041c0:	4619      	mov	r1, r3
 80041c2:	3401      	adds	r4, #1
 80041c4:	9305      	str	r3, [sp, #20]
 80041c6:	4620      	mov	r0, r4
 80041c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041cc:	3a30      	subs	r2, #48	@ 0x30
 80041ce:	2a09      	cmp	r2, #9
 80041d0:	d903      	bls.n	80041da <_svfiprintf_r+0x1a6>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0c6      	beq.n	8004164 <_svfiprintf_r+0x130>
 80041d6:	9105      	str	r1, [sp, #20]
 80041d8:	e7c4      	b.n	8004164 <_svfiprintf_r+0x130>
 80041da:	4604      	mov	r4, r0
 80041dc:	2301      	movs	r3, #1
 80041de:	fb0c 2101 	mla	r1, ip, r1, r2
 80041e2:	e7f0      	b.n	80041c6 <_svfiprintf_r+0x192>
 80041e4:	ab03      	add	r3, sp, #12
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	462a      	mov	r2, r5
 80041ea:	4638      	mov	r0, r7
 80041ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <_svfiprintf_r+0x1f4>)
 80041ee:	a904      	add	r1, sp, #16
 80041f0:	f3af 8000 	nop.w
 80041f4:	1c42      	adds	r2, r0, #1
 80041f6:	4606      	mov	r6, r0
 80041f8:	d1d6      	bne.n	80041a8 <_svfiprintf_r+0x174>
 80041fa:	89ab      	ldrh	r3, [r5, #12]
 80041fc:	065b      	lsls	r3, r3, #25
 80041fe:	f53f af2d 	bmi.w	800405c <_svfiprintf_r+0x28>
 8004202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004204:	e72c      	b.n	8004060 <_svfiprintf_r+0x2c>
 8004206:	ab03      	add	r3, sp, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	462a      	mov	r2, r5
 800420c:	4638      	mov	r0, r7
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <_svfiprintf_r+0x1f4>)
 8004210:	a904      	add	r1, sp, #16
 8004212:	f000 f87d 	bl	8004310 <_printf_i>
 8004216:	e7ed      	b.n	80041f4 <_svfiprintf_r+0x1c0>
 8004218:	080046c6 	.word	0x080046c6
 800421c:	080046cc 	.word	0x080046cc
 8004220:	080046d0 	.word	0x080046d0
 8004224:	00000000 	.word	0x00000000
 8004228:	08003f7d 	.word	0x08003f7d

0800422c <_printf_common>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	4616      	mov	r6, r2
 8004232:	4698      	mov	r8, r3
 8004234:	688a      	ldr	r2, [r1, #8]
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	4607      	mov	r7, r0
 800423a:	4293      	cmp	r3, r2
 800423c:	bfb8      	it	lt
 800423e:	4613      	movlt	r3, r2
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004246:	460c      	mov	r4, r1
 8004248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800424c:	b10a      	cbz	r2, 8004252 <_printf_common+0x26>
 800424e:	3301      	adds	r3, #1
 8004250:	6033      	str	r3, [r6, #0]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	0699      	lsls	r1, r3, #26
 8004256:	bf42      	ittt	mi
 8004258:	6833      	ldrmi	r3, [r6, #0]
 800425a:	3302      	addmi	r3, #2
 800425c:	6033      	strmi	r3, [r6, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d106      	bne.n	8004274 <_printf_common+0x48>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	6832      	ldr	r2, [r6, #0]
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc2b      	bgt.n	80042cc <_printf_common+0xa0>
 8004274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	3b00      	subs	r3, #0
 800427c:	bf18      	it	ne
 800427e:	2301      	movne	r3, #1
 8004280:	0692      	lsls	r2, r2, #26
 8004282:	d430      	bmi.n	80042e6 <_printf_common+0xba>
 8004284:	4641      	mov	r1, r8
 8004286:	4638      	mov	r0, r7
 8004288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800428c:	47c8      	blx	r9
 800428e:	3001      	adds	r0, #1
 8004290:	d023      	beq.n	80042da <_printf_common+0xae>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	f003 0306 	and.w	r3, r3, #6
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf14      	ite	ne
 800429e:	2500      	movne	r5, #0
 80042a0:	6833      	ldreq	r3, [r6, #0]
 80042a2:	f04f 0600 	mov.w	r6, #0
 80042a6:	bf08      	it	eq
 80042a8:	68e5      	ldreq	r5, [r4, #12]
 80042aa:	f104 041a 	add.w	r4, r4, #26
 80042ae:	bf08      	it	eq
 80042b0:	1aed      	subeq	r5, r5, r3
 80042b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042b6:	bf08      	it	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	4293      	cmp	r3, r2
 80042be:	bfc4      	itt	gt
 80042c0:	1a9b      	subgt	r3, r3, r2
 80042c2:	18ed      	addgt	r5, r5, r3
 80042c4:	42b5      	cmp	r5, r6
 80042c6:	d11a      	bne.n	80042fe <_printf_common+0xd2>
 80042c8:	2000      	movs	r0, #0
 80042ca:	e008      	b.n	80042de <_printf_common+0xb2>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4652      	mov	r2, sl
 80042d0:	4641      	mov	r1, r8
 80042d2:	4638      	mov	r0, r7
 80042d4:	47c8      	blx	r9
 80042d6:	3001      	adds	r0, #1
 80042d8:	d103      	bne.n	80042e2 <_printf_common+0xb6>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	3501      	adds	r5, #1
 80042e4:	e7c1      	b.n	800426a <_printf_common+0x3e>
 80042e6:	2030      	movs	r0, #48	@ 0x30
 80042e8:	18e1      	adds	r1, r4, r3
 80042ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042f4:	4422      	add	r2, r4
 80042f6:	3302      	adds	r3, #2
 80042f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042fc:	e7c2      	b.n	8004284 <_printf_common+0x58>
 80042fe:	2301      	movs	r3, #1
 8004300:	4622      	mov	r2, r4
 8004302:	4641      	mov	r1, r8
 8004304:	4638      	mov	r0, r7
 8004306:	47c8      	blx	r9
 8004308:	3001      	adds	r0, #1
 800430a:	d0e6      	beq.n	80042da <_printf_common+0xae>
 800430c:	3601      	adds	r6, #1
 800430e:	e7d9      	b.n	80042c4 <_printf_common+0x98>

08004310 <_printf_i>:
 8004310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004314:	7e0f      	ldrb	r7, [r1, #24]
 8004316:	4691      	mov	r9, r2
 8004318:	2f78      	cmp	r7, #120	@ 0x78
 800431a:	4680      	mov	r8, r0
 800431c:	460c      	mov	r4, r1
 800431e:	469a      	mov	sl, r3
 8004320:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004326:	d807      	bhi.n	8004338 <_printf_i+0x28>
 8004328:	2f62      	cmp	r7, #98	@ 0x62
 800432a:	d80a      	bhi.n	8004342 <_printf_i+0x32>
 800432c:	2f00      	cmp	r7, #0
 800432e:	f000 80d3 	beq.w	80044d8 <_printf_i+0x1c8>
 8004332:	2f58      	cmp	r7, #88	@ 0x58
 8004334:	f000 80ba 	beq.w	80044ac <_printf_i+0x19c>
 8004338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800433c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004340:	e03a      	b.n	80043b8 <_printf_i+0xa8>
 8004342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004346:	2b15      	cmp	r3, #21
 8004348:	d8f6      	bhi.n	8004338 <_printf_i+0x28>
 800434a:	a101      	add	r1, pc, #4	@ (adr r1, 8004350 <_printf_i+0x40>)
 800434c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043bd 	.word	0x080043bd
 8004358:	08004339 	.word	0x08004339
 800435c:	08004339 	.word	0x08004339
 8004360:	08004339 	.word	0x08004339
 8004364:	08004339 	.word	0x08004339
 8004368:	080043bd 	.word	0x080043bd
 800436c:	08004339 	.word	0x08004339
 8004370:	08004339 	.word	0x08004339
 8004374:	08004339 	.word	0x08004339
 8004378:	08004339 	.word	0x08004339
 800437c:	080044bf 	.word	0x080044bf
 8004380:	080043e7 	.word	0x080043e7
 8004384:	08004479 	.word	0x08004479
 8004388:	08004339 	.word	0x08004339
 800438c:	08004339 	.word	0x08004339
 8004390:	080044e1 	.word	0x080044e1
 8004394:	08004339 	.word	0x08004339
 8004398:	080043e7 	.word	0x080043e7
 800439c:	08004339 	.word	0x08004339
 80043a0:	08004339 	.word	0x08004339
 80043a4:	08004481 	.word	0x08004481
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6032      	str	r2, [r6, #0]
 80043b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043b8:	2301      	movs	r3, #1
 80043ba:	e09e      	b.n	80044fa <_printf_i+0x1ea>
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	1d19      	adds	r1, r3, #4
 80043c2:	6031      	str	r1, [r6, #0]
 80043c4:	0606      	lsls	r6, r0, #24
 80043c6:	d501      	bpl.n	80043cc <_printf_i+0xbc>
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	e003      	b.n	80043d4 <_printf_i+0xc4>
 80043cc:	0645      	lsls	r5, r0, #25
 80043ce:	d5fb      	bpl.n	80043c8 <_printf_i+0xb8>
 80043d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	da03      	bge.n	80043e0 <_printf_i+0xd0>
 80043d8:	232d      	movs	r3, #45	@ 0x2d
 80043da:	426d      	negs	r5, r5
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e0:	230a      	movs	r3, #10
 80043e2:	4859      	ldr	r0, [pc, #356]	@ (8004548 <_printf_i+0x238>)
 80043e4:	e011      	b.n	800440a <_printf_i+0xfa>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	6833      	ldr	r3, [r6, #0]
 80043ea:	0608      	lsls	r0, r1, #24
 80043ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80043f0:	d402      	bmi.n	80043f8 <_printf_i+0xe8>
 80043f2:	0649      	lsls	r1, r1, #25
 80043f4:	bf48      	it	mi
 80043f6:	b2ad      	uxthmi	r5, r5
 80043f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043fa:	6033      	str	r3, [r6, #0]
 80043fc:	bf14      	ite	ne
 80043fe:	230a      	movne	r3, #10
 8004400:	2308      	moveq	r3, #8
 8004402:	4851      	ldr	r0, [pc, #324]	@ (8004548 <_printf_i+0x238>)
 8004404:	2100      	movs	r1, #0
 8004406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800440a:	6866      	ldr	r6, [r4, #4]
 800440c:	2e00      	cmp	r6, #0
 800440e:	bfa8      	it	ge
 8004410:	6821      	ldrge	r1, [r4, #0]
 8004412:	60a6      	str	r6, [r4, #8]
 8004414:	bfa4      	itt	ge
 8004416:	f021 0104 	bicge.w	r1, r1, #4
 800441a:	6021      	strge	r1, [r4, #0]
 800441c:	b90d      	cbnz	r5, 8004422 <_printf_i+0x112>
 800441e:	2e00      	cmp	r6, #0
 8004420:	d04b      	beq.n	80044ba <_printf_i+0x1aa>
 8004422:	4616      	mov	r6, r2
 8004424:	fbb5 f1f3 	udiv	r1, r5, r3
 8004428:	fb03 5711 	mls	r7, r3, r1, r5
 800442c:	5dc7      	ldrb	r7, [r0, r7]
 800442e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004432:	462f      	mov	r7, r5
 8004434:	42bb      	cmp	r3, r7
 8004436:	460d      	mov	r5, r1
 8004438:	d9f4      	bls.n	8004424 <_printf_i+0x114>
 800443a:	2b08      	cmp	r3, #8
 800443c:	d10b      	bne.n	8004456 <_printf_i+0x146>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	07df      	lsls	r7, r3, #31
 8004442:	d508      	bpl.n	8004456 <_printf_i+0x146>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	6861      	ldr	r1, [r4, #4]
 8004448:	4299      	cmp	r1, r3
 800444a:	bfde      	ittt	le
 800444c:	2330      	movle	r3, #48	@ 0x30
 800444e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004452:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004456:	1b92      	subs	r2, r2, r6
 8004458:	6122      	str	r2, [r4, #16]
 800445a:	464b      	mov	r3, r9
 800445c:	4621      	mov	r1, r4
 800445e:	4640      	mov	r0, r8
 8004460:	f8cd a000 	str.w	sl, [sp]
 8004464:	aa03      	add	r2, sp, #12
 8004466:	f7ff fee1 	bl	800422c <_printf_common>
 800446a:	3001      	adds	r0, #1
 800446c:	d14a      	bne.n	8004504 <_printf_i+0x1f4>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	b004      	add	sp, #16
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f043 0320 	orr.w	r3, r3, #32
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	2778      	movs	r7, #120	@ 0x78
 8004482:	4832      	ldr	r0, [pc, #200]	@ (800454c <_printf_i+0x23c>)
 8004484:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	6831      	ldr	r1, [r6, #0]
 800448c:	061f      	lsls	r7, r3, #24
 800448e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004492:	d402      	bmi.n	800449a <_printf_i+0x18a>
 8004494:	065f      	lsls	r7, r3, #25
 8004496:	bf48      	it	mi
 8004498:	b2ad      	uxthmi	r5, r5
 800449a:	6031      	str	r1, [r6, #0]
 800449c:	07d9      	lsls	r1, r3, #31
 800449e:	bf44      	itt	mi
 80044a0:	f043 0320 	orrmi.w	r3, r3, #32
 80044a4:	6023      	strmi	r3, [r4, #0]
 80044a6:	b11d      	cbz	r5, 80044b0 <_printf_i+0x1a0>
 80044a8:	2310      	movs	r3, #16
 80044aa:	e7ab      	b.n	8004404 <_printf_i+0xf4>
 80044ac:	4826      	ldr	r0, [pc, #152]	@ (8004548 <_printf_i+0x238>)
 80044ae:	e7e9      	b.n	8004484 <_printf_i+0x174>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f023 0320 	bic.w	r3, r3, #32
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	e7f6      	b.n	80044a8 <_printf_i+0x198>
 80044ba:	4616      	mov	r6, r2
 80044bc:	e7bd      	b.n	800443a <_printf_i+0x12a>
 80044be:	6833      	ldr	r3, [r6, #0]
 80044c0:	6825      	ldr	r5, [r4, #0]
 80044c2:	1d18      	adds	r0, r3, #4
 80044c4:	6961      	ldr	r1, [r4, #20]
 80044c6:	6030      	str	r0, [r6, #0]
 80044c8:	062e      	lsls	r6, r5, #24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	d501      	bpl.n	80044d2 <_printf_i+0x1c2>
 80044ce:	6019      	str	r1, [r3, #0]
 80044d0:	e002      	b.n	80044d8 <_printf_i+0x1c8>
 80044d2:	0668      	lsls	r0, r5, #25
 80044d4:	d5fb      	bpl.n	80044ce <_printf_i+0x1be>
 80044d6:	8019      	strh	r1, [r3, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	4616      	mov	r6, r2
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	e7bc      	b.n	800445a <_printf_i+0x14a>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	2100      	movs	r1, #0
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	6032      	str	r2, [r6, #0]
 80044e8:	681e      	ldr	r6, [r3, #0]
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f859 	bl	80045a4 <memchr>
 80044f2:	b108      	cbz	r0, 80044f8 <_printf_i+0x1e8>
 80044f4:	1b80      	subs	r0, r0, r6
 80044f6:	6060      	str	r0, [r4, #4]
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	2300      	movs	r3, #0
 80044fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004502:	e7aa      	b.n	800445a <_printf_i+0x14a>
 8004504:	4632      	mov	r2, r6
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	47d0      	blx	sl
 800450e:	3001      	adds	r0, #1
 8004510:	d0ad      	beq.n	800446e <_printf_i+0x15e>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	079b      	lsls	r3, r3, #30
 8004516:	d413      	bmi.n	8004540 <_printf_i+0x230>
 8004518:	68e0      	ldr	r0, [r4, #12]
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	4298      	cmp	r0, r3
 800451e:	bfb8      	it	lt
 8004520:	4618      	movlt	r0, r3
 8004522:	e7a6      	b.n	8004472 <_printf_i+0x162>
 8004524:	2301      	movs	r3, #1
 8004526:	4632      	mov	r2, r6
 8004528:	4649      	mov	r1, r9
 800452a:	4640      	mov	r0, r8
 800452c:	47d0      	blx	sl
 800452e:	3001      	adds	r0, #1
 8004530:	d09d      	beq.n	800446e <_printf_i+0x15e>
 8004532:	3501      	adds	r5, #1
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	9903      	ldr	r1, [sp, #12]
 8004538:	1a5b      	subs	r3, r3, r1
 800453a:	42ab      	cmp	r3, r5
 800453c:	dcf2      	bgt.n	8004524 <_printf_i+0x214>
 800453e:	e7eb      	b.n	8004518 <_printf_i+0x208>
 8004540:	2500      	movs	r5, #0
 8004542:	f104 0619 	add.w	r6, r4, #25
 8004546:	e7f5      	b.n	8004534 <_printf_i+0x224>
 8004548:	080046d7 	.word	0x080046d7
 800454c:	080046e8 	.word	0x080046e8

08004550 <memmove>:
 8004550:	4288      	cmp	r0, r1
 8004552:	b510      	push	{r4, lr}
 8004554:	eb01 0402 	add.w	r4, r1, r2
 8004558:	d902      	bls.n	8004560 <memmove+0x10>
 800455a:	4284      	cmp	r4, r0
 800455c:	4623      	mov	r3, r4
 800455e:	d807      	bhi.n	8004570 <memmove+0x20>
 8004560:	1e43      	subs	r3, r0, #1
 8004562:	42a1      	cmp	r1, r4
 8004564:	d008      	beq.n	8004578 <memmove+0x28>
 8004566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800456a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800456e:	e7f8      	b.n	8004562 <memmove+0x12>
 8004570:	4601      	mov	r1, r0
 8004572:	4402      	add	r2, r0
 8004574:	428a      	cmp	r2, r1
 8004576:	d100      	bne.n	800457a <memmove+0x2a>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004582:	e7f7      	b.n	8004574 <memmove+0x24>

08004584 <_sbrk_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	2300      	movs	r3, #0
 8004588:	4d05      	ldr	r5, [pc, #20]	@ (80045a0 <_sbrk_r+0x1c>)
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fc ffc8 	bl	8001524 <_sbrk>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_sbrk_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_sbrk_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	200006f0 	.word	0x200006f0

080045a4 <memchr>:
 80045a4:	4603      	mov	r3, r0
 80045a6:	b510      	push	{r4, lr}
 80045a8:	b2c9      	uxtb	r1, r1
 80045aa:	4402      	add	r2, r0
 80045ac:	4293      	cmp	r3, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	d101      	bne.n	80045b6 <memchr+0x12>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e003      	b.n	80045be <memchr+0x1a>
 80045b6:	7804      	ldrb	r4, [r0, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	428c      	cmp	r4, r1
 80045bc:	d1f6      	bne.n	80045ac <memchr+0x8>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <memcpy>:
 80045c0:	440a      	add	r2, r1
 80045c2:	4291      	cmp	r1, r2
 80045c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c8:	d100      	bne.n	80045cc <memcpy+0xc>
 80045ca:	4770      	bx	lr
 80045cc:	b510      	push	{r4, lr}
 80045ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d2:	4291      	cmp	r1, r2
 80045d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d8:	d1f9      	bne.n	80045ce <memcpy+0xe>
 80045da:	bd10      	pop	{r4, pc}

080045dc <_realloc_r>:
 80045dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e0:	4680      	mov	r8, r0
 80045e2:	4615      	mov	r5, r2
 80045e4:	460c      	mov	r4, r1
 80045e6:	b921      	cbnz	r1, 80045f2 <_realloc_r+0x16>
 80045e8:	4611      	mov	r1, r2
 80045ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ee:	f7ff bc39 	b.w	8003e64 <_malloc_r>
 80045f2:	b92a      	cbnz	r2, 8004600 <_realloc_r+0x24>
 80045f4:	f7ff fbcc 	bl	8003d90 <_free_r>
 80045f8:	2400      	movs	r4, #0
 80045fa:	4620      	mov	r0, r4
 80045fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004600:	f000 f81a 	bl	8004638 <_malloc_usable_size_r>
 8004604:	4285      	cmp	r5, r0
 8004606:	4606      	mov	r6, r0
 8004608:	d802      	bhi.n	8004610 <_realloc_r+0x34>
 800460a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800460e:	d8f4      	bhi.n	80045fa <_realloc_r+0x1e>
 8004610:	4629      	mov	r1, r5
 8004612:	4640      	mov	r0, r8
 8004614:	f7ff fc26 	bl	8003e64 <_malloc_r>
 8004618:	4607      	mov	r7, r0
 800461a:	2800      	cmp	r0, #0
 800461c:	d0ec      	beq.n	80045f8 <_realloc_r+0x1c>
 800461e:	42b5      	cmp	r5, r6
 8004620:	462a      	mov	r2, r5
 8004622:	4621      	mov	r1, r4
 8004624:	bf28      	it	cs
 8004626:	4632      	movcs	r2, r6
 8004628:	f7ff ffca 	bl	80045c0 <memcpy>
 800462c:	4621      	mov	r1, r4
 800462e:	4640      	mov	r0, r8
 8004630:	f7ff fbae 	bl	8003d90 <_free_r>
 8004634:	463c      	mov	r4, r7
 8004636:	e7e0      	b.n	80045fa <_realloc_r+0x1e>

08004638 <_malloc_usable_size_r>:
 8004638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463c:	1f18      	subs	r0, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	bfbc      	itt	lt
 8004642:	580b      	ldrlt	r3, [r1, r0]
 8004644:	18c0      	addlt	r0, r0, r3
 8004646:	4770      	bx	lr

08004648 <_init>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr

08004654 <_fini>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	bf00      	nop
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr
