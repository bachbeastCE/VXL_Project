
VLX_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002490  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800259c  0800259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c8  080025c8  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  080025c8  080025c8  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c8  080025c8  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c8  080025c8  000035c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025cc  080025cc  000035cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080025d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000018  080025e8  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  080025e8  00004410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeda  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c68  00000000  00000000  0000ef1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00010b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0a  00000000  00000000  00011860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001aa7  00000000  00000000  0001226a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f035  00000000  00000000  00013d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b9d  00000000  00000000  00022d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a78e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003550  00000000  00000000  000a7928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000aae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002584 	.word	0x08002584

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002584 	.word	0x08002584

0800014c <run_automatic>:
#include "fsm_automatic.h"
void run_automatic(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status1){
 8000150:	4b5f      	ldr	r3, [pc, #380]	@ (80002d0 <run_automatic+0x184>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0d      	cmp	r3, #13
 8000156:	d853      	bhi.n	8000200 <run_automatic+0xb4>
 8000158:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <run_automatic+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000199 	.word	0x08000199
 8000164:	08000201 	.word	0x08000201
 8000168:	08000201 	.word	0x08000201
 800016c:	08000201 	.word	0x08000201
 8000170:	08000201 	.word	0x08000201
 8000174:	08000201 	.word	0x08000201
 8000178:	08000201 	.word	0x08000201
 800017c:	08000201 	.word	0x08000201
 8000180:	08000201 	.word	0x08000201
 8000184:	08000201 	.word	0x08000201
 8000188:	08000201 	.word	0x08000201
 800018c:	080001ad 	.word	0x080001ad
 8000190:	080001c9 	.word	0x080001c9
 8000194:	080001e5 	.word	0x080001e5
				case INIT:{
						ResetLight1();
 8000198:	f000 f8a8 	bl	80002ec <ResetLight1>
						status1 = RED_LED_AUTO;
 800019c:	4b4c      	ldr	r3, [pc, #304]	@ (80002d0 <run_automatic+0x184>)
 800019e:	220b      	movs	r2, #11
 80001a0:	601a      	str	r2, [r3, #0]
						count1 = time_red;
 80001a2:	4b4c      	ldr	r3, [pc, #304]	@ (80002d4 <run_automatic+0x188>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a4c      	ldr	r2, [pc, #304]	@ (80002d8 <run_automatic+0x18c>)
 80001a8:	6013      	str	r3, [r2, #0]
						break;
 80001aa:	e030      	b.n	800020e <run_automatic+0xc2>
					}
				case RED_LED_AUTO:{
						RedLight1();
 80001ac:	f000 f8ca 	bl	8000344 <RedLight1>
						if (count1 == 0){
 80001b0:	4b49      	ldr	r3, [pc, #292]	@ (80002d8 <run_automatic+0x18c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d125      	bne.n	8000204 <run_automatic+0xb8>
							status1 = GREEN_LED_AUTO;
 80001b8:	4b45      	ldr	r3, [pc, #276]	@ (80002d0 <run_automatic+0x184>)
 80001ba:	220d      	movs	r2, #13
 80001bc:	601a      	str	r2, [r3, #0]
							count1 = time_green;
 80001be:	4b47      	ldr	r3, [pc, #284]	@ (80002dc <run_automatic+0x190>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a45      	ldr	r2, [pc, #276]	@ (80002d8 <run_automatic+0x18c>)
 80001c4:	6013      	str	r3, [r2, #0]
//							count1 = 2; //Mode
//							count2 = time_red; //Value
//							ResetLight1();
//							ResetLight2();
//						}
						break;
 80001c6:	e01d      	b.n	8000204 <run_automatic+0xb8>
					}
				case YELLOW_LED_AUTO:{
						YellowLight1();
 80001c8:	f000 f8d2 	bl	8000370 <YellowLight1>
						if (count1==0){
 80001cc:	4b42      	ldr	r3, [pc, #264]	@ (80002d8 <run_automatic+0x18c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d119      	bne.n	8000208 <run_automatic+0xbc>
							status1 = RED_LED_AUTO;
 80001d4:	4b3e      	ldr	r3, [pc, #248]	@ (80002d0 <run_automatic+0x184>)
 80001d6:	220b      	movs	r2, #11
 80001d8:	601a      	str	r2, [r3, #0]
							count1 = time_red;
 80001da:	4b3e      	ldr	r3, [pc, #248]	@ (80002d4 <run_automatic+0x188>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a3e      	ldr	r2, [pc, #248]	@ (80002d8 <run_automatic+0x18c>)
 80001e0:	6013      	str	r3, [r2, #0]
						}
						break;
 80001e2:	e011      	b.n	8000208 <run_automatic+0xbc>
					}
				case GREEN_LED_AUTO:{
						GreenLight1();
 80001e4:	f000 f8da 	bl	800039c <GreenLight1>
						if (count1==0)	{
 80001e8:	4b3b      	ldr	r3, [pc, #236]	@ (80002d8 <run_automatic+0x18c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10d      	bne.n	800020c <run_automatic+0xc0>
							status1 = YELLOW_LED_AUTO;
 80001f0:	4b37      	ldr	r3, [pc, #220]	@ (80002d0 <run_automatic+0x184>)
 80001f2:	220c      	movs	r2, #12
 80001f4:	601a      	str	r2, [r3, #0]
							count1 = time_yellow;
 80001f6:	4b3a      	ldr	r3, [pc, #232]	@ (80002e0 <run_automatic+0x194>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a37      	ldr	r2, [pc, #220]	@ (80002d8 <run_automatic+0x18c>)
 80001fc:	6013      	str	r3, [r2, #0]
						}
						break;
 80001fe:	e005      	b.n	800020c <run_automatic+0xc0>
					}
				default:
						break;
 8000200:	bf00      	nop
 8000202:	e004      	b.n	800020e <run_automatic+0xc2>
						break;
 8000204:	bf00      	nop
 8000206:	e002      	b.n	800020e <run_automatic+0xc2>
						break;
 8000208:	bf00      	nop
 800020a:	e000      	b.n	800020e <run_automatic+0xc2>
						break;
 800020c:	bf00      	nop
			}

		switch(status2){
 800020e:	4b35      	ldr	r3, [pc, #212]	@ (80002e4 <run_automatic+0x198>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b0d      	cmp	r3, #13
 8000214:	d852      	bhi.n	80002bc <run_automatic+0x170>
 8000216:	a201      	add	r2, pc, #4	@ (adr r2, 800021c <run_automatic+0xd0>)
 8000218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021c:	08000255 	.word	0x08000255
 8000220:	080002bd 	.word	0x080002bd
 8000224:	080002bd 	.word	0x080002bd
 8000228:	080002bd 	.word	0x080002bd
 800022c:	080002bd 	.word	0x080002bd
 8000230:	080002bd 	.word	0x080002bd
 8000234:	080002bd 	.word	0x080002bd
 8000238:	080002bd 	.word	0x080002bd
 800023c:	080002bd 	.word	0x080002bd
 8000240:	080002bd 	.word	0x080002bd
 8000244:	080002bd 	.word	0x080002bd
 8000248:	08000269 	.word	0x08000269
 800024c:	08000285 	.word	0x08000285
 8000250:	080002a1 	.word	0x080002a1
					case INIT:{
							ResetLight2();
 8000254:	f000 f860 	bl	8000318 <ResetLight2>
							status2 = GREEN_LED_AUTO;
 8000258:	4b22      	ldr	r3, [pc, #136]	@ (80002e4 <run_automatic+0x198>)
 800025a:	220d      	movs	r2, #13
 800025c:	601a      	str	r2, [r3, #0]
							count2 = time_green;
 800025e:	4b1f      	ldr	r3, [pc, #124]	@ (80002dc <run_automatic+0x190>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a21      	ldr	r2, [pc, #132]	@ (80002e8 <run_automatic+0x19c>)
 8000264:	6013      	str	r3, [r2, #0]
							break;
 8000266:	e030      	b.n	80002ca <run_automatic+0x17e>
						}
					case RED_LED_AUTO:{
							RedLight2();
 8000268:	f000 f8ae 	bl	80003c8 <RedLight2>
							if (count2==0){
 800026c:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <run_automatic+0x19c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d125      	bne.n	80002c0 <run_automatic+0x174>
								status2 = GREEN_LED_AUTO;
 8000274:	4b1b      	ldr	r3, [pc, #108]	@ (80002e4 <run_automatic+0x198>)
 8000276:	220d      	movs	r2, #13
 8000278:	601a      	str	r2, [r3, #0]
								count2 = time_green;
 800027a:	4b18      	ldr	r3, [pc, #96]	@ (80002dc <run_automatic+0x190>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a1a      	ldr	r2, [pc, #104]	@ (80002e8 <run_automatic+0x19c>)
 8000280:	6013      	str	r3, [r2, #0]
							}
							break;
 8000282:	e01d      	b.n	80002c0 <run_automatic+0x174>
						}
					case YELLOW_LED_AUTO:{
							YellowLight2();
 8000284:	f000 f8b6 	bl	80003f4 <YellowLight2>
							if (count2==0){
 8000288:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <run_automatic+0x19c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d119      	bne.n	80002c4 <run_automatic+0x178>
								status2 = RED_LED_AUTO;
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <run_automatic+0x198>)
 8000292:	220b      	movs	r2, #11
 8000294:	601a      	str	r2, [r3, #0]
								count2 = time_red;
 8000296:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <run_automatic+0x188>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a13      	ldr	r2, [pc, #76]	@ (80002e8 <run_automatic+0x19c>)
 800029c:	6013      	str	r3, [r2, #0]
							}
							break;
 800029e:	e011      	b.n	80002c4 <run_automatic+0x178>
						}
					case GREEN_LED_AUTO:{
							GreenLight2();
 80002a0:	f000 f8be 	bl	8000420 <GreenLight2>
							if (count2 == 0)	{
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <run_automatic+0x19c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10d      	bne.n	80002c8 <run_automatic+0x17c>
								status2 = YELLOW_LED_AUTO;
 80002ac:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <run_automatic+0x198>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	601a      	str	r2, [r3, #0]
								count2 = time_yellow;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <run_automatic+0x194>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <run_automatic+0x19c>)
 80002b8:	6013      	str	r3, [r2, #0]
							}
							break;
 80002ba:	e005      	b.n	80002c8 <run_automatic+0x17c>
						}
					default:
							break;
 80002bc:	bf00      	nop
 80002be:	e004      	b.n	80002ca <run_automatic+0x17e>
							break;
 80002c0:	bf00      	nop
 80002c2:	e002      	b.n	80002ca <run_automatic+0x17e>
							break;
 80002c4:	bf00      	nop
 80002c6:	e000      	b.n	80002ca <run_automatic+0x17e>
							break;
 80002c8:	bf00      	nop
				}
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000034 	.word	0x20000034
 80002d4:	20000000 	.word	0x20000000
 80002d8:	2000003c 	.word	0x2000003c
 80002dc:	20000008 	.word	0x20000008
 80002e0:	20000004 	.word	0x20000004
 80002e4:	20000038 	.word	0x20000038
 80002e8:	20000040 	.word	0x20000040

080002ec <ResetLight1>:

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

void ResetLight1(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2102      	movs	r1, #2
 80002f4:	4807      	ldr	r0, [pc, #28]	@ (8000314 <ResetLight1+0x28>)
 80002f6:	f000 ffcb 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2104      	movs	r1, #4
 80002fe:	4805      	ldr	r0, [pc, #20]	@ (8000314 <ResetLight1+0x28>)
 8000300:	f000 ffc6 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2108      	movs	r1, #8
 8000308:	4802      	ldr	r0, [pc, #8]	@ (8000314 <ResetLight1+0x28>)
 800030a:	f000 ffc1 	bl	8001290 <HAL_GPIO_WritePin>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800

08000318 <ResetLight2>:

void ResetLight2(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2110      	movs	r1, #16
 8000320:	4807      	ldr	r0, [pc, #28]	@ (8000340 <ResetLight2+0x28>)
 8000322:	f000 ffb5 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 ,  RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <ResetLight2+0x28>)
 800032c:	f000 ffb0 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	@ 0x40
 8000334:	4802      	ldr	r0, [pc, #8]	@ (8000340 <ResetLight2+0x28>)
 8000336:	f000 ffab 	bl	8001290 <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800

08000344 <RedLight1>:
void RedLight1(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2102      	movs	r1, #2
 800034c:	4807      	ldr	r0, [pc, #28]	@ (800036c <RedLight1+0x28>)
 800034e:	f000 ff9f 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2104      	movs	r1, #4
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <RedLight1+0x28>)
 8000358:	f000 ff9a 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	4802      	ldr	r0, [pc, #8]	@ (800036c <RedLight1+0x28>)
 8000362:	f000 ff95 	bl	8001290 <HAL_GPIO_WritePin>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800

08000370 <YellowLight1>:
void YellowLight1(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2102      	movs	r1, #2
 8000378:	4807      	ldr	r0, [pc, #28]	@ (8000398 <YellowLight1+0x28>)
 800037a:	f000 ff89 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2104      	movs	r1, #4
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <YellowLight1+0x28>)
 8000384:	f000 ff84 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2108      	movs	r1, #8
 800038c:	4802      	ldr	r0, [pc, #8]	@ (8000398 <YellowLight1+0x28>)
 800038e:	f000 ff7f 	bl	8001290 <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40010800 	.word	0x40010800

0800039c <GreenLight1>:
void GreenLight1(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_1 , RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2102      	movs	r1, #2
 80003a4:	4807      	ldr	r0, [pc, #28]	@ (80003c4 <GreenLight1+0x28>)
 80003a6:	f000 ff73 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_1 , RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2104      	movs	r1, #4
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <GreenLight1+0x28>)
 80003b0:	f000 ff6e 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_1 , SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2108      	movs	r1, #8
 80003b8:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <GreenLight1+0x28>)
 80003ba:	f000 ff69 	bl	8001290 <HAL_GPIO_WritePin>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40010800 	.word	0x40010800

080003c8 <RedLight2>:
void RedLight2(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4807      	ldr	r0, [pc, #28]	@ (80003f0 <RedLight2+0x28>)
 80003d2:	f000 ff5d 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2120      	movs	r1, #32
 80003da:	4805      	ldr	r0, [pc, #20]	@ (80003f0 <RedLight2+0x28>)
 80003dc:	f000 ff58 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2140      	movs	r1, #64	@ 0x40
 80003e4:	4802      	ldr	r0, [pc, #8]	@ (80003f0 <RedLight2+0x28>)
 80003e6:	f000 ff53 	bl	8001290 <HAL_GPIO_WritePin>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010800 	.word	0x40010800

080003f4 <YellowLight2>:
void YellowLight2(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2110      	movs	r1, #16
 80003fc:	4807      	ldr	r0, [pc, #28]	@ (800041c <YellowLight2+0x28>)
 80003fe:	f000 ff47 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2120      	movs	r1, #32
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <YellowLight2+0x28>)
 8000408:	f000 ff42 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2140      	movs	r1, #64	@ 0x40
 8000410:	4802      	ldr	r0, [pc, #8]	@ (800041c <YellowLight2+0x28>)
 8000412:	f000 ff3d 	bl	8001290 <HAL_GPIO_WritePin>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010800 	.word	0x40010800

08000420 <GreenLight2>:
void GreenLight2(){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LED_RED_2 , RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	4807      	ldr	r0, [pc, #28]	@ (8000448 <GreenLight2+0x28>)
 800042a:	f000 ff31 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_YELLOW_2 , RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	4805      	ldr	r0, [pc, #20]	@ (8000448 <GreenLight2+0x28>)
 8000434:	f000 ff2c 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LED_GREEN_2 , SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2140      	movs	r1, #64	@ 0x40
 800043c:	4802      	ldr	r0, [pc, #8]	@ (8000448 <GreenLight2+0x28>)
 800043e:	f000 ff27 	bl	8001290 <HAL_GPIO_WritePin>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010800 	.word	0x40010800

0800044c <BlinkLed>:

void BlinkLed(){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_PINK);
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	4802      	ldr	r0, [pc, #8]	@ (800045c <BlinkLed+0x10>)
 8000454:	f000 ff34 	bl	80012c0 <HAL_GPIO_TogglePin>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010800 	.word	0x40010800

08000460 <Run_Traffic_Light>:

void Run_Traffic_Light(){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	  //run_manual();
	  //run_setting();
	run_automatic();
 8000464:	f7ff fe72 	bl	800014c <run_automatic>
	if((status1/30)!=1 )count1--;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <Run_Traffic_Light+0x48>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3b1e      	subs	r3, #30
 800046e:	2b1d      	cmp	r3, #29
 8000470:	d904      	bls.n	800047c <Run_Traffic_Light+0x1c>
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <Run_Traffic_Light+0x4c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	3b01      	subs	r3, #1
 8000478:	4a0c      	ldr	r2, [pc, #48]	@ (80004ac <Run_Traffic_Light+0x4c>)
 800047a:	6013      	str	r3, [r2, #0]
	if((status2/30)!=1 )count2--;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <Run_Traffic_Light+0x50>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b1e      	subs	r3, #30
 8000482:	2b1d      	cmp	r3, #29
 8000484:	d904      	bls.n	8000490 <Run_Traffic_Light+0x30>
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <Run_Traffic_Light+0x54>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a09      	ldr	r2, [pc, #36]	@ (80004b4 <Run_Traffic_Light+0x54>)
 800048e:	6013      	str	r3, [r2, #0]
	if((status1/30)==1 )count3--;
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <Run_Traffic_Light+0x48>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3b1e      	subs	r3, #30
 8000496:	2b1d      	cmp	r3, #29
 8000498:	d804      	bhi.n	80004a4 <Run_Traffic_Light+0x44>
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <Run_Traffic_Light+0x58>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <Run_Traffic_Light+0x58>)
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000034 	.word	0x20000034
 80004ac:	2000003c 	.word	0x2000003c
 80004b0:	20000038 	.word	0x20000038
 80004b4:	20000040 	.word	0x20000040
 80004b8:	20000044 	.word	0x20000044

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fbfa 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f820 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8d4 	bl	8000674 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004cc:	f000 f886 	bl	80005dc <MX_TIM2_Init>
  MX_I2C1_Init();
 80004d0:	f000 f856 	bl	8000580 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <main+0x40>)
 80004d6:	f001 fc9d 	bl	8001e14 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 80004da:	f000 f935 	bl	8000748 <SCH_Init>
  SCH_Add_Task(BlinkLed, 0 , 1000);
 80004de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004e2:	2100      	movs	r1, #0
 80004e4:	4806      	ldr	r0, [pc, #24]	@ (8000500 <main+0x44>)
 80004e6:	f000 f9b9 	bl	800085c <SCH_Add_Task>
  //SCH_Add_Task(BlinkLed2, 0 , 2000);
  SCH_Add_Task(Run_Traffic_Light,0,100);
 80004ea:	2264      	movs	r2, #100	@ 0x64
 80004ec:	2100      	movs	r1, #0
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <main+0x48>)
 80004f0:	f000 f9b4 	bl	800085c <SCH_Add_Task>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task() ;
 80004f4:	f000 fa60 	bl	80009b8 <SCH_Dispatch_Task>
 80004f8:	e7fc      	b.n	80004f4 <main+0x38>
 80004fa:	bf00      	nop
 80004fc:	2000009c 	.word	0x2000009c
 8000500:	0800044d 	.word	0x0800044d
 8000504:	08000461 	.word	0x08000461

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b090      	sub	sp, #64	@ 0x40
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2228      	movs	r2, #40	@ 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 f808 	bl	800252c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	2310      	movs	r3, #16
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	4618      	mov	r0, r3
 8000540:	f001 f81c 	bl	800157c <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800054a:	f000 f8f7 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fa8a 	bl	8001a80 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000572:	f000 f8e3 	bl	800073c <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3740      	adds	r7, #64	@ 0x40
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_I2C1_Init+0x50>)
 8000586:	4a13      	ldr	r2, [pc, #76]	@ (80005d4 <MX_I2C1_Init+0x54>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_I2C1_Init+0x50>)
 800058c:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <MX_I2C1_Init+0x58>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_I2C1_Init+0x50>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_I2C1_Init+0x50>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_I2C1_Init+0x50>)
 800059e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005be:	f000 fe99 	bl	80012f4 <HAL_I2C_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c8:	f000 f8b8 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000048 	.word	0x20000048
 80005d4:	40005400 	.word	0x40005400
 80005d8:	000186a0 	.word	0x000186a0

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_TIM2_Init+0x94>)
 80005fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_TIM2_Init+0x94>)
 8000602:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_TIM2_Init+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_TIM2_Init+0x94>)
 8000610:	2209      	movs	r2, #9
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_TIM2_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_TIM2_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000620:	4813      	ldr	r0, [pc, #76]	@ (8000670 <MX_TIM2_Init+0x94>)
 8000622:	f001 fba7 	bl	8001d74 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800062c:	f000 f886 	bl	800073c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_TIM2_Init+0x94>)
 800063e:	f001 fd25 	bl	800208c <HAL_TIM_ConfigClockSource>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 f878 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_TIM2_Init+0x94>)
 800065a:	f001 fefd 	bl	8002458 <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000664:	f000 f86a 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000009c 	.word	0x2000009c

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <MX_GPIO_Init+0xac>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a24      	ldr	r2, [pc, #144]	@ (8000720 <MX_GPIO_Init+0xac>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_GPIO_Init+0xac>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80006b8:	2200      	movs	r2, #0
 80006ba:	f640 41fe 	movw	r1, #3326	@ 0xcfe
 80006be:	4819      	ldr	r0, [pc, #100]	@ (8000724 <MX_GPIO_Init+0xb0>)
 80006c0:	f000 fde6 	bl	8001290 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80006c4:	23fe      	movs	r3, #254	@ 0xfe
 80006c6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2302      	movs	r3, #2
 80006d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	4812      	ldr	r0, [pc, #72]	@ (8000724 <MX_GPIO_Init+0xb0>)
 80006dc:	f000 fc5c 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	@ (8000724 <MX_GPIO_Init+0xb0>)
 80006f6:	f000 fc4f 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000700:	2311      	movs	r3, #17
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_GPIO_Init+0xb0>)
 8000714:	f000 fc40 	bl	8000f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800

08000728 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	//timer_run();
	SCH_Update();
 8000730:	f000 f824 	bl	800077c <SCH_Update>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <SCH_Init>:
uint8_t Error_code_G ;
uint8_t Error_port ;
uint8_t Last_error_code_G;
uint32_t Error_tick_count_G;

void SCH_Init(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e006      	b.n	8000762 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f8e6 	bl	8000928 <SCH_Delete_Task>
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3301      	adds	r3, #1
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b27      	cmp	r3, #39	@ 0x27
 8000766:	d9f5      	bls.n	8000754 <SCH_Init+0xc>
	}
	 // Reset the global error variable
	 // − SCH_Delete_Task() will generate an error code,
	 // (because the task array is empty)
	 Error_code_G= 0;
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <SCH_Init+0x30>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	 //Timer_init();
	 //MX_IWDG_Init(); //Watchdog init
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000404 	.word	0x20000404

0800077c <SCH_Update>:

void SCH_Update(void){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
	uint32_t Index;
	  //NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	e05d      	b.n	8000844 <SCH_Update+0xc8>
	  // Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask){
 8000788:	4933      	ldr	r1, [pc, #204]	@ (8000858 <SCH_Update+0xdc>)
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	440b      	add	r3, r1
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d050      	beq.n	800083e <SCH_Update+0xc2>
			if (SCH_tasks_G[Index].Delay == 0) {
 800079c:	492e      	ldr	r1, [pc, #184]	@ (8000858 <SCH_Update+0xdc>)
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	3304      	adds	r3, #4
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d132      	bne.n	8000818 <SCH_Update+0x9c>
				  // The task is due to run
				  // Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe+= 1;
 80007b2:	4929      	ldr	r1, [pc, #164]	@ (8000858 <SCH_Update+0xdc>)
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	330c      	adds	r3, #12
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2d8      	uxtb	r0, r3
 80007c8:	4923      	ldr	r1, [pc, #140]	@ (8000858 <SCH_Update+0xdc>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	330c      	adds	r3, #12
 80007d8:	4602      	mov	r2, r0
 80007da:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 80007dc:	491e      	ldr	r1, [pc, #120]	@ (8000858 <SCH_Update+0xdc>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	3308      	adds	r3, #8
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d025      	beq.n	800083e <SCH_Update+0xc2>
					  // Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80007f2:	4919      	ldr	r1, [pc, #100]	@ (8000858 <SCH_Update+0xdc>)
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	3308      	adds	r3, #8
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	4814      	ldr	r0, [pc, #80]	@ (8000858 <SCH_Update+0xdc>)
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4403      	add	r3, r0
 8000812:	3304      	adds	r3, #4
 8000814:	6019      	str	r1, [r3, #0]
 8000816:	e012      	b.n	800083e <SCH_Update+0xc2>
				}
			} else {
				  // Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay --;
 8000818:	490f      	ldr	r1, [pc, #60]	@ (8000858 <SCH_Update+0xdc>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3304      	adds	r3, #4
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1e59      	subs	r1, r3, #1
 800082c:	480a      	ldr	r0, [pc, #40]	@ (8000858 <SCH_Update+0xdc>)
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4403      	add	r3, r0
 800083a:	3304      	adds	r3, #4
 800083c:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3301      	adds	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b27      	cmp	r3, #39	@ 0x27
 8000848:	d99e      	bls.n	8000788 <SCH_Update+0xc>
			}
		}
	}
	//Watchdog_Refresh();
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200000e4 	.word	0x200000e4

0800085c <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
	// First find a gap in the array (if there is one)
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 800086c:	e002      	b.n	8000874 <SCH_Add_Task+0x18>
 	 {
	 	 Index++;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8000874:	4929      	ldr	r1, [pc, #164]	@ (800091c <SCH_Add_Task+0xc0>)
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	4613      	mov	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	440b      	add	r3, r1
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <SCH_Add_Task+0x32>
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	2b27      	cmp	r3, #39	@ 0x27
 800088c:	d9ef      	bls.n	800086e <SCH_Add_Task+0x12>
 	 }
 // Havewe reached the end of the list?
 if (Index ==SCH_MAX_TASKS){
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2b28      	cmp	r3, #40	@ 0x28
 8000892:	d104      	bne.n	800089e <SCH_Add_Task+0x42>
 // Task list is full
 // Set the global error variable
 Error_code_G=ERROR_SCH_TOO_MANY_TASKS;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <SCH_Add_Task+0xc4>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
  // Also return an error code
 return SCH_MAX_TASKS;
 800089a:	2328      	movs	r3, #40	@ 0x28
 800089c:	e039      	b.n	8000912 <SCH_Add_Task+0xb6>
 }
 // If we’re here, there is a space in the task array
 SCH_tasks_G[Index].pTask = pFunction;
 800089e:	491f      	ldr	r1, [pc, #124]	@ (800091c <SCH_Add_Task+0xc0>)
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	440b      	add	r3, r1
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	601a      	str	r2, [r3, #0]
 SCH_tasks_G[Index].Delay = DELAY / TICK;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <SCH_Add_Task+0xc8>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	08d9      	lsrs	r1, r3, #3
 80008ba:	4818      	ldr	r0, [pc, #96]	@ (800091c <SCH_Add_Task+0xc0>)
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4403      	add	r3, r0
 80008c8:	3304      	adds	r3, #4
 80008ca:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].Period = PERIOD / TICK;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <SCH_Add_Task+0xc8>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	08d9      	lsrs	r1, r3, #3
 80008d6:	4811      	ldr	r0, [pc, #68]	@ (800091c <SCH_Add_Task+0xc0>)
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4403      	add	r3, r0
 80008e4:	3308      	adds	r3, #8
 80008e6:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].RunMe = 0;
 80008e8:	490c      	ldr	r1, [pc, #48]	@ (800091c <SCH_Add_Task+0xc0>)
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	440b      	add	r3, r1
 80008f6:	330c      	adds	r3, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
 SCH_tasks_G[Index].TaskID = Index;
 80008fc:	4907      	ldr	r1, [pc, #28]	@ (800091c <SCH_Add_Task+0xc0>)
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	3310      	adds	r3, #16
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	601a      	str	r2, [r3, #0]
 // return position of task (to allow later deletion)
 return Index;
 8000910:	697b      	ldr	r3, [r7, #20]
}
 8000912:	4618      	mov	r0, r3
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	200000e4 	.word	0x200000e4
 8000920:	20000404 	.word	0x20000404
 8000924:	cccccccd 	.word	0xcccccccd

08000928 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	uint8_t Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8000930:	491f      	ldr	r1, [pc, #124]	@ (80009b0 <SCH_Delete_Task+0x88>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d105      	bne.n	8000950 <SCH_Delete_Task+0x28>
	 // No task at this location ...
	 // Set the global error variable
	 Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000944:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <SCH_Delete_Task+0x8c>)
 8000946:	2208      	movs	r2, #8
 8000948:	701a      	strb	r2, [r3, #0]
	 // ... also return an error code
	 Return_code = RETURN_ERROR;
 800094a:	23ff      	movs	r3, #255	@ 0xff
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e001      	b.n	8000954 <SCH_Delete_Task+0x2c>
	 } else {
	 Return_code = RETURN_NORMAL;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
	 }
	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000954:	4916      	ldr	r1, [pc, #88]	@ (80009b0 <SCH_Delete_Task+0x88>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	440b      	add	r3, r1
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 8000966:	4912      	ldr	r1, [pc, #72]	@ (80009b0 <SCH_Delete_Task+0x88>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	3304      	adds	r3, #4
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <SCH_Delete_Task+0x88>)
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	440b      	add	r3, r1
 8000988:	3308      	adds	r3, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800098e:	4908      	ldr	r1, [pc, #32]	@ (80009b0 <SCH_Delete_Task+0x88>)
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	330c      	adds	r3, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
	 return Return_code; // return status
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000e4 	.word	0x200000e4
 80009b4:	20000404 	.word	0x20000404

080009b8 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	// Dispatches (runs) the next task (if one is ready)
	uint8_t Index;
	 // Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80009be:	2300      	movs	r3, #0
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	e039      	b.n	8000a38 <SCH_Dispatch_Task+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	4921      	ldr	r1, [pc, #132]	@ (8000a4c <SCH_Dispatch_Task+0x94>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	330c      	adds	r3, #12
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d02b      	beq.n	8000a32 <SCH_Dispatch_Task+0x7a>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	491b      	ldr	r1, [pc, #108]	@ (8000a4c <SCH_Dispatch_Task+0x94>)
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 80009ec:	79fa      	ldrb	r2, [r7, #7]
 80009ee:	4917      	ldr	r1, [pc, #92]	@ (8000a4c <SCH_Dispatch_Task+0x94>)
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	440b      	add	r3, r1
 80009fa:	330c      	adds	r3, #12
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	4912      	ldr	r1, [pc, #72]	@ (8000a4c <SCH_Dispatch_Task+0x94>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	330c      	adds	r3, #12
 8000a10:	4602      	mov	r2, r0
 8000a12:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0){
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <SCH_Dispatch_Task+0x94>)
 8000a18:	4613      	mov	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	440b      	add	r3, r1
 8000a22:	3308      	adds	r3, #8
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <SCH_Dispatch_Task+0x7a>
				SCH_Delete_Task(Index);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff7b 	bl	8000928 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	3301      	adds	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b27      	cmp	r3, #39	@ 0x27
 8000a3c:	d9c2      	bls.n	80009c4 <SCH_Dispatch_Task+0xc>
			}
		}
	}
	// Report system status
	SCH_Report_Status();
 8000a3e:	f000 f807 	bl	8000a50 <SCH_Report_Status>
	// The scheduler enters idlemode at this point
	//SCH_Go_To_Sleep();
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e4 	.word	0x200000e4

08000a50 <SCH_Report_Status>:

void SCH_Go_To_Sleep(){}

void SCH_Report_Status(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
#ifdef SCH_REPORT_ERRORS
	//ONLYAPPLIES IFWEAREREPORTINGERRORS
	// Check for answer error code
	if (Error_code_G != Last_error_code_G) {
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <SCH_Report_Status+0x68>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <SCH_Report_Status+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d016      	beq.n	8000a8e <SCH_Report_Status+0x3e>
		// Negative logic onLEDs assumed
		Error_port = 255 - Error_code_G;
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <SCH_Report_Status+0x68>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <SCH_Report_Status+0x70>)
 8000a6a:	701a      	strb	r2, [r3, #0]
		Last_error_code_G = Error_code_G;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <SCH_Report_Status+0x68>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <SCH_Report_Status+0x6c>)
 8000a72:	701a      	strb	r2, [r3, #0]
		if (Error_code_G != 0){
 8000a74:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <SCH_Report_Status+0x68>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d004      	beq.n	8000a86 <SCH_Report_Status+0x36>
			Error_tick_count_G= 60000;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <SCH_Report_Status+0x74>)
 8000a7e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000a82:	601a      	str	r2, [r3, #0]
				Error_code_G= 0; // Reset error code
			}
		}
	}
#endif
}
 8000a84:	e013      	b.n	8000aae <SCH_Report_Status+0x5e>
			Error_tick_count_G= 0;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <SCH_Report_Status+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	e00f      	b.n	8000aae <SCH_Report_Status+0x5e>
		if (Error_tick_count_G != 0){
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <SCH_Report_Status+0x74>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00b      	beq.n	8000aae <SCH_Report_Status+0x5e>
			if (--Error_tick_count_G== 0) {
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <SCH_Report_Status+0x74>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <SCH_Report_Status+0x74>)
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <SCH_Report_Status+0x74>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <SCH_Report_Status+0x5e>
				Error_code_G= 0; // Reset error code
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <SCH_Report_Status+0x68>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000404 	.word	0x20000404
 8000abc:	20000406 	.word	0x20000406
 8000ac0:	20000405 	.word	0x20000405
 8000ac4:	20000408 	.word	0x20000408

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_MspInit+0x5c>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <HAL_MspInit+0x5c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_MspInit+0x5c>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_MspInit+0x5c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <HAL_MspInit+0x5c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	61d3      	str	r3, [r2, #28]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <HAL_MspInit+0x5c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_MspInit+0x60>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <HAL_MspInit+0x60>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010000 	.word	0x40010000

08000b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a16      	ldr	r2, [pc, #88]	@ (8000ba0 <HAL_I2C_MspInit+0x74>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d125      	bne.n	8000b98 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b64:	23c0      	movs	r3, #192	@ 0xc0
 8000b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <HAL_I2C_MspInit+0x7c>)
 8000b7c:	f000 fa0c 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b8a:	61d3      	str	r3, [r2, #28]
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bbc:	d113      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 f9a5 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 f9be 	bl	8000f62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f87e 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <TIM2_IRQHandler+0x10>)
 8000c52:	f001 f92b 	bl	8001eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000009c 	.word	0x2000009c

08000c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff fff8 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c72:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c88:	4c09      	ldr	r4, [pc, #36]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f001 fc51 	bl	800253c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fc0f 	bl	80004bc <main>
  bx lr
 8000c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ca8:	080025d0 	.word	0x080025d0
  ldr r2, =_sbss
 8000cac:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000cb0:	20000410 	.word	0x20000410

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_Init+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_Init+0x28>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f923 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fef8 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f93b 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f903 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000014 	.word	0x20000014
 8000d40:	20000010 	.word	0x20000010

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000014 	.word	0x20000014
 8000d64:	2000040c 	.word	0x2000040c

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	2000040c 	.word	0x2000040c

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4906      	ldr	r1, [pc, #24]	@ (8000e14 <__NVIC_EnableIRQ+0x34>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff90 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff2d 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff42 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff90 	bl	8000e6c <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5f 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff35 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b08b      	sub	sp, #44	@ 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e161      	b.n	8001270 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fac:	2201      	movs	r2, #1
 8000fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8150 	bne.w	800126a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a97      	ldr	r2, [pc, #604]	@ (800122c <HAL_GPIO_Init+0x294>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05e      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a95      	ldr	r2, [pc, #596]	@ (800122c <HAL_GPIO_Init+0x294>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d875      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000fda:	4a95      	ldr	r2, [pc, #596]	@ (8001230 <HAL_GPIO_Init+0x298>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d058      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a93      	ldr	r2, [pc, #588]	@ (8001230 <HAL_GPIO_Init+0x298>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d86f      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000fe6:	4a93      	ldr	r2, [pc, #588]	@ (8001234 <HAL_GPIO_Init+0x29c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d052      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fec:	4a91      	ldr	r2, [pc, #580]	@ (8001234 <HAL_GPIO_Init+0x29c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d869      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000ff2:	4a91      	ldr	r2, [pc, #580]	@ (8001238 <HAL_GPIO_Init+0x2a0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d04c      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a8f      	ldr	r2, [pc, #572]	@ (8001238 <HAL_GPIO_Init+0x2a0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d863      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000ffe:	4a8f      	ldr	r2, [pc, #572]	@ (800123c <HAL_GPIO_Init+0x2a4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d046      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8001004:	4a8d      	ldr	r2, [pc, #564]	@ (800123c <HAL_GPIO_Init+0x2a4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d85d      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d82a      	bhi.n	8001064 <HAL_GPIO_Init+0xcc>
 800100e:	2b12      	cmp	r3, #18
 8001010:	d859      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8001012:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <HAL_GPIO_Init+0x80>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001093 	.word	0x08001093
 800101c:	0800106d 	.word	0x0800106d
 8001020:	0800107f 	.word	0x0800107f
 8001024:	080010c1 	.word	0x080010c1
 8001028:	080010c7 	.word	0x080010c7
 800102c:	080010c7 	.word	0x080010c7
 8001030:	080010c7 	.word	0x080010c7
 8001034:	080010c7 	.word	0x080010c7
 8001038:	080010c7 	.word	0x080010c7
 800103c:	080010c7 	.word	0x080010c7
 8001040:	080010c7 	.word	0x080010c7
 8001044:	080010c7 	.word	0x080010c7
 8001048:	080010c7 	.word	0x080010c7
 800104c:	080010c7 	.word	0x080010c7
 8001050:	080010c7 	.word	0x080010c7
 8001054:	080010c7 	.word	0x080010c7
 8001058:	080010c7 	.word	0x080010c7
 800105c:	08001075 	.word	0x08001075
 8001060:	08001089 	.word	0x08001089
 8001064:	4a76      	ldr	r2, [pc, #472]	@ (8001240 <HAL_GPIO_Init+0x2a8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106a:	e02c      	b.n	80010c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e029      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3304      	adds	r3, #4
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e024      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	3308      	adds	r3, #8
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e01f      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	330c      	adds	r3, #12
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e01a      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109a:	2304      	movs	r3, #4
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e013      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	611a      	str	r2, [r3, #16]
          break;
 80010b2:	e009      	b.n	80010c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b4:	2308      	movs	r3, #8
 80010b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	615a      	str	r2, [r3, #20]
          break;
 80010be:	e003      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          break;
 80010c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2bff      	cmp	r3, #255	@ 0xff
 80010cc:	d801      	bhi.n	80010d2 <HAL_GPIO_Init+0x13a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	e001      	b.n	80010d6 <HAL_GPIO_Init+0x13e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3304      	adds	r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d802      	bhi.n	80010e4 <HAL_GPIO_Init+0x14c>
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0x152>
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	3b08      	subs	r3, #8
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	210f      	movs	r1, #15
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	6a39      	ldr	r1, [r7, #32]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80a9 	beq.w	800126a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001118:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_GPIO_Init+0x2ac>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a49      	ldr	r2, [pc, #292]	@ (8001244 <HAL_GPIO_Init+0x2ac>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b47      	ldr	r3, [pc, #284]	@ (8001244 <HAL_GPIO_Init+0x2ac>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001130:	4a45      	ldr	r2, [pc, #276]	@ (8001248 <HAL_GPIO_Init+0x2b0>)
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <HAL_GPIO_Init+0x2b4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <HAL_GPIO_Init+0x2b8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1dc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3b      	ldr	r2, [pc, #236]	@ (8001254 <HAL_GPIO_Init+0x2bc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1d8>
 800116c:	2302      	movs	r3, #2
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1e2>
 8001170:	2303      	movs	r3, #3
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1e2>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1e2>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x2b0>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	492b      	ldr	r1, [pc, #172]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4927      	ldr	r1, [pc, #156]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4921      	ldr	r1, [pc, #132]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491d      	ldr	r1, [pc, #116]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4917      	ldr	r1, [pc, #92]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4913      	ldr	r1, [pc, #76]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 800120c:	4013      	ands	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01f      	beq.n	800125c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	490d      	ldr	r1, [pc, #52]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e01f      	b.n	800126a <HAL_GPIO_Init+0x2d2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_GPIO_Init+0x2f4>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	43db      	mvns	r3, r3
 8001264:	4909      	ldr	r1, [pc, #36]	@ (800128c <HAL_GPIO_Init+0x2f4>)
 8001266:	4013      	ands	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	f47f ae96 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	372c      	adds	r7, #44	@ 0x2c
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	041a      	lsls	r2, r3, #16
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43d9      	mvns	r1, r3
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	400b      	ands	r3, r1
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e12b      	b.n	800155e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fc06 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2224      	movs	r2, #36	@ 0x24
 8001324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001358:	f000 fcda 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 800135c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a81      	ldr	r2, [pc, #516]	@ (8001568 <HAL_I2C_Init+0x274>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d807      	bhi.n	8001378 <HAL_I2C_Init+0x84>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4a80      	ldr	r2, [pc, #512]	@ (800156c <HAL_I2C_Init+0x278>)
 800136c:	4293      	cmp	r3, r2
 800136e:	bf94      	ite	ls
 8001370:	2301      	movls	r3, #1
 8001372:	2300      	movhi	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	e006      	b.n	8001386 <HAL_I2C_Init+0x92>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a7d      	ldr	r2, [pc, #500]	@ (8001570 <HAL_I2C_Init+0x27c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	bf94      	ite	ls
 8001380:	2301      	movls	r3, #1
 8001382:	2300      	movhi	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0e7      	b.n	800155e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a78      	ldr	r2, [pc, #480]	@ (8001574 <HAL_I2C_Init+0x280>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001568 <HAL_I2C_Init+0x274>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d802      	bhi.n	80013c8 <HAL_I2C_Init+0xd4>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3301      	adds	r3, #1
 80013c6:	e009      	b.n	80013dc <HAL_I2C_Init+0xe8>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4a69      	ldr	r2, [pc, #420]	@ (8001578 <HAL_I2C_Init+0x284>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	3301      	adds	r3, #1
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	495c      	ldr	r1, [pc, #368]	@ (8001568 <HAL_I2C_Init+0x274>)
 80013f8:	428b      	cmp	r3, r1
 80013fa:	d819      	bhi.n	8001430 <HAL_I2C_Init+0x13c>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1e59      	subs	r1, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fbb1 f3f3 	udiv	r3, r1, r3
 800140a:	1c59      	adds	r1, r3, #1
 800140c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001410:	400b      	ands	r3, r1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <HAL_I2C_Init+0x138>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1e59      	subs	r1, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fbb1 f3f3 	udiv	r3, r1, r3
 8001424:	3301      	adds	r3, #1
 8001426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142a:	e051      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 800142c:	2304      	movs	r3, #4
 800142e:	e04f      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d111      	bne.n	800145c <HAL_I2C_Init+0x168>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e58      	subs	r0, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	440b      	add	r3, r1
 8001446:	fbb0 f3f3 	udiv	r3, r0, r3
 800144a:	3301      	adds	r3, #1
 800144c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	e012      	b.n	8001482 <HAL_I2C_Init+0x18e>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1e58      	subs	r0, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	0099      	lsls	r1, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf0c      	ite	eq
 800147c:	2301      	moveq	r3, #1
 800147e:	2300      	movne	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Init+0x196>
 8001486:	2301      	movs	r3, #1
 8001488:	e022      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10e      	bne.n	80014b0 <HAL_I2C_Init+0x1bc>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e58      	subs	r0, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	440b      	add	r3, r1
 80014a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ae:	e00f      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	6809      	ldr	r1, [r1, #0]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6911      	ldr	r1, [r2, #16]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68d2      	ldr	r2, [r2, #12]
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2220      	movs	r2, #32
 800154a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	000186a0 	.word	0x000186a0
 800156c:	001e847f 	.word	0x001e847f
 8001570:	003d08ff 	.word	0x003d08ff
 8001574:	431bde83 	.word	0x431bde83
 8001578:	10624dd3 	.word	0x10624dd3

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e272      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8087 	beq.w	80016aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	4b92      	ldr	r3, [pc, #584]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a8:	4b8f      	ldr	r3, [pc, #572]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d112      	bne.n	80015da <HAL_RCC_OscConfig+0x5e>
 80015b4:	4b8c      	ldr	r3, [pc, #560]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c0:	d10b      	bne.n	80015da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4b89      	ldr	r3, [pc, #548]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d06c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x12c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d168      	bne.n	80016a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e24c      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x76>
 80015e4:	4b80      	ldr	r3, [pc, #512]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a7f      	ldr	r2, [pc, #508]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e02e      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b7b      	ldr	r3, [pc, #492]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7a      	ldr	r2, [pc, #488]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b78      	ldr	r3, [pc, #480]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a77      	ldr	r2, [pc, #476]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xbc>
 800161e:	4b72      	ldr	r3, [pc, #456]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a71      	ldr	r2, [pc, #452]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 8001638:	4b6b      	ldr	r3, [pc, #428]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6a      	ldr	r2, [pc, #424]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b68      	ldr	r3, [pc, #416]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a67      	ldr	r2, [pc, #412]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800164e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb86 	bl	8000d68 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb82 	bl	8000d68 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e200      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xe4>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb72 	bl	8000d68 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fb6e 	bl	8000d68 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	@ 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1ec      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x10c>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	4b4c      	ldr	r3, [pc, #304]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016c2:	4b49      	ldr	r3, [pc, #292]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x18c>
 80016ce:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b43      	ldr	r3, [pc, #268]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e1c0      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4939      	ldr	r1, [pc, #228]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e03a      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b36      	ldr	r3, [pc, #216]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fb27 	bl	8000d68 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fb23 	bl	8000d68 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1a1      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4927      	ldr	r1, [pc, #156]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb06 	bl	8000d68 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fb02 	bl	8000d68 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e180      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03a      	beq.n	8001800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d019      	beq.n	80017c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <HAL_RCC_OscConfig+0x274>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fae6 	bl	8000d68 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fae2 	bl	8000d68 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e160      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 faba 	bl	8001d38 <RCC_Delay>
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_RCC_OscConfig+0x274>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff facc 	bl	8000d68 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	e00f      	b.n	80017f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fac8 	bl	8000d68 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d908      	bls.n	80017f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e146      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	42420000 	.word	0x42420000
 80017f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b92      	ldr	r3, [pc, #584]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e9      	bne.n	80017d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a6 	beq.w	800195a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b8b      	ldr	r3, [pc, #556]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b88      	ldr	r3, [pc, #544]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a87      	ldr	r2, [pc, #540]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b85      	ldr	r3, [pc, #532]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b82      	ldr	r3, [pc, #520]	@ (8001a44 <HAL_RCC_OscConfig+0x4c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b7f      	ldr	r3, [pc, #508]	@ (8001a44 <HAL_RCC_OscConfig+0x4c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a44 <HAL_RCC_OscConfig+0x4c8>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff fa89 	bl	8000d68 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fa85 	bl	8000d68 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	@ 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e103      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b75      	ldr	r3, [pc, #468]	@ (8001a44 <HAL_RCC_OscConfig+0x4c8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x312>
 8001880:	4b6f      	ldr	r3, [pc, #444]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a6e      	ldr	r2, [pc, #440]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e02d      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x334>
 8001896:	4b6a      	ldr	r3, [pc, #424]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a69      	ldr	r2, [pc, #420]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b67      	ldr	r3, [pc, #412]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a66      	ldr	r2, [pc, #408]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	e01c      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x356>
 80018b8:	4b61      	ldr	r3, [pc, #388]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a60      	ldr	r2, [pc, #384]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 80018d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a57      	ldr	r2, [pc, #348]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa39 	bl	8000d68 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fa35 	bl	8000d68 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0b1      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	4b4b      	ldr	r3, [pc, #300]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ee      	beq.n	80018fa <HAL_RCC_OscConfig+0x37e>
 800191c:	e014      	b.n	8001948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fa23 	bl	8000d68 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff fa1f 	bl	8000d68 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e09b      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	4b40      	ldr	r3, [pc, #256]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a3b      	ldr	r2, [pc, #236]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8087 	beq.w	8001a72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d061      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d146      	bne.n	8001a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b33      	ldr	r3, [pc, #204]	@ (8001a48 <HAL_RCC_OscConfig+0x4cc>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f9f3 	bl	8000d68 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff f9ef 	bl	8000d68 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e06d      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d108      	bne.n	80019c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4921      	ldr	r1, [pc, #132]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a19      	ldr	r1, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	430b      	orrs	r3, r1
 80019d2:	491b      	ldr	r1, [pc, #108]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x4cc>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff f9c3 	bl	8000d68 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f9bf 	bl	8000d68 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e03d      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46a>
 8001a04:	e035      	b.n	8001a72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_RCC_OscConfig+0x4cc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9ac 	bl	8000d68 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f9a8 	bl	8000d68 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e026      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x498>
 8001a32:	e01e      	b.n	8001a72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e019      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
 8001a48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_RCC_OscConfig+0x500>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0d0      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b67      	ldr	r3, [pc, #412]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4965      	ldr	r1, [pc, #404]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ae6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001afe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d040      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d115      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e073      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e06b      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4936      	ldr	r1, [pc, #216]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f8fa 	bl	8000d68 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff f8f6 	bl	8000d68 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e053      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d210      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 0207 	bic.w	r2, r3, #7
 8001bb6:	4922      	ldr	r1, [pc, #136]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f821 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	5ccb      	ldrb	r3, [r1, r3]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <HAL_RCC_ClockConfig+0x1cc>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_ClockConfig+0x1d0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f858 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	0800259c 	.word	0x0800259c
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	20000010 	.word	0x20000010

08001c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x30>
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x36>
 8001c82:	e027      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x98>)
 8001c86:	613b      	str	r3, [r7, #16]
      break;
 8001c88:	e027      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0c5b      	lsrs	r3, r3, #17
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb6:	fb03 f202 	mul.w	r2, r3, r2
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e004      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x98>)
 8001cd6:	613b      	str	r3, [r7, #16]
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	693b      	ldr	r3, [r7, #16]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	007a1200 	.word	0x007a1200
 8001cf0:	080025b4 	.word	0x080025b4
 8001cf4:	080025c4 	.word	0x080025c4
 8001cf8:	003d0900 	.word	0x003d0900

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b02      	ldr	r3, [pc, #8]	@ (8001d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff2 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	@ (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080025ac 	.word	0x080025ac

08001d38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <RCC_Delay+0x34>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <RCC_Delay+0x38>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d54:	bf00      	nop
  }
  while (Delay --);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	60fa      	str	r2, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f9      	bne.n	8001d54 <RCC_Delay+0x1c>
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	10624dd3 	.word	0x10624dd3

08001d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e041      	b.n	8001e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe ff06 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 fa56 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d001      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e035      	b.n	8001e98 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a16      	ldr	r2, [pc, #88]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0x90>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_TIM_Base_Start_IT+0x4e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e56:	d004      	beq.n	8001e62 <HAL_TIM_Base_Start_IT+0x4e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0x94>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d111      	bne.n	8001e86 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d010      	beq.n	8001e96 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	e007      	b.n	8001e96 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40000400 	.word	0x40000400

08001eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0202 	mvn.w	r2, #2
 8001ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f998 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f98b 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f99a 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0204 	mvn.w	r2, #4
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f972 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f965 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f974 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0208 	mvn.w	r2, #8
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f94c 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f93f 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f94e 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0210 	mvn.w	r2, #16
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f926 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f919 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f928 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fb88 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa6f 	bl	800251a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8f8 	bl	8002250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa42 	bl	8002508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_TIM_ConfigClockSource+0x1c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0b4      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x186>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e0:	d03e      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0xd4>
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e6:	f200 8087 	bhi.w	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ee:	f000 8086 	beq.w	80021fe <HAL_TIM_ConfigClockSource+0x172>
 80020f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020f6:	d87f      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b70      	cmp	r3, #112	@ 0x70
 80020fa:	d01a      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0xa6>
 80020fc:	2b70      	cmp	r3, #112	@ 0x70
 80020fe:	d87b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002100:	2b60      	cmp	r3, #96	@ 0x60
 8002102:	d050      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002104:	2b60      	cmp	r3, #96	@ 0x60
 8002106:	d877      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002108:	2b50      	cmp	r3, #80	@ 0x50
 800210a:	d03c      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xfa>
 800210c:	2b50      	cmp	r3, #80	@ 0x50
 800210e:	d873      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002110:	2b40      	cmp	r3, #64	@ 0x40
 8002112:	d058      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002114:	2b40      	cmp	r3, #64	@ 0x40
 8002116:	d86f      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002118:	2b30      	cmp	r3, #48	@ 0x30
 800211a:	d064      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 800211c:	2b30      	cmp	r3, #48	@ 0x30
 800211e:	d86b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002120:	2b20      	cmp	r3, #32
 8002122:	d060      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002124:	2b20      	cmp	r3, #32
 8002126:	d867      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05c      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 800212c:	2b10      	cmp	r3, #16
 800212e:	d05a      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002130:	e062      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002142:	f000 f96a 	bl	800241a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	609a      	str	r2, [r3, #8]
      break;
 800215e:	e04f      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002170:	f000 f953 	bl	800241a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002182:	609a      	str	r2, [r3, #8]
      break;
 8002184:	e03c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002192:	461a      	mov	r2, r3
 8002194:	f000 f8ca 	bl	800232c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2150      	movs	r1, #80	@ 0x50
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f921 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 80021a4:	e02c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b2:	461a      	mov	r2, r3
 80021b4:	f000 f8e8 	bl	8002388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2160      	movs	r1, #96	@ 0x60
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f911 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 80021c4:	e01c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d2:	461a      	mov	r2, r3
 80021d4:	f000 f8aa 	bl	800232c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2140      	movs	r1, #64	@ 0x40
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f901 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 80021e4:	e00c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f000 f8f8 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 80021f6:	e003      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e000      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a2b      	ldr	r2, [pc, #172]	@ (8002324 <TIM_Base_SetConfig+0xc0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0x28>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0x28>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a28      	ldr	r2, [pc, #160]	@ (8002328 <TIM_Base_SetConfig+0xc4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a20      	ldr	r2, [pc, #128]	@ (8002324 <TIM_Base_SetConfig+0xc0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0x52>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0x52>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <TIM_Base_SetConfig+0xc4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <TIM_Base_SetConfig+0xc0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f023 0201 	bic.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]
  }
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400

0800232c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0201 	bic.w	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f023 030a 	bic.w	r3, r3, #10
 8002368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	621a      	str	r2, [r3, #32]
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f023 0210 	bic.w	r2, r3, #16
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	031b      	lsls	r3, r3, #12
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80023c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	621a      	str	r2, [r3, #32]
}
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	f043 0307 	orr.w	r3, r3, #7
 8002408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800241a:	b480      	push	{r7}
 800241c:	b087      	sub	sp, #28
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002434:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4313      	orrs	r3, r2
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	609a      	str	r2, [r3, #8]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800246c:	2302      	movs	r3, #2
 800246e:	e041      	b.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024bc:	d004      	beq.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10c      	bne.n	80024e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400

08002508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <memset>:
 800252c:	4603      	mov	r3, r0
 800252e:	4402      	add	r2, r0
 8002530:	4293      	cmp	r3, r2
 8002532:	d100      	bne.n	8002536 <memset+0xa>
 8002534:	4770      	bx	lr
 8002536:	f803 1b01 	strb.w	r1, [r3], #1
 800253a:	e7f9      	b.n	8002530 <memset+0x4>

0800253c <__libc_init_array>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	2600      	movs	r6, #0
 8002540:	4d0c      	ldr	r5, [pc, #48]	@ (8002574 <__libc_init_array+0x38>)
 8002542:	4c0d      	ldr	r4, [pc, #52]	@ (8002578 <__libc_init_array+0x3c>)
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	42a6      	cmp	r6, r4
 800254a:	d109      	bne.n	8002560 <__libc_init_array+0x24>
 800254c:	f000 f81a 	bl	8002584 <_init>
 8002550:	2600      	movs	r6, #0
 8002552:	4d0a      	ldr	r5, [pc, #40]	@ (800257c <__libc_init_array+0x40>)
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <__libc_init_array+0x44>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	42a6      	cmp	r6, r4
 800255c:	d105      	bne.n	800256a <__libc_init_array+0x2e>
 800255e:	bd70      	pop	{r4, r5, r6, pc}
 8002560:	f855 3b04 	ldr.w	r3, [r5], #4
 8002564:	4798      	blx	r3
 8002566:	3601      	adds	r6, #1
 8002568:	e7ee      	b.n	8002548 <__libc_init_array+0xc>
 800256a:	f855 3b04 	ldr.w	r3, [r5], #4
 800256e:	4798      	blx	r3
 8002570:	3601      	adds	r6, #1
 8002572:	e7f2      	b.n	800255a <__libc_init_array+0x1e>
 8002574:	080025c8 	.word	0x080025c8
 8002578:	080025c8 	.word	0x080025c8
 800257c:	080025c8 	.word	0x080025c8
 8002580:	080025cc 	.word	0x080025cc

08002584 <_init>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

08002590 <_fini>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr
